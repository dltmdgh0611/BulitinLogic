
MVLogic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005478  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08005624  08005624  00015624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056a4  080056a4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080056a4  080056a4  000156a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056ac  080056ac  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056ac  080056ac  000156ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056b0  080056b0  000156b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080056b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e58  20000070  08005724  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ec8  08005724  00020ec8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013e67  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002cf6  00000000  00000000  00033f07  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010e8  00000000  00000000  00036c00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f98  00000000  00000000  00037ce8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026c55  00000000  00000000  00038c80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ea49  00000000  00000000  0005f8d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e44a7  00000000  00000000  0006e31e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001527c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c84  00000000  00000000  00152840  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000070 	.word	0x20000070
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800560c 	.word	0x0800560c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000074 	.word	0x20000074
 80001e8:	0800560c 	.word	0x0800560c

080001ec <__aeabi_drsub>:
 80001ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f0:	e002      	b.n	80001f8 <__adddf3>
 80001f2:	bf00      	nop

080001f4 <__aeabi_dsub>:
 80001f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f8 <__adddf3>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000202:	ea94 0f05 	teq	r4, r5
 8000206:	bf08      	it	eq
 8000208:	ea90 0f02 	teqeq	r0, r2
 800020c:	bf1f      	itttt	ne
 800020e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021e:	f000 80e2 	beq.w	80003e6 <__adddf3+0x1ee>
 8000222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022a:	bfb8      	it	lt
 800022c:	426d      	neglt	r5, r5
 800022e:	dd0c      	ble.n	800024a <__adddf3+0x52>
 8000230:	442c      	add	r4, r5
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	ea82 0000 	eor.w	r0, r2, r0
 800023e:	ea83 0101 	eor.w	r1, r3, r1
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	2d36      	cmp	r5, #54	; 0x36
 800024c:	bf88      	it	hi
 800024e:	bd30      	pophi	{r4, r5, pc}
 8000250:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000258:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800025c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x70>
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800026c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x84>
 8000276:	4252      	negs	r2, r2
 8000278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027c:	ea94 0f05 	teq	r4, r5
 8000280:	f000 80a7 	beq.w	80003d2 <__adddf3+0x1da>
 8000284:	f1a4 0401 	sub.w	r4, r4, #1
 8000288:	f1d5 0e20 	rsbs	lr, r5, #32
 800028c:	db0d      	blt.n	80002aa <__adddf3+0xb2>
 800028e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000292:	fa22 f205 	lsr.w	r2, r2, r5
 8000296:	1880      	adds	r0, r0, r2
 8000298:	f141 0100 	adc.w	r1, r1, #0
 800029c:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a0:	1880      	adds	r0, r0, r2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	4159      	adcs	r1, r3
 80002a8:	e00e      	b.n	80002c8 <__adddf3+0xd0>
 80002aa:	f1a5 0520 	sub.w	r5, r5, #32
 80002ae:	f10e 0e20 	add.w	lr, lr, #32
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b8:	bf28      	it	cs
 80002ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002cc:	d507      	bpl.n	80002de <__adddf3+0xe6>
 80002ce:	f04f 0e00 	mov.w	lr, #0
 80002d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002da:	eb6e 0101 	sbc.w	r1, lr, r1
 80002de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e2:	d31b      	bcc.n	800031c <__adddf3+0x124>
 80002e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e8:	d30c      	bcc.n	8000304 <__adddf3+0x10c>
 80002ea:	0849      	lsrs	r1, r1, #1
 80002ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f4:	f104 0401 	add.w	r4, r4, #1
 80002f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000300:	f080 809a 	bcs.w	8000438 <__adddf3+0x240>
 8000304:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000308:	bf08      	it	eq
 800030a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030e:	f150 0000 	adcs.w	r0, r0, #0
 8000312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000316:	ea41 0105 	orr.w	r1, r1, r5
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000320:	4140      	adcs	r0, r0
 8000322:	eb41 0101 	adc.w	r1, r1, r1
 8000326:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032a:	f1a4 0401 	sub.w	r4, r4, #1
 800032e:	d1e9      	bne.n	8000304 <__adddf3+0x10c>
 8000330:	f091 0f00 	teq	r1, #0
 8000334:	bf04      	itt	eq
 8000336:	4601      	moveq	r1, r0
 8000338:	2000      	moveq	r0, #0
 800033a:	fab1 f381 	clz	r3, r1
 800033e:	bf08      	it	eq
 8000340:	3320      	addeq	r3, #32
 8000342:	f1a3 030b 	sub.w	r3, r3, #11
 8000346:	f1b3 0220 	subs.w	r2, r3, #32
 800034a:	da0c      	bge.n	8000366 <__adddf3+0x16e>
 800034c:	320c      	adds	r2, #12
 800034e:	dd08      	ble.n	8000362 <__adddf3+0x16a>
 8000350:	f102 0c14 	add.w	ip, r2, #20
 8000354:	f1c2 020c 	rsb	r2, r2, #12
 8000358:	fa01 f00c 	lsl.w	r0, r1, ip
 800035c:	fa21 f102 	lsr.w	r1, r1, r2
 8000360:	e00c      	b.n	800037c <__adddf3+0x184>
 8000362:	f102 0214 	add.w	r2, r2, #20
 8000366:	bfd8      	it	le
 8000368:	f1c2 0c20 	rsble	ip, r2, #32
 800036c:	fa01 f102 	lsl.w	r1, r1, r2
 8000370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000374:	bfdc      	itt	le
 8000376:	ea41 010c 	orrle.w	r1, r1, ip
 800037a:	4090      	lslle	r0, r2
 800037c:	1ae4      	subs	r4, r4, r3
 800037e:	bfa2      	ittt	ge
 8000380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000384:	4329      	orrge	r1, r5
 8000386:	bd30      	popge	{r4, r5, pc}
 8000388:	ea6f 0404 	mvn.w	r4, r4
 800038c:	3c1f      	subs	r4, #31
 800038e:	da1c      	bge.n	80003ca <__adddf3+0x1d2>
 8000390:	340c      	adds	r4, #12
 8000392:	dc0e      	bgt.n	80003b2 <__adddf3+0x1ba>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0220 	rsb	r2, r4, #32
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f302 	lsl.w	r3, r1, r2
 80003a4:	ea40 0003 	orr.w	r0, r0, r3
 80003a8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ac:	ea45 0103 	orr.w	r1, r5, r3
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f1c4 040c 	rsb	r4, r4, #12
 80003b6:	f1c4 0220 	rsb	r2, r4, #32
 80003ba:	fa20 f002 	lsr.w	r0, r0, r2
 80003be:	fa01 f304 	lsl.w	r3, r1, r4
 80003c2:	ea40 0003 	orr.w	r0, r0, r3
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	fa21 f004 	lsr.w	r0, r1, r4
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f094 0f00 	teq	r4, #0
 80003d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003da:	bf06      	itte	eq
 80003dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e0:	3401      	addeq	r4, #1
 80003e2:	3d01      	subne	r5, #1
 80003e4:	e74e      	b.n	8000284 <__adddf3+0x8c>
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf18      	it	ne
 80003ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f0:	d029      	beq.n	8000446 <__adddf3+0x24e>
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	d005      	beq.n	800040a <__adddf3+0x212>
 80003fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000402:	bf04      	itt	eq
 8000404:	4619      	moveq	r1, r3
 8000406:	4610      	moveq	r0, r2
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea91 0f03 	teq	r1, r3
 800040e:	bf1e      	ittt	ne
 8000410:	2100      	movne	r1, #0
 8000412:	2000      	movne	r0, #0
 8000414:	bd30      	popne	{r4, r5, pc}
 8000416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041a:	d105      	bne.n	8000428 <__adddf3+0x230>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	4149      	adcs	r1, r1
 8000420:	bf28      	it	cs
 8000422:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800042c:	bf3c      	itt	cc
 800042e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000432:	bd30      	popcc	{r4, r5, pc}
 8000434:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000438:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf1a      	itte	ne
 800044c:	4619      	movne	r1, r3
 800044e:	4610      	movne	r0, r2
 8000450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000454:	bf1c      	itt	ne
 8000456:	460b      	movne	r3, r1
 8000458:	4602      	movne	r2, r0
 800045a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045e:	bf06      	itte	eq
 8000460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000464:	ea91 0f03 	teqeq	r1, r3
 8000468:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	bf00      	nop

08000470 <__aeabi_ui2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000484:	f04f 0500 	mov.w	r5, #0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e750      	b.n	8000330 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_i2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a8:	bf48      	it	mi
 80004aa:	4240      	negmi	r0, r0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e73e      	b.n	8000330 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_f2d>:
 80004b4:	0042      	lsls	r2, r0, #1
 80004b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80004be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c2:	bf1f      	itttt	ne
 80004c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d0:	4770      	bxne	lr
 80004d2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d6:	bf08      	it	eq
 80004d8:	4770      	bxeq	lr
 80004da:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004de:	bf04      	itt	eq
 80004e0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f4:	e71c      	b.n	8000330 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_ul2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f04f 0500 	mov.w	r5, #0
 8000506:	e00a      	b.n	800051e <__aeabi_l2d+0x16>

08000508 <__aeabi_l2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000516:	d502      	bpl.n	800051e <__aeabi_l2d+0x16>
 8000518:	4240      	negs	r0, r0
 800051a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000522:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000526:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052a:	f43f aed8 	beq.w	80002de <__adddf3+0xe6>
 800052e:	f04f 0203 	mov.w	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053e:	bf18      	it	ne
 8000540:	3203      	addne	r2, #3
 8000542:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000546:	f1c2 0320 	rsb	r3, r2, #32
 800054a:	fa00 fc03 	lsl.w	ip, r0, r3
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 fe03 	lsl.w	lr, r1, r3
 8000556:	ea40 000e 	orr.w	r0, r0, lr
 800055a:	fa21 f102 	lsr.w	r1, r1, r2
 800055e:	4414      	add	r4, r2
 8000560:	e6bd      	b.n	80002de <__adddf3+0xe6>
 8000562:	bf00      	nop

08000564 <__aeabi_d2iz>:
 8000564:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000568:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800056c:	d215      	bcs.n	800059a <__aeabi_d2iz+0x36>
 800056e:	d511      	bpl.n	8000594 <__aeabi_d2iz+0x30>
 8000570:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000574:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000578:	d912      	bls.n	80005a0 <__aeabi_d2iz+0x3c>
 800057a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800057e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000582:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000586:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800058a:	fa23 f002 	lsr.w	r0, r3, r2
 800058e:	bf18      	it	ne
 8000590:	4240      	negne	r0, r0
 8000592:	4770      	bx	lr
 8000594:	f04f 0000 	mov.w	r0, #0
 8000598:	4770      	bx	lr
 800059a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800059e:	d105      	bne.n	80005ac <__aeabi_d2iz+0x48>
 80005a0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80005a4:	bf08      	it	eq
 80005a6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80005aa:	4770      	bx	lr
 80005ac:	f04f 0000 	mov.w	r0, #0
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <__aeabi_d2uiz>:
 80005b4:	004a      	lsls	r2, r1, #1
 80005b6:	d211      	bcs.n	80005dc <__aeabi_d2uiz+0x28>
 80005b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80005bc:	d211      	bcs.n	80005e2 <__aeabi_d2uiz+0x2e>
 80005be:	d50d      	bpl.n	80005dc <__aeabi_d2uiz+0x28>
 80005c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80005c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80005c8:	d40e      	bmi.n	80005e8 <__aeabi_d2uiz+0x34>
 80005ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80005d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80005d6:	fa23 f002 	lsr.w	r0, r3, r2
 80005da:	4770      	bx	lr
 80005dc:	f04f 0000 	mov.w	r0, #0
 80005e0:	4770      	bx	lr
 80005e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80005e6:	d102      	bne.n	80005ee <__aeabi_d2uiz+0x3a>
 80005e8:	f04f 30ff 	mov.w	r0, #4294967295
 80005ec:	4770      	bx	lr
 80005ee:	f04f 0000 	mov.w	r0, #0
 80005f2:	4770      	bx	lr

080005f4 <__aeabi_uldivmod>:
 80005f4:	b953      	cbnz	r3, 800060c <__aeabi_uldivmod+0x18>
 80005f6:	b94a      	cbnz	r2, 800060c <__aeabi_uldivmod+0x18>
 80005f8:	2900      	cmp	r1, #0
 80005fa:	bf08      	it	eq
 80005fc:	2800      	cmpeq	r0, #0
 80005fe:	bf1c      	itt	ne
 8000600:	f04f 31ff 	movne.w	r1, #4294967295
 8000604:	f04f 30ff 	movne.w	r0, #4294967295
 8000608:	f000 b972 	b.w	80008f0 <__aeabi_idiv0>
 800060c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000610:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000614:	f000 f806 	bl	8000624 <__udivmoddi4>
 8000618:	f8dd e004 	ldr.w	lr, [sp, #4]
 800061c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000620:	b004      	add	sp, #16
 8000622:	4770      	bx	lr

08000624 <__udivmoddi4>:
 8000624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000628:	9e08      	ldr	r6, [sp, #32]
 800062a:	4604      	mov	r4, r0
 800062c:	4688      	mov	r8, r1
 800062e:	2b00      	cmp	r3, #0
 8000630:	d14b      	bne.n	80006ca <__udivmoddi4+0xa6>
 8000632:	428a      	cmp	r2, r1
 8000634:	4615      	mov	r5, r2
 8000636:	d967      	bls.n	8000708 <__udivmoddi4+0xe4>
 8000638:	fab2 f282 	clz	r2, r2
 800063c:	b14a      	cbz	r2, 8000652 <__udivmoddi4+0x2e>
 800063e:	f1c2 0720 	rsb	r7, r2, #32
 8000642:	fa01 f302 	lsl.w	r3, r1, r2
 8000646:	fa20 f707 	lsr.w	r7, r0, r7
 800064a:	4095      	lsls	r5, r2
 800064c:	ea47 0803 	orr.w	r8, r7, r3
 8000650:	4094      	lsls	r4, r2
 8000652:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000656:	0c23      	lsrs	r3, r4, #16
 8000658:	fbb8 f7fe 	udiv	r7, r8, lr
 800065c:	fa1f fc85 	uxth.w	ip, r5
 8000660:	fb0e 8817 	mls	r8, lr, r7, r8
 8000664:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000668:	fb07 f10c 	mul.w	r1, r7, ip
 800066c:	4299      	cmp	r1, r3
 800066e:	d909      	bls.n	8000684 <__udivmoddi4+0x60>
 8000670:	18eb      	adds	r3, r5, r3
 8000672:	f107 30ff 	add.w	r0, r7, #4294967295
 8000676:	f080 811b 	bcs.w	80008b0 <__udivmoddi4+0x28c>
 800067a:	4299      	cmp	r1, r3
 800067c:	f240 8118 	bls.w	80008b0 <__udivmoddi4+0x28c>
 8000680:	3f02      	subs	r7, #2
 8000682:	442b      	add	r3, r5
 8000684:	1a5b      	subs	r3, r3, r1
 8000686:	b2a4      	uxth	r4, r4
 8000688:	fbb3 f0fe 	udiv	r0, r3, lr
 800068c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000690:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000694:	fb00 fc0c 	mul.w	ip, r0, ip
 8000698:	45a4      	cmp	ip, r4
 800069a:	d909      	bls.n	80006b0 <__udivmoddi4+0x8c>
 800069c:	192c      	adds	r4, r5, r4
 800069e:	f100 33ff 	add.w	r3, r0, #4294967295
 80006a2:	f080 8107 	bcs.w	80008b4 <__udivmoddi4+0x290>
 80006a6:	45a4      	cmp	ip, r4
 80006a8:	f240 8104 	bls.w	80008b4 <__udivmoddi4+0x290>
 80006ac:	3802      	subs	r0, #2
 80006ae:	442c      	add	r4, r5
 80006b0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80006b4:	eba4 040c 	sub.w	r4, r4, ip
 80006b8:	2700      	movs	r7, #0
 80006ba:	b11e      	cbz	r6, 80006c4 <__udivmoddi4+0xa0>
 80006bc:	40d4      	lsrs	r4, r2
 80006be:	2300      	movs	r3, #0
 80006c0:	e9c6 4300 	strd	r4, r3, [r6]
 80006c4:	4639      	mov	r1, r7
 80006c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006ca:	428b      	cmp	r3, r1
 80006cc:	d909      	bls.n	80006e2 <__udivmoddi4+0xbe>
 80006ce:	2e00      	cmp	r6, #0
 80006d0:	f000 80eb 	beq.w	80008aa <__udivmoddi4+0x286>
 80006d4:	2700      	movs	r7, #0
 80006d6:	e9c6 0100 	strd	r0, r1, [r6]
 80006da:	4638      	mov	r0, r7
 80006dc:	4639      	mov	r1, r7
 80006de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006e2:	fab3 f783 	clz	r7, r3
 80006e6:	2f00      	cmp	r7, #0
 80006e8:	d147      	bne.n	800077a <__udivmoddi4+0x156>
 80006ea:	428b      	cmp	r3, r1
 80006ec:	d302      	bcc.n	80006f4 <__udivmoddi4+0xd0>
 80006ee:	4282      	cmp	r2, r0
 80006f0:	f200 80fa 	bhi.w	80008e8 <__udivmoddi4+0x2c4>
 80006f4:	1a84      	subs	r4, r0, r2
 80006f6:	eb61 0303 	sbc.w	r3, r1, r3
 80006fa:	2001      	movs	r0, #1
 80006fc:	4698      	mov	r8, r3
 80006fe:	2e00      	cmp	r6, #0
 8000700:	d0e0      	beq.n	80006c4 <__udivmoddi4+0xa0>
 8000702:	e9c6 4800 	strd	r4, r8, [r6]
 8000706:	e7dd      	b.n	80006c4 <__udivmoddi4+0xa0>
 8000708:	b902      	cbnz	r2, 800070c <__udivmoddi4+0xe8>
 800070a:	deff      	udf	#255	; 0xff
 800070c:	fab2 f282 	clz	r2, r2
 8000710:	2a00      	cmp	r2, #0
 8000712:	f040 808f 	bne.w	8000834 <__udivmoddi4+0x210>
 8000716:	1b49      	subs	r1, r1, r5
 8000718:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800071c:	fa1f f885 	uxth.w	r8, r5
 8000720:	2701      	movs	r7, #1
 8000722:	fbb1 fcfe 	udiv	ip, r1, lr
 8000726:	0c23      	lsrs	r3, r4, #16
 8000728:	fb0e 111c 	mls	r1, lr, ip, r1
 800072c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000730:	fb08 f10c 	mul.w	r1, r8, ip
 8000734:	4299      	cmp	r1, r3
 8000736:	d907      	bls.n	8000748 <__udivmoddi4+0x124>
 8000738:	18eb      	adds	r3, r5, r3
 800073a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800073e:	d202      	bcs.n	8000746 <__udivmoddi4+0x122>
 8000740:	4299      	cmp	r1, r3
 8000742:	f200 80cd 	bhi.w	80008e0 <__udivmoddi4+0x2bc>
 8000746:	4684      	mov	ip, r0
 8000748:	1a59      	subs	r1, r3, r1
 800074a:	b2a3      	uxth	r3, r4
 800074c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000750:	fb0e 1410 	mls	r4, lr, r0, r1
 8000754:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000758:	fb08 f800 	mul.w	r8, r8, r0
 800075c:	45a0      	cmp	r8, r4
 800075e:	d907      	bls.n	8000770 <__udivmoddi4+0x14c>
 8000760:	192c      	adds	r4, r5, r4
 8000762:	f100 33ff 	add.w	r3, r0, #4294967295
 8000766:	d202      	bcs.n	800076e <__udivmoddi4+0x14a>
 8000768:	45a0      	cmp	r8, r4
 800076a:	f200 80b6 	bhi.w	80008da <__udivmoddi4+0x2b6>
 800076e:	4618      	mov	r0, r3
 8000770:	eba4 0408 	sub.w	r4, r4, r8
 8000774:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000778:	e79f      	b.n	80006ba <__udivmoddi4+0x96>
 800077a:	f1c7 0c20 	rsb	ip, r7, #32
 800077e:	40bb      	lsls	r3, r7
 8000780:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000784:	ea4e 0e03 	orr.w	lr, lr, r3
 8000788:	fa01 f407 	lsl.w	r4, r1, r7
 800078c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000790:	fa21 f30c 	lsr.w	r3, r1, ip
 8000794:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000798:	4325      	orrs	r5, r4
 800079a:	fbb3 f9f8 	udiv	r9, r3, r8
 800079e:	0c2c      	lsrs	r4, r5, #16
 80007a0:	fb08 3319 	mls	r3, r8, r9, r3
 80007a4:	fa1f fa8e 	uxth.w	sl, lr
 80007a8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80007ac:	fb09 f40a 	mul.w	r4, r9, sl
 80007b0:	429c      	cmp	r4, r3
 80007b2:	fa02 f207 	lsl.w	r2, r2, r7
 80007b6:	fa00 f107 	lsl.w	r1, r0, r7
 80007ba:	d90b      	bls.n	80007d4 <__udivmoddi4+0x1b0>
 80007bc:	eb1e 0303 	adds.w	r3, lr, r3
 80007c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80007c4:	f080 8087 	bcs.w	80008d6 <__udivmoddi4+0x2b2>
 80007c8:	429c      	cmp	r4, r3
 80007ca:	f240 8084 	bls.w	80008d6 <__udivmoddi4+0x2b2>
 80007ce:	f1a9 0902 	sub.w	r9, r9, #2
 80007d2:	4473      	add	r3, lr
 80007d4:	1b1b      	subs	r3, r3, r4
 80007d6:	b2ad      	uxth	r5, r5
 80007d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80007dc:	fb08 3310 	mls	r3, r8, r0, r3
 80007e0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80007e4:	fb00 fa0a 	mul.w	sl, r0, sl
 80007e8:	45a2      	cmp	sl, r4
 80007ea:	d908      	bls.n	80007fe <__udivmoddi4+0x1da>
 80007ec:	eb1e 0404 	adds.w	r4, lr, r4
 80007f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80007f4:	d26b      	bcs.n	80008ce <__udivmoddi4+0x2aa>
 80007f6:	45a2      	cmp	sl, r4
 80007f8:	d969      	bls.n	80008ce <__udivmoddi4+0x2aa>
 80007fa:	3802      	subs	r0, #2
 80007fc:	4474      	add	r4, lr
 80007fe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000802:	fba0 8902 	umull	r8, r9, r0, r2
 8000806:	eba4 040a 	sub.w	r4, r4, sl
 800080a:	454c      	cmp	r4, r9
 800080c:	46c2      	mov	sl, r8
 800080e:	464b      	mov	r3, r9
 8000810:	d354      	bcc.n	80008bc <__udivmoddi4+0x298>
 8000812:	d051      	beq.n	80008b8 <__udivmoddi4+0x294>
 8000814:	2e00      	cmp	r6, #0
 8000816:	d069      	beq.n	80008ec <__udivmoddi4+0x2c8>
 8000818:	ebb1 050a 	subs.w	r5, r1, sl
 800081c:	eb64 0403 	sbc.w	r4, r4, r3
 8000820:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000824:	40fd      	lsrs	r5, r7
 8000826:	40fc      	lsrs	r4, r7
 8000828:	ea4c 0505 	orr.w	r5, ip, r5
 800082c:	e9c6 5400 	strd	r5, r4, [r6]
 8000830:	2700      	movs	r7, #0
 8000832:	e747      	b.n	80006c4 <__udivmoddi4+0xa0>
 8000834:	f1c2 0320 	rsb	r3, r2, #32
 8000838:	fa20 f703 	lsr.w	r7, r0, r3
 800083c:	4095      	lsls	r5, r2
 800083e:	fa01 f002 	lsl.w	r0, r1, r2
 8000842:	fa21 f303 	lsr.w	r3, r1, r3
 8000846:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800084a:	4338      	orrs	r0, r7
 800084c:	0c01      	lsrs	r1, r0, #16
 800084e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000852:	fa1f f885 	uxth.w	r8, r5
 8000856:	fb0e 3317 	mls	r3, lr, r7, r3
 800085a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800085e:	fb07 f308 	mul.w	r3, r7, r8
 8000862:	428b      	cmp	r3, r1
 8000864:	fa04 f402 	lsl.w	r4, r4, r2
 8000868:	d907      	bls.n	800087a <__udivmoddi4+0x256>
 800086a:	1869      	adds	r1, r5, r1
 800086c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000870:	d22f      	bcs.n	80008d2 <__udivmoddi4+0x2ae>
 8000872:	428b      	cmp	r3, r1
 8000874:	d92d      	bls.n	80008d2 <__udivmoddi4+0x2ae>
 8000876:	3f02      	subs	r7, #2
 8000878:	4429      	add	r1, r5
 800087a:	1acb      	subs	r3, r1, r3
 800087c:	b281      	uxth	r1, r0
 800087e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000882:	fb0e 3310 	mls	r3, lr, r0, r3
 8000886:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800088a:	fb00 f308 	mul.w	r3, r0, r8
 800088e:	428b      	cmp	r3, r1
 8000890:	d907      	bls.n	80008a2 <__udivmoddi4+0x27e>
 8000892:	1869      	adds	r1, r5, r1
 8000894:	f100 3cff 	add.w	ip, r0, #4294967295
 8000898:	d217      	bcs.n	80008ca <__udivmoddi4+0x2a6>
 800089a:	428b      	cmp	r3, r1
 800089c:	d915      	bls.n	80008ca <__udivmoddi4+0x2a6>
 800089e:	3802      	subs	r0, #2
 80008a0:	4429      	add	r1, r5
 80008a2:	1ac9      	subs	r1, r1, r3
 80008a4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80008a8:	e73b      	b.n	8000722 <__udivmoddi4+0xfe>
 80008aa:	4637      	mov	r7, r6
 80008ac:	4630      	mov	r0, r6
 80008ae:	e709      	b.n	80006c4 <__udivmoddi4+0xa0>
 80008b0:	4607      	mov	r7, r0
 80008b2:	e6e7      	b.n	8000684 <__udivmoddi4+0x60>
 80008b4:	4618      	mov	r0, r3
 80008b6:	e6fb      	b.n	80006b0 <__udivmoddi4+0x8c>
 80008b8:	4541      	cmp	r1, r8
 80008ba:	d2ab      	bcs.n	8000814 <__udivmoddi4+0x1f0>
 80008bc:	ebb8 0a02 	subs.w	sl, r8, r2
 80008c0:	eb69 020e 	sbc.w	r2, r9, lr
 80008c4:	3801      	subs	r0, #1
 80008c6:	4613      	mov	r3, r2
 80008c8:	e7a4      	b.n	8000814 <__udivmoddi4+0x1f0>
 80008ca:	4660      	mov	r0, ip
 80008cc:	e7e9      	b.n	80008a2 <__udivmoddi4+0x27e>
 80008ce:	4618      	mov	r0, r3
 80008d0:	e795      	b.n	80007fe <__udivmoddi4+0x1da>
 80008d2:	4667      	mov	r7, ip
 80008d4:	e7d1      	b.n	800087a <__udivmoddi4+0x256>
 80008d6:	4681      	mov	r9, r0
 80008d8:	e77c      	b.n	80007d4 <__udivmoddi4+0x1b0>
 80008da:	3802      	subs	r0, #2
 80008dc:	442c      	add	r4, r5
 80008de:	e747      	b.n	8000770 <__udivmoddi4+0x14c>
 80008e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80008e4:	442b      	add	r3, r5
 80008e6:	e72f      	b.n	8000748 <__udivmoddi4+0x124>
 80008e8:	4638      	mov	r0, r7
 80008ea:	e708      	b.n	80006fe <__udivmoddi4+0xda>
 80008ec:	4637      	mov	r7, r6
 80008ee:	e6e9      	b.n	80006c4 <__udivmoddi4+0xa0>

080008f0 <__aeabi_idiv0>:
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop

080008f4 <MVCD_delay_us>:

#define RST_PIN GPIO_PIN_14
#define RST_PORT GPIOF

void MVCD_delay_us (uint16_t us)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2,0);  // set the counter value a 0
 80008fe:	4b08      	ldr	r3, [pc, #32]	; (8000920 <MVCD_delay_us+0x2c>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	2200      	movs	r2, #0
 8000904:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us);  // wait for the counter to reach the us input in the parameter
 8000906:	bf00      	nop
 8000908:	4b05      	ldr	r3, [pc, #20]	; (8000920 <MVCD_delay_us+0x2c>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800090e:	88fb      	ldrh	r3, [r7, #6]
 8000910:	429a      	cmp	r2, r3
 8000912:	d3f9      	bcc.n	8000908 <MVCD_delay_us+0x14>
}
 8000914:	bf00      	nop
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr
 8000920:	20000a38 	.word	0x20000a38

08000924 <MVCD_SendByte_SPI>:

void MVCD_SendByte_SPI(uint8_t byte)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	71fb      	strb	r3, [r7, #7]
	for(int i=0;i<8;i++)
 800092e:	2300      	movs	r3, #0
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	e023      	b.n	800097c <MVCD_SendByte_SPI+0x58>
	{
		if((byte<<i)&0x80)
 8000934:	79fa      	ldrb	r2, [r7, #7]
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	fa02 f303 	lsl.w	r3, r2, r3
 800093c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000940:	2b00      	cmp	r3, #0
 8000942:	d006      	beq.n	8000952 <MVCD_SendByte_SPI+0x2e>
			{
				HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_SET);  // SID=1  OR MOSI
 8000944:	2201      	movs	r2, #1
 8000946:	f44f 7100 	mov.w	r1, #512	; 0x200
 800094a:	4810      	ldr	r0, [pc, #64]	; (800098c <MVCD_SendByte_SPI+0x68>)
 800094c:	f002 f884 	bl	8002a58 <HAL_GPIO_WritePin>
 8000950:	e005      	b.n	800095e <MVCD_SendByte_SPI+0x3a>
			}

		else HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_RESET);  // SID=0
 8000952:	2200      	movs	r2, #0
 8000954:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000958:	480c      	ldr	r0, [pc, #48]	; (800098c <MVCD_SendByte_SPI+0x68>)
 800095a:	f002 f87d 	bl	8002a58 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_RESET);  // SCLK =0  OR SCK
 800095e:	2200      	movs	r2, #0
 8000960:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000964:	480a      	ldr	r0, [pc, #40]	; (8000990 <MVCD_SendByte_SPI+0x6c>)
 8000966:	f002 f877 	bl	8002a58 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_SET);  // SCLK=1
 800096a:	2201      	movs	r2, #1
 800096c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000970:	4807      	ldr	r0, [pc, #28]	; (8000990 <MVCD_SendByte_SPI+0x6c>)
 8000972:	f002 f871 	bl	8002a58 <HAL_GPIO_WritePin>
	for(int i=0;i<8;i++)
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	3301      	adds	r3, #1
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	2b07      	cmp	r3, #7
 8000980:	ddd8      	ble.n	8000934 <MVCD_SendByte_SPI+0x10>
	}
}
 8000982:	bf00      	nop
 8000984:	3710      	adds	r7, #16
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40021000 	.word	0x40021000
 8000990:	40021400 	.word	0x40021400

08000994 <MVCD_ST7920_Send>:

void MVCD_ST7920_Send(uint8_t data, int modflag) //modflag - (data 1), (cmd 0)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	6039      	str	r1, [r7, #0]
 800099e:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  // PUll the CS high
 80009a0:	2201      	movs	r2, #1
 80009a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009a6:	4813      	ldr	r0, [pc, #76]	; (80009f4 <MVCD_ST7920_Send+0x60>)
 80009a8:	f002 f856 	bl	8002a58 <HAL_GPIO_WritePin>

	MVCD_SendByte_SPI(0xf8+(modflag<<1));  // send the SYNC + RS(1)
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	3b08      	subs	r3, #8
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff ffb3 	bl	8000924 <MVCD_SendByte_SPI>
	MVCD_SendByte_SPI(data&0xf0);  // send the higher nibble first
 80009be:	79fb      	ldrb	r3, [r7, #7]
 80009c0:	f023 030f 	bic.w	r3, r3, #15
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	4618      	mov	r0, r3
 80009c8:	f7ff ffac 	bl	8000924 <MVCD_SendByte_SPI>
	MVCD_SendByte_SPI((data<<4)&0xf0);  // send the lower nibble
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	011b      	lsls	r3, r3, #4
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	4618      	mov	r0, r3
 80009d4:	f7ff ffa6 	bl	8000924 <MVCD_SendByte_SPI>
	MVCD_delay_us(10);
 80009d8:	200a      	movs	r0, #10
 80009da:	f7ff ff8b 	bl	80008f4 <MVCD_delay_us>
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);  // PUll the CS LOW
 80009de:	2200      	movs	r2, #0
 80009e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009e4:	4803      	ldr	r0, [pc, #12]	; (80009f4 <MVCD_ST7920_Send+0x60>)
 80009e6:	f002 f837 	bl	8002a58 <HAL_GPIO_WritePin>
}
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40021000 	.word	0x40021000

080009f8 <MVCD_ST7920_baseinit>:

void MVCD_ST7920_baseinit(){
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);  // RESET=0
 80009fc:	2200      	movs	r2, #0
 80009fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a02:	4822      	ldr	r0, [pc, #136]	; (8000a8c <MVCD_ST7920_baseinit+0x94>)
 8000a04:	f002 f828 	bl	8002a58 <HAL_GPIO_WritePin>
	HAL_Delay(10);   // wait for 10ms
 8000a08:	200a      	movs	r0, #10
 8000a0a:	f001 f8c1 	bl	8001b90 <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);  // RESET=1
 8000a0e:	2201      	movs	r2, #1
 8000a10:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a14:	481d      	ldr	r0, [pc, #116]	; (8000a8c <MVCD_ST7920_baseinit+0x94>)
 8000a16:	f002 f81f 	bl	8002a58 <HAL_GPIO_WritePin>

	HAL_Delay(50);   //wait for >40 ms
 8000a1a:	2032      	movs	r0, #50	; 0x32
 8000a1c:	f001 f8b8 	bl	8001b90 <HAL_Delay>


	MVCD_ST7920_Send(0x30,CMD);  // 8bit mode
 8000a20:	2100      	movs	r1, #0
 8000a22:	2030      	movs	r0, #48	; 0x30
 8000a24:	f7ff ffb6 	bl	8000994 <MVCD_ST7920_Send>
	MVCD_delay_us(110);  //  >100us delay
 8000a28:	206e      	movs	r0, #110	; 0x6e
 8000a2a:	f7ff ff63 	bl	80008f4 <MVCD_delay_us>

	MVCD_ST7920_Send(0x30,CMD);  // 8bit mode
 8000a2e:	2100      	movs	r1, #0
 8000a30:	2030      	movs	r0, #48	; 0x30
 8000a32:	f7ff ffaf 	bl	8000994 <MVCD_ST7920_Send>
	MVCD_delay_us(40);  // >37us delay
 8000a36:	2028      	movs	r0, #40	; 0x28
 8000a38:	f7ff ff5c 	bl	80008f4 <MVCD_delay_us>

	MVCD_ST7920_Send(0x08,CMD);  // D=0, C=0, B=0
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	2008      	movs	r0, #8
 8000a40:	f7ff ffa8 	bl	8000994 <MVCD_ST7920_Send>
	MVCD_delay_us(110);  // >100us delay
 8000a44:	206e      	movs	r0, #110	; 0x6e
 8000a46:	f7ff ff55 	bl	80008f4 <MVCD_delay_us>

	MVCD_ST7920_Send(0x01,CMD);  // clear screen
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	f7ff ffa1 	bl	8000994 <MVCD_ST7920_Send>
	HAL_Delay(12);  // >10 ms delay
 8000a52:	200c      	movs	r0, #12
 8000a54:	f001 f89c 	bl	8001b90 <HAL_Delay>


	MVCD_ST7920_Send(0x06,CMD);  // cursor increment right no shift
 8000a58:	2100      	movs	r1, #0
 8000a5a:	2006      	movs	r0, #6
 8000a5c:	f7ff ff9a 	bl	8000994 <MVCD_ST7920_Send>
	HAL_Delay(1);  // 1ms delay
 8000a60:	2001      	movs	r0, #1
 8000a62:	f001 f895 	bl	8001b90 <HAL_Delay>

	MVCD_ST7920_Send(0x0C,CMD);  // D=1, C=0, B=0
 8000a66:	2100      	movs	r1, #0
 8000a68:	200c      	movs	r0, #12
 8000a6a:	f7ff ff93 	bl	8000994 <MVCD_ST7920_Send>
    HAL_Delay(1);  // 1ms delay
 8000a6e:	2001      	movs	r0, #1
 8000a70:	f001 f88e 	bl	8001b90 <HAL_Delay>

    MVCD_ST7920_Send(0x02,CMD);  // return to home
 8000a74:	2100      	movs	r1, #0
 8000a76:	2002      	movs	r0, #2
 8000a78:	f7ff ff8c 	bl	8000994 <MVCD_ST7920_Send>
	HAL_Delay(1);  // 1ms delay
 8000a7c:	2001      	movs	r0, #1
 8000a7e:	f001 f887 	bl	8001b90 <HAL_Delay>
	HAL_Delay(2);
 8000a82:	2002      	movs	r0, #2
 8000a84:	f001 f884 	bl	8001b90 <HAL_Delay>
}
 8000a88:	bf00      	nop
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40021400 	.word	0x40021400

08000a90 <MVCD_ST7920_GraphicMode>:

void MVCD_ST7920_GraphicMode (_Bool enable)   // 1-enable, 0-disable
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	71fb      	strb	r3, [r7, #7]
	if (enable == ON)
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d015      	beq.n	8000acc <MVCD_ST7920_GraphicMode+0x3c>
	{
		MVCD_ST7920_Send(0x30,CMD);  // 8 bit mode
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	2030      	movs	r0, #48	; 0x30
 8000aa4:	f7ff ff76 	bl	8000994 <MVCD_ST7920_Send>
		HAL_Delay (1);
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	f001 f871 	bl	8001b90 <HAL_Delay>
		MVCD_ST7920_Send(0x34,CMD);  // switch to Extended instructions
 8000aae:	2100      	movs	r1, #0
 8000ab0:	2034      	movs	r0, #52	; 0x34
 8000ab2:	f7ff ff6f 	bl	8000994 <MVCD_ST7920_Send>
		HAL_Delay (1);
 8000ab6:	2001      	movs	r0, #1
 8000ab8:	f001 f86a 	bl	8001b90 <HAL_Delay>
		MVCD_ST7920_Send(0x36,CMD);  // enable graphics
 8000abc:	2100      	movs	r1, #0
 8000abe:	2036      	movs	r0, #54	; 0x36
 8000ac0:	f7ff ff68 	bl	8000994 <MVCD_ST7920_Send>
		HAL_Delay (1);
 8000ac4:	2001      	movs	r0, #1
 8000ac6:	f001 f863 	bl	8001b90 <HAL_Delay>
	else if (enable == OFF)
	{
		MVCD_ST7920_Send(0x30,CMD);  // 8 bit mode
		HAL_Delay (1);
	}
}
 8000aca:	e00c      	b.n	8000ae6 <MVCD_ST7920_GraphicMode+0x56>
	else if (enable == OFF)
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	f083 0301 	eor.w	r3, r3, #1
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d006      	beq.n	8000ae6 <MVCD_ST7920_GraphicMode+0x56>
		MVCD_ST7920_Send(0x30,CMD);  // 8 bit mode
 8000ad8:	2100      	movs	r1, #0
 8000ada:	2030      	movs	r0, #48	; 0x30
 8000adc:	f7ff ff5a 	bl	8000994 <MVCD_ST7920_Send>
		HAL_Delay (1);
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	f001 f855 	bl	8001b90 <HAL_Delay>
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
	...

08000af0 <MVCD_dot_xy>:


void MVCD_dot_xy(int x,int y){
 8000af0:	b5b0      	push	{r4, r5, r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	6039      	str	r1, [r7, #0]
    int flx = (int)floor(x/16);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	da00      	bge.n	8000b02 <MVCD_dot_xy+0x12>
 8000b00:	330f      	adds	r3, #15
 8000b02:	111b      	asrs	r3, r3, #4
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff fcc3 	bl	8000490 <__aeabi_i2d>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	460c      	mov	r4, r1
 8000b0e:	4618      	mov	r0, r3
 8000b10:	4621      	mov	r1, r4
 8000b12:	f7ff fd27 	bl	8000564 <__aeabi_d2iz>
 8000b16:	4603      	mov	r3, r0
 8000b18:	60fb      	str	r3, [r7, #12]
    prv_val[flx][y] |= (0x8000 >> x%16);
 8000b1a:	493a      	ldr	r1, [pc, #232]	; (8000c04 <MVCD_dot_xy+0x114>)
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	019a      	lsls	r2, r3, #6
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	4413      	add	r3, r2
 8000b24:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	4259      	negs	r1, r3
 8000b2c:	f003 030f 	and.w	r3, r3, #15
 8000b30:	f001 010f 	and.w	r1, r1, #15
 8000b34:	bf58      	it	pl
 8000b36:	424b      	negpl	r3, r1
 8000b38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b3c:	fa41 f303 	asr.w	r3, r1, r3
 8000b40:	431a      	orrs	r2, r3
 8000b42:	4830      	ldr	r0, [pc, #192]	; (8000c04 <MVCD_dot_xy+0x114>)
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	0199      	lsls	r1, r3, #6
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	440b      	add	r3, r1
 8000b4c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    MVCD_ST7920_Send(0x36, CMD);
 8000b50:	2100      	movs	r1, #0
 8000b52:	2036      	movs	r0, #54	; 0x36
 8000b54:	f7ff ff1e 	bl	8000994 <MVCD_ST7920_Send>
    MVCD_ST7920_Send(0x80+(y % 32), CMD);
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	425a      	negs	r2, r3
 8000b5c:	f003 031f 	and.w	r3, r3, #31
 8000b60:	f002 021f 	and.w	r2, r2, #31
 8000b64:	bf58      	it	pl
 8000b66:	4253      	negpl	r3, r2
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	3b80      	subs	r3, #128	; 0x80
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	2100      	movs	r1, #0
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff ff0f 	bl	8000994 <MVCD_ST7920_Send>
    MVCD_ST7920_Send(0x80+ (y / 32) * 8 + floor(x/16), CMD);
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	da00      	bge.n	8000b7e <MVCD_dot_xy+0x8e>
 8000b7c:	331f      	adds	r3, #31
 8000b7e:	115b      	asrs	r3, r3, #5
 8000b80:	3310      	adds	r3, #16
 8000b82:	00db      	lsls	r3, r3, #3
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff fc83 	bl	8000490 <__aeabi_i2d>
 8000b8a:	4604      	mov	r4, r0
 8000b8c:	460d      	mov	r5, r1
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	da00      	bge.n	8000b96 <MVCD_dot_xy+0xa6>
 8000b94:	330f      	adds	r3, #15
 8000b96:	111b      	asrs	r3, r3, #4
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff fc79 	bl	8000490 <__aeabi_i2d>
 8000b9e:	4602      	mov	r2, r0
 8000ba0:	460b      	mov	r3, r1
 8000ba2:	4620      	mov	r0, r4
 8000ba4:	4629      	mov	r1, r5
 8000ba6:	f7ff fb27 	bl	80001f8 <__adddf3>
 8000baa:	4603      	mov	r3, r0
 8000bac:	460c      	mov	r4, r1
 8000bae:	4618      	mov	r0, r3
 8000bb0:	4621      	mov	r1, r4
 8000bb2:	f7ff fcff 	bl	80005b4 <__aeabi_d2uiz>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff fee9 	bl	8000994 <MVCD_ST7920_Send>

    MVCD_ST7920_Send(0x30, CMD);
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	2030      	movs	r0, #48	; 0x30
 8000bc6:	f7ff fee5 	bl	8000994 <MVCD_ST7920_Send>
    MVCD_ST7920_Send(((prv_val[flx][y] &0xff00)>>8), DATA);
 8000bca:	490e      	ldr	r1, [pc, #56]	; (8000c04 <MVCD_dot_xy+0x114>)
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	019a      	lsls	r2, r3, #6
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bd8:	121b      	asrs	r3, r3, #8
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	2101      	movs	r1, #1
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff fed8 	bl	8000994 <MVCD_ST7920_Send>
    MVCD_ST7920_Send(prv_val[flx][y]&0xff, DATA);
 8000be4:	4907      	ldr	r1, [pc, #28]	; (8000c04 <MVCD_dot_xy+0x114>)
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	019a      	lsls	r2, r3, #6
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	4413      	add	r3, r2
 8000bee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff fecc 	bl	8000994 <MVCD_ST7920_Send>
}
 8000bfc:	bf00      	nop
 8000bfe:	3710      	adds	r7, #16
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bdb0      	pop	{r4, r5, r7, pc}
 8000c04:	200000b0 	.word	0x200000b0

08000c08 <MVCD_LCDclear>:
    MVCD_ST7920_Send(0x30, CMD);
    MVCD_ST7920_Send(((prv_val[flx][y] &0xff00)>>8), DATA);
    MVCD_ST7920_Send(prv_val[flx][y]&0xff, DATA);
}

void MVCD_LCDclear(){
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
    for(int j=0;j<8;j++){
 8000c0e:	2300      	movs	r3, #0
 8000c10:	607b      	str	r3, [r7, #4]
 8000c12:	e044      	b.n	8000c9e <MVCD_LCDclear+0x96>
        for(int i=0;i<64;i++){
 8000c14:	2300      	movs	r3, #0
 8000c16:	603b      	str	r3, [r7, #0]
 8000c18:	e03b      	b.n	8000c92 <MVCD_LCDclear+0x8a>
        	MVCD_ST7920_Send(0x36, CMD);
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	2036      	movs	r0, #54	; 0x36
 8000c1e:	f7ff feb9 	bl	8000994 <MVCD_ST7920_Send>
        	MVCD_ST7920_Send(0x80+(i%32), CMD);
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	425a      	negs	r2, r3
 8000c26:	f003 031f 	and.w	r3, r3, #31
 8000c2a:	f002 021f 	and.w	r2, r2, #31
 8000c2e:	bf58      	it	pl
 8000c30:	4253      	negpl	r3, r2
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	3b80      	subs	r3, #128	; 0x80
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff feaa 	bl	8000994 <MVCD_ST7920_Send>
        	MVCD_ST7920_Send(0x80+((i/32)*8+j), CMD);
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	da00      	bge.n	8000c48 <MVCD_LCDclear+0x40>
 8000c46:	331f      	adds	r3, #31
 8000c48:	115b      	asrs	r3, r3, #5
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	00db      	lsls	r3, r3, #3
 8000c4e:	b2da      	uxtb	r2, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	4413      	add	r3, r2
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	3b80      	subs	r3, #128	; 0x80
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff fe98 	bl	8000994 <MVCD_ST7920_Send>
        	MVCD_ST7920_Send(0x30, CMD);
 8000c64:	2100      	movs	r1, #0
 8000c66:	2030      	movs	r0, #48	; 0x30
 8000c68:	f7ff fe94 	bl	8000994 <MVCD_ST7920_Send>
        	MVCD_ST7920_Send(0x00, DATA);
 8000c6c:	2101      	movs	r1, #1
 8000c6e:	2000      	movs	r0, #0
 8000c70:	f7ff fe90 	bl	8000994 <MVCD_ST7920_Send>
        	MVCD_ST7920_Send(0x00, DATA);
 8000c74:	2101      	movs	r1, #1
 8000c76:	2000      	movs	r0, #0
 8000c78:	f7ff fe8c 	bl	8000994 <MVCD_ST7920_Send>
        	prv_val[j][i] = 0;
 8000c7c:	490b      	ldr	r1, [pc, #44]	; (8000cac <MVCD_LCDclear+0xa4>)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	019a      	lsls	r2, r3, #6
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	4413      	add	r3, r2
 8000c86:	2200      	movs	r2, #0
 8000c88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for(int i=0;i<64;i++){
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	603b      	str	r3, [r7, #0]
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	2b3f      	cmp	r3, #63	; 0x3f
 8000c96:	ddc0      	ble.n	8000c1a <MVCD_LCDclear+0x12>
    for(int j=0;j<8;j++){
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	607b      	str	r3, [r7, #4]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2b07      	cmp	r3, #7
 8000ca2:	ddb7      	ble.n	8000c14 <MVCD_LCDclear+0xc>
        }
    }

}
 8000ca4:	bf00      	nop
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	200000b0 	.word	0x200000b0

08000cb0 <LogicAnalyzer>:
unsigned long fcount=0;
int logicarr[64];
int x=0;


int LogicAnalyzer(GPIO_TypeDef* GPIOx, uint16_t pinnum,int curdelay, int delay, int S, int StartTrigger){
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b088      	sub	sp, #32
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	607a      	str	r2, [r7, #4]
 8000cba:	603b      	str	r3, [r7, #0]
 8000cbc:	460b      	mov	r3, r1
 8000cbe:	817b      	strh	r3, [r7, #10]

	if(StartTrigger == 0){
 8000cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d152      	bne.n	8000d6c <LogicAnalyzer+0xbc>
		if(curdelay*10 == delay*S){
 8000cc6:	687a      	ldr	r2, [r7, #4]
 8000cc8:	4613      	mov	r3, r2
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	4413      	add	r3, r2
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000cd6:	fb02 f303 	mul.w	r3, r2, r3
 8000cda:	4299      	cmp	r1, r3
 8000cdc:	f040 80e1 	bne.w	8000ea2 <LogicAnalyzer+0x1f2>
			AX++;
 8000ce0:	4b72      	ldr	r3, [pc, #456]	; (8000eac <LogicAnalyzer+0x1fc>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	4a71      	ldr	r2, [pc, #452]	; (8000eac <LogicAnalyzer+0x1fc>)
 8000ce8:	6013      	str	r3, [r2, #0]
			if(AX > 64){
 8000cea:	4b70      	ldr	r3, [pc, #448]	; (8000eac <LogicAnalyzer+0x1fc>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	2b40      	cmp	r3, #64	; 0x40
 8000cf0:	dd01      	ble.n	8000cf6 <LogicAnalyzer+0x46>
				return 2;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	e0d5      	b.n	8000ea2 <LogicAnalyzer+0x1f2>
			}
			_Bool readpin = HAL_GPIO_ReadPin(GPIOx, pinnum);
 8000cf6:	897b      	ldrh	r3, [r7, #10]
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	68f8      	ldr	r0, [r7, #12]
 8000cfc:	f001 fe94 	bl	8002a28 <HAL_GPIO_ReadPin>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	bf14      	ite	ne
 8000d06:	2301      	movne	r3, #1
 8000d08:	2300      	moveq	r3, #0
 8000d0a:	75fb      	strb	r3, [r7, #23]

			if(readpin){
 8000d0c:	7dfb      	ldrb	r3, [r7, #23]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d015      	beq.n	8000d3e <LogicAnalyzer+0x8e>
				if(Toggles == readpin){
 8000d12:	4b67      	ldr	r3, [pc, #412]	; (8000eb0 <LogicAnalyzer+0x200>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	7dfa      	ldrb	r2, [r7, #23]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d106      	bne.n	8000d2a <LogicAnalyzer+0x7a>
					logicarr[AX]=1;
 8000d1c:	4b63      	ldr	r3, [pc, #396]	; (8000eac <LogicAnalyzer+0x1fc>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a64      	ldr	r2, [pc, #400]	; (8000eb4 <LogicAnalyzer+0x204>)
 8000d22:	2101      	movs	r1, #1
 8000d24:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000d28:	e005      	b.n	8000d36 <LogicAnalyzer+0x86>
					//printf("h\n");
				}
				else{
					logicarr[AX]=3;
 8000d2a:	4b60      	ldr	r3, [pc, #384]	; (8000eac <LogicAnalyzer+0x1fc>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a61      	ldr	r2, [pc, #388]	; (8000eb4 <LogicAnalyzer+0x204>)
 8000d30:	2103      	movs	r1, #3
 8000d32:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					//printf("h\n");
				}

				Toggles = 1;
 8000d36:	4b5e      	ldr	r3, [pc, #376]	; (8000eb0 <LogicAnalyzer+0x200>)
 8000d38:	2201      	movs	r2, #1
 8000d3a:	701a      	strb	r2, [r3, #0]
 8000d3c:	e014      	b.n	8000d68 <LogicAnalyzer+0xb8>
			}
			else{
				if(Toggles == readpin){
 8000d3e:	4b5c      	ldr	r3, [pc, #368]	; (8000eb0 <LogicAnalyzer+0x200>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	7dfa      	ldrb	r2, [r7, #23]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d106      	bne.n	8000d56 <LogicAnalyzer+0xa6>

					logicarr[AX]=0;
 8000d48:	4b58      	ldr	r3, [pc, #352]	; (8000eac <LogicAnalyzer+0x1fc>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a59      	ldr	r2, [pc, #356]	; (8000eb4 <LogicAnalyzer+0x204>)
 8000d4e:	2100      	movs	r1, #0
 8000d50:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000d54:	e005      	b.n	8000d62 <LogicAnalyzer+0xb2>
					//printf("l\n");
				}
				else{

					logicarr[AX]=2;
 8000d56:	4b55      	ldr	r3, [pc, #340]	; (8000eac <LogicAnalyzer+0x1fc>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a56      	ldr	r2, [pc, #344]	; (8000eb4 <LogicAnalyzer+0x204>)
 8000d5c:	2102      	movs	r1, #2
 8000d5e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					//printf("l\n");
				}

				Toggles = 0;
 8000d62:	4b53      	ldr	r3, [pc, #332]	; (8000eb0 <LogicAnalyzer+0x200>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	701a      	strb	r2, [r3, #0]
			}
			return 1;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	e09a      	b.n	8000ea2 <LogicAnalyzer+0x1f2>

		}
	}
	else if(StartTrigger == 2){
 8000d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d6e:	2b02      	cmp	r3, #2
 8000d70:	f040 8097 	bne.w	8000ea2 <LogicAnalyzer+0x1f2>
		//printf("%d\n",curdelay);

		if(curdelay == 1000){
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d7a:	f040 8090 	bne.w	8000e9e <LogicAnalyzer+0x1ee>
			if(logicarr[x] == 0){
 8000d7e:	4b4e      	ldr	r3, [pc, #312]	; (8000eb8 <LogicAnalyzer+0x208>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a4c      	ldr	r2, [pc, #304]	; (8000eb4 <LogicAnalyzer+0x204>)
 8000d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d10f      	bne.n	8000dac <LogicAnalyzer+0xfc>
				MVCD_dot_xy(x*2, 40);
 8000d8c:	4b4a      	ldr	r3, [pc, #296]	; (8000eb8 <LogicAnalyzer+0x208>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	2128      	movs	r1, #40	; 0x28
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff feab 	bl	8000af0 <MVCD_dot_xy>
				MVCD_dot_xy(x*2+1, 40);
 8000d9a:	4b47      	ldr	r3, [pc, #284]	; (8000eb8 <LogicAnalyzer+0x208>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	3301      	adds	r3, #1
 8000da2:	2128      	movs	r1, #40	; 0x28
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff fea3 	bl	8000af0 <MVCD_dot_xy>
 8000daa:	e068      	b.n	8000e7e <LogicAnalyzer+0x1ce>
			}
			else if(logicarr[x] == 1){
 8000dac:	4b42      	ldr	r3, [pc, #264]	; (8000eb8 <LogicAnalyzer+0x208>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a40      	ldr	r2, [pc, #256]	; (8000eb4 <LogicAnalyzer+0x204>)
 8000db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d10f      	bne.n	8000dda <LogicAnalyzer+0x12a>
				MVCD_dot_xy(x*2, 20);
 8000dba:	4b3f      	ldr	r3, [pc, #252]	; (8000eb8 <LogicAnalyzer+0x208>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	2114      	movs	r1, #20
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff fe94 	bl	8000af0 <MVCD_dot_xy>
				MVCD_dot_xy(x*2+1, 20);
 8000dc8:	4b3b      	ldr	r3, [pc, #236]	; (8000eb8 <LogicAnalyzer+0x208>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	3301      	adds	r3, #1
 8000dd0:	2114      	movs	r1, #20
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff fe8c 	bl	8000af0 <MVCD_dot_xy>
 8000dd8:	e051      	b.n	8000e7e <LogicAnalyzer+0x1ce>
			}
			else if(logicarr[x] == 2){
 8000dda:	4b37      	ldr	r3, [pc, #220]	; (8000eb8 <LogicAnalyzer+0x208>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a35      	ldr	r2, [pc, #212]	; (8000eb4 <LogicAnalyzer+0x204>)
 8000de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de4:	2b02      	cmp	r3, #2
 8000de6:	d122      	bne.n	8000e2e <LogicAnalyzer+0x17e>
				MVCD_dot_xy(x*2, 40);
 8000de8:	4b33      	ldr	r3, [pc, #204]	; (8000eb8 <LogicAnalyzer+0x208>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	2128      	movs	r1, #40	; 0x28
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff fe7d 	bl	8000af0 <MVCD_dot_xy>
				for(int i=1;i<=20;i++){
 8000df6:	2301      	movs	r3, #1
 8000df8:	61fb      	str	r3, [r7, #28]
 8000dfa:	e00c      	b.n	8000e16 <LogicAnalyzer+0x166>
					MVCD_dot_xy(x*2, 40-i);
 8000dfc:	4b2e      	ldr	r3, [pc, #184]	; (8000eb8 <LogicAnalyzer+0x208>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	005a      	lsls	r2, r3, #1
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4610      	mov	r0, r2
 8000e0c:	f7ff fe70 	bl	8000af0 <MVCD_dot_xy>
				for(int i=1;i<=20;i++){
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	3301      	adds	r3, #1
 8000e14:	61fb      	str	r3, [r7, #28]
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	2b14      	cmp	r3, #20
 8000e1a:	ddef      	ble.n	8000dfc <LogicAnalyzer+0x14c>
				}
				MVCD_dot_xy(x*2+1, 40);
 8000e1c:	4b26      	ldr	r3, [pc, #152]	; (8000eb8 <LogicAnalyzer+0x208>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	3301      	adds	r3, #1
 8000e24:	2128      	movs	r1, #40	; 0x28
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff fe62 	bl	8000af0 <MVCD_dot_xy>
 8000e2c:	e027      	b.n	8000e7e <LogicAnalyzer+0x1ce>
			}
			else if(logicarr[x] == 3){
 8000e2e:	4b22      	ldr	r3, [pc, #136]	; (8000eb8 <LogicAnalyzer+0x208>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a20      	ldr	r2, [pc, #128]	; (8000eb4 <LogicAnalyzer+0x204>)
 8000e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e38:	2b03      	cmp	r3, #3
 8000e3a:	d120      	bne.n	8000e7e <LogicAnalyzer+0x1ce>
				MVCD_dot_xy(x*2, 20);
 8000e3c:	4b1e      	ldr	r3, [pc, #120]	; (8000eb8 <LogicAnalyzer+0x208>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	2114      	movs	r1, #20
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff fe53 	bl	8000af0 <MVCD_dot_xy>
				for(int i=1;i<=20;i++){
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	61bb      	str	r3, [r7, #24]
 8000e4e:	e00b      	b.n	8000e68 <LogicAnalyzer+0x1b8>
					MVCD_dot_xy(x*2, 20+i);
 8000e50:	4b19      	ldr	r3, [pc, #100]	; (8000eb8 <LogicAnalyzer+0x208>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	005a      	lsls	r2, r3, #1
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	3314      	adds	r3, #20
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4610      	mov	r0, r2
 8000e5e:	f7ff fe47 	bl	8000af0 <MVCD_dot_xy>
				for(int i=1;i<=20;i++){
 8000e62:	69bb      	ldr	r3, [r7, #24]
 8000e64:	3301      	adds	r3, #1
 8000e66:	61bb      	str	r3, [r7, #24]
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	2b14      	cmp	r3, #20
 8000e6c:	ddf0      	ble.n	8000e50 <LogicAnalyzer+0x1a0>
				}
				MVCD_dot_xy(x*2+1, 20);
 8000e6e:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <LogicAnalyzer+0x208>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	3301      	adds	r3, #1
 8000e76:	2114      	movs	r1, #20
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff fe39 	bl	8000af0 <MVCD_dot_xy>
			}
			x++;
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <LogicAnalyzer+0x208>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	3301      	adds	r3, #1
 8000e84:	4a0c      	ldr	r2, [pc, #48]	; (8000eb8 <LogicAnalyzer+0x208>)
 8000e86:	6013      	str	r3, [r2, #0]
			if(x>63){
 8000e88:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <LogicAnalyzer+0x208>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2b3f      	cmp	r3, #63	; 0x3f
 8000e8e:	dd04      	ble.n	8000e9a <LogicAnalyzer+0x1ea>
				x=0;
 8000e90:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <LogicAnalyzer+0x208>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
				return 4;
 8000e96:	2304      	movs	r3, #4
 8000e98:	e003      	b.n	8000ea2 <LogicAnalyzer+0x1f2>
			}
			return 3;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	e001      	b.n	8000ea2 <LogicAnalyzer+0x1f2>
		}
		return 5;
 8000e9e:	2305      	movs	r3, #5
 8000ea0:	e7ff      	b.n	8000ea2 <LogicAnalyzer+0x1f2>

	}

}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3720      	adds	r7, #32
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000090 	.word	0x20000090
 8000eb0:	2000008c 	.word	0x2000008c
 8000eb4:	200008b0 	.word	0x200008b0
 8000eb8:	20000094 	.word	0x20000094

08000ebc <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0

  heth.Instance = ETH;
 8000ec0:	4b1c      	ldr	r3, [pc, #112]	; (8000f34 <MX_ETH_Init+0x78>)
 8000ec2:	4a1d      	ldr	r2, [pc, #116]	; (8000f38 <MX_ETH_Init+0x7c>)
 8000ec4:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8000ec6:	4b1b      	ldr	r3, [pc, #108]	; (8000f34 <MX_ETH_Init+0x78>)
 8000ec8:	2201      	movs	r2, #1
 8000eca:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8000ecc:	4b19      	ldr	r3, [pc, #100]	; (8000f34 <MX_ETH_Init+0x78>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 8000ed2:	4b18      	ldr	r3, [pc, #96]	; (8000f34 <MX_ETH_Init+0x78>)
 8000ed4:	695b      	ldr	r3, [r3, #20]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8000eda:	4b16      	ldr	r3, [pc, #88]	; (8000f34 <MX_ETH_Init+0x78>)
 8000edc:	695b      	ldr	r3, [r3, #20]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	2280      	movs	r2, #128	; 0x80
 8000ee2:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8000ee4:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <MX_ETH_Init+0x78>)
 8000ee6:	695b      	ldr	r3, [r3, #20]
 8000ee8:	3302      	adds	r3, #2
 8000eea:	22e1      	movs	r2, #225	; 0xe1
 8000eec:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000eee:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <MX_ETH_Init+0x78>)
 8000ef0:	695b      	ldr	r3, [r3, #20]
 8000ef2:	3303      	adds	r3, #3
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000ef8:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <MX_ETH_Init+0x78>)
 8000efa:	695b      	ldr	r3, [r3, #20]
 8000efc:	3304      	adds	r3, #4
 8000efe:	2200      	movs	r2, #0
 8000f00:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000f02:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <MX_ETH_Init+0x78>)
 8000f04:	695b      	ldr	r3, [r3, #20]
 8000f06:	3305      	adds	r3, #5
 8000f08:	2200      	movs	r2, #0
 8000f0a:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8000f0c:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <MX_ETH_Init+0x78>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8000f12:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <MX_ETH_Init+0x78>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <MX_ETH_Init+0x78>)
 8000f1a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000f1e:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000f20:	4804      	ldr	r0, [pc, #16]	; (8000f34 <MX_ETH_Init+0x78>)
 8000f22:	f000 ff69 	bl	8001df8 <HAL_ETH_Init>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 8000f2c:	f000 fa76 	bl	800141c <Error_Handler>
  }

}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	200009b0 	.word	0x200009b0
 8000f38:	40028000 	.word	0x40028000

08000f3c <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08e      	sub	sp, #56	; 0x38
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a55      	ldr	r2, [pc, #340]	; (80010b0 <HAL_ETH_MspInit+0x174>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	f040 80a4 	bne.w	80010a8 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000f60:	2300      	movs	r3, #0
 8000f62:	623b      	str	r3, [r7, #32]
 8000f64:	4b53      	ldr	r3, [pc, #332]	; (80010b4 <HAL_ETH_MspInit+0x178>)
 8000f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f68:	4a52      	ldr	r2, [pc, #328]	; (80010b4 <HAL_ETH_MspInit+0x178>)
 8000f6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f70:	4b50      	ldr	r3, [pc, #320]	; (80010b4 <HAL_ETH_MspInit+0x178>)
 8000f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f78:	623b      	str	r3, [r7, #32]
 8000f7a:	6a3b      	ldr	r3, [r7, #32]
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	61fb      	str	r3, [r7, #28]
 8000f80:	4b4c      	ldr	r3, [pc, #304]	; (80010b4 <HAL_ETH_MspInit+0x178>)
 8000f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f84:	4a4b      	ldr	r2, [pc, #300]	; (80010b4 <HAL_ETH_MspInit+0x178>)
 8000f86:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8c:	4b49      	ldr	r3, [pc, #292]	; (80010b4 <HAL_ETH_MspInit+0x178>)
 8000f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f94:	61fb      	str	r3, [r7, #28]
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	2300      	movs	r3, #0
 8000f9a:	61bb      	str	r3, [r7, #24]
 8000f9c:	4b45      	ldr	r3, [pc, #276]	; (80010b4 <HAL_ETH_MspInit+0x178>)
 8000f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa0:	4a44      	ldr	r2, [pc, #272]	; (80010b4 <HAL_ETH_MspInit+0x178>)
 8000fa2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000fa6:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa8:	4b42      	ldr	r3, [pc, #264]	; (80010b4 <HAL_ETH_MspInit+0x178>)
 8000faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000fb0:	61bb      	str	r3, [r7, #24]
 8000fb2:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]
 8000fb8:	4b3e      	ldr	r3, [pc, #248]	; (80010b4 <HAL_ETH_MspInit+0x178>)
 8000fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbc:	4a3d      	ldr	r2, [pc, #244]	; (80010b4 <HAL_ETH_MspInit+0x178>)
 8000fbe:	f043 0304 	orr.w	r3, r3, #4
 8000fc2:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc4:	4b3b      	ldr	r3, [pc, #236]	; (80010b4 <HAL_ETH_MspInit+0x178>)
 8000fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc8:	f003 0304 	and.w	r3, r3, #4
 8000fcc:	617b      	str	r3, [r7, #20]
 8000fce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	613b      	str	r3, [r7, #16]
 8000fd4:	4b37      	ldr	r3, [pc, #220]	; (80010b4 <HAL_ETH_MspInit+0x178>)
 8000fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd8:	4a36      	ldr	r2, [pc, #216]	; (80010b4 <HAL_ETH_MspInit+0x178>)
 8000fda:	f043 0301 	orr.w	r3, r3, #1
 8000fde:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe0:	4b34      	ldr	r3, [pc, #208]	; (80010b4 <HAL_ETH_MspInit+0x178>)
 8000fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe4:	f003 0301 	and.w	r3, r3, #1
 8000fe8:	613b      	str	r3, [r7, #16]
 8000fea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fec:	2300      	movs	r3, #0
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	4b30      	ldr	r3, [pc, #192]	; (80010b4 <HAL_ETH_MspInit+0x178>)
 8000ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff4:	4a2f      	ldr	r2, [pc, #188]	; (80010b4 <HAL_ETH_MspInit+0x178>)
 8000ff6:	f043 0302 	orr.w	r3, r3, #2
 8000ffa:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffc:	4b2d      	ldr	r3, [pc, #180]	; (80010b4 <HAL_ETH_MspInit+0x178>)
 8000ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001000:	f003 0302 	and.w	r3, r3, #2
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001008:	2300      	movs	r3, #0
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	4b29      	ldr	r3, [pc, #164]	; (80010b4 <HAL_ETH_MspInit+0x178>)
 800100e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001010:	4a28      	ldr	r2, [pc, #160]	; (80010b4 <HAL_ETH_MspInit+0x178>)
 8001012:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001016:	6313      	str	r3, [r2, #48]	; 0x30
 8001018:	4b26      	ldr	r3, [pc, #152]	; (80010b4 <HAL_ETH_MspInit+0x178>)
 800101a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001020:	60bb      	str	r3, [r7, #8]
 8001022:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001024:	2332      	movs	r3, #50	; 0x32
 8001026:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001028:	2302      	movs	r3, #2
 800102a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001030:	2303      	movs	r3, #3
 8001032:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001034:	230b      	movs	r3, #11
 8001036:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001038:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800103c:	4619      	mov	r1, r3
 800103e:	481e      	ldr	r0, [pc, #120]	; (80010b8 <HAL_ETH_MspInit+0x17c>)
 8001040:	f001 fb48 	bl	80026d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001044:	2386      	movs	r3, #134	; 0x86
 8001046:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001048:	2302      	movs	r3, #2
 800104a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001050:	2303      	movs	r3, #3
 8001052:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001054:	230b      	movs	r3, #11
 8001056:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001058:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800105c:	4619      	mov	r1, r3
 800105e:	4817      	ldr	r0, [pc, #92]	; (80010bc <HAL_ETH_MspInit+0x180>)
 8001060:	f001 fb38 	bl	80026d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001064:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106a:	2302      	movs	r3, #2
 800106c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001072:	2303      	movs	r3, #3
 8001074:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001076:	230b      	movs	r3, #11
 8001078:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800107a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800107e:	4619      	mov	r1, r3
 8001080:	480f      	ldr	r0, [pc, #60]	; (80010c0 <HAL_ETH_MspInit+0x184>)
 8001082:	f001 fb27 	bl	80026d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001086:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800108a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108c:	2302      	movs	r3, #2
 800108e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001094:	2303      	movs	r3, #3
 8001096:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001098:	230b      	movs	r3, #11
 800109a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800109c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a0:	4619      	mov	r1, r3
 80010a2:	4808      	ldr	r0, [pc, #32]	; (80010c4 <HAL_ETH_MspInit+0x188>)
 80010a4:	f001 fb16 	bl	80026d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80010a8:	bf00      	nop
 80010aa:	3738      	adds	r7, #56	; 0x38
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40028000 	.word	0x40028000
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40020800 	.word	0x40020800
 80010bc:	40020000 	.word	0x40020000
 80010c0:	40020400 	.word	0x40020400
 80010c4:	40021800 	.word	0x40021800

080010c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08e      	sub	sp, #56	; 0x38
 80010cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]
 80010da:	60da      	str	r2, [r3, #12]
 80010dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	623b      	str	r3, [r7, #32]
 80010e2:	4b6e      	ldr	r3, [pc, #440]	; (800129c <MX_GPIO_Init+0x1d4>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a6d      	ldr	r2, [pc, #436]	; (800129c <MX_GPIO_Init+0x1d4>)
 80010e8:	f043 0310 	orr.w	r3, r3, #16
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b6b      	ldr	r3, [pc, #428]	; (800129c <MX_GPIO_Init+0x1d4>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0310 	and.w	r3, r3, #16
 80010f6:	623b      	str	r3, [r7, #32]
 80010f8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
 80010fe:	4b67      	ldr	r3, [pc, #412]	; (800129c <MX_GPIO_Init+0x1d4>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	4a66      	ldr	r2, [pc, #408]	; (800129c <MX_GPIO_Init+0x1d4>)
 8001104:	f043 0304 	orr.w	r3, r3, #4
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
 800110a:	4b64      	ldr	r3, [pc, #400]	; (800129c <MX_GPIO_Init+0x1d4>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	f003 0304 	and.w	r3, r3, #4
 8001112:	61fb      	str	r3, [r7, #28]
 8001114:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	61bb      	str	r3, [r7, #24]
 800111a:	4b60      	ldr	r3, [pc, #384]	; (800129c <MX_GPIO_Init+0x1d4>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a5f      	ldr	r2, [pc, #380]	; (800129c <MX_GPIO_Init+0x1d4>)
 8001120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b5d      	ldr	r3, [pc, #372]	; (800129c <MX_GPIO_Init+0x1d4>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800112e:	61bb      	str	r3, [r7, #24]
 8001130:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	617b      	str	r3, [r7, #20]
 8001136:	4b59      	ldr	r3, [pc, #356]	; (800129c <MX_GPIO_Init+0x1d4>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a58      	ldr	r2, [pc, #352]	; (800129c <MX_GPIO_Init+0x1d4>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b56      	ldr	r3, [pc, #344]	; (800129c <MX_GPIO_Init+0x1d4>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	617b      	str	r3, [r7, #20]
 800114c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
 8001152:	4b52      	ldr	r3, [pc, #328]	; (800129c <MX_GPIO_Init+0x1d4>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a51      	ldr	r2, [pc, #324]	; (800129c <MX_GPIO_Init+0x1d4>)
 8001158:	f043 0302 	orr.w	r3, r3, #2
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b4f      	ldr	r3, [pc, #316]	; (800129c <MX_GPIO_Init+0x1d4>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	613b      	str	r3, [r7, #16]
 8001168:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	4b4b      	ldr	r3, [pc, #300]	; (800129c <MX_GPIO_Init+0x1d4>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a4a      	ldr	r2, [pc, #296]	; (800129c <MX_GPIO_Init+0x1d4>)
 8001174:	f043 0320 	orr.w	r3, r3, #32
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b48      	ldr	r3, [pc, #288]	; (800129c <MX_GPIO_Init+0x1d4>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0320 	and.w	r3, r3, #32
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	60bb      	str	r3, [r7, #8]
 800118a:	4b44      	ldr	r3, [pc, #272]	; (800129c <MX_GPIO_Init+0x1d4>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	4a43      	ldr	r2, [pc, #268]	; (800129c <MX_GPIO_Init+0x1d4>)
 8001190:	f043 0308 	orr.w	r3, r3, #8
 8001194:	6313      	str	r3, [r2, #48]	; 0x30
 8001196:	4b41      	ldr	r3, [pc, #260]	; (800129c <MX_GPIO_Init+0x1d4>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	f003 0308 	and.w	r3, r3, #8
 800119e:	60bb      	str	r3, [r7, #8]
 80011a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	4b3d      	ldr	r3, [pc, #244]	; (800129c <MX_GPIO_Init+0x1d4>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	4a3c      	ldr	r2, [pc, #240]	; (800129c <MX_GPIO_Init+0x1d4>)
 80011ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
 80011b2:	4b3a      	ldr	r3, [pc, #232]	; (800129c <MX_GPIO_Init+0x1d4>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6|GPIO_PIN_9|GPIO_PIN_11, GPIO_PIN_RESET);
 80011be:	2200      	movs	r2, #0
 80011c0:	f44f 6124 	mov.w	r1, #2624	; 0xa40
 80011c4:	4836      	ldr	r0, [pc, #216]	; (80012a0 <MX_GPIO_Init+0x1d8>)
 80011c6:	f001 fc47 	bl	8002a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80011ca:	2200      	movs	r2, #0
 80011cc:	f244 0181 	movw	r1, #16513	; 0x4081
 80011d0:	4834      	ldr	r0, [pc, #208]	; (80012a4 <MX_GPIO_Init+0x1dc>)
 80011d2:	f001 fc41 	bl	8002a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80011d6:	2200      	movs	r2, #0
 80011d8:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80011dc:	4832      	ldr	r0, [pc, #200]	; (80012a8 <MX_GPIO_Init+0x1e0>)
 80011de:	f001 fc3b 	bl	8002a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80011e2:	2200      	movs	r2, #0
 80011e4:	2140      	movs	r1, #64	; 0x40
 80011e6:	4831      	ldr	r0, [pc, #196]	; (80012ac <MX_GPIO_Init+0x1e4>)
 80011e8:	f001 fc36 	bl	8002a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE6 PE9 PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9|GPIO_PIN_11;
 80011ec:	f44f 6324 	mov.w	r3, #2624	; 0xa40
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f2:	2301      	movs	r3, #1
 80011f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fa:	2300      	movs	r3, #0
 80011fc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001202:	4619      	mov	r1, r3
 8001204:	4826      	ldr	r0, [pc, #152]	; (80012a0 <MX_GPIO_Init+0x1d8>)
 8001206:	f001 fa65 	bl	80026d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800120a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800120e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001210:	4b27      	ldr	r3, [pc, #156]	; (80012b0 <MX_GPIO_Init+0x1e8>)
 8001212:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001218:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800121c:	4619      	mov	r1, r3
 800121e:	4825      	ldr	r0, [pc, #148]	; (80012b4 <MX_GPIO_Init+0x1ec>)
 8001220:	f001 fa58 	bl	80026d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001224:	f244 0381 	movw	r3, #16513	; 0x4081
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122a:	2301      	movs	r3, #1
 800122c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001232:	2300      	movs	r3, #0
 8001234:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001236:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800123a:	4619      	mov	r1, r3
 800123c:	4819      	ldr	r0, [pc, #100]	; (80012a4 <MX_GPIO_Init+0x1dc>)
 800123e:	f001 fa49 	bl	80026d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF13 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001242:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001248:	2301      	movs	r3, #1
 800124a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001250:	2300      	movs	r3, #0
 8001252:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001254:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001258:	4619      	mov	r1, r3
 800125a:	4813      	ldr	r0, [pc, #76]	; (80012a8 <MX_GPIO_Init+0x1e0>)
 800125c:	f001 fa3a 	bl	80026d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001260:	2340      	movs	r3, #64	; 0x40
 8001262:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001264:	2301      	movs	r3, #1
 8001266:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126c:	2300      	movs	r3, #0
 800126e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001270:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001274:	4619      	mov	r1, r3
 8001276:	480d      	ldr	r0, [pc, #52]	; (80012ac <MX_GPIO_Init+0x1e4>)
 8001278:	f001 fa2c 	bl	80026d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800127c:	2380      	movs	r3, #128	; 0x80
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001280:	2300      	movs	r3, #0
 8001282:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001288:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800128c:	4619      	mov	r1, r3
 800128e:	4807      	ldr	r0, [pc, #28]	; (80012ac <MX_GPIO_Init+0x1e4>)
 8001290:	f001 fa20 	bl	80026d4 <HAL_GPIO_Init>

}
 8001294:	bf00      	nop
 8001296:	3738      	adds	r7, #56	; 0x38
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40023800 	.word	0x40023800
 80012a0:	40021000 	.word	0x40021000
 80012a4:	40020400 	.word	0x40020400
 80012a8:	40021400 	.word	0x40021400
 80012ac:	40021800 	.word	0x40021800
 80012b0:	10110000 	.word	0x10110000
 80012b4:	40020800 	.word	0x40020800

080012b8 <_write>:
#include "MVL.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file, char *p, int len){
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, p, len, 10);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	230a      	movs	r3, #10
 80012ca:	68b9      	ldr	r1, [r7, #8]
 80012cc:	4803      	ldr	r0, [pc, #12]	; (80012dc <_write+0x24>)
 80012ce:	f002 fde8 	bl	8003ea2 <HAL_UART_Transmit>
}
 80012d2:	bf00      	nop
 80012d4:	4618      	mov	r0, r3
 80012d6:	3710      	adds	r7, #16
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20000a78 	.word	0x20000a78

080012e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012e4:	f000 fbe2 	bl	8001aac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012e8:	f000 f82c 	bl	8001344 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ec:	f7ff feec 	bl	80010c8 <MX_GPIO_Init>
  MX_ETH_Init();
 80012f0:	f7ff fde4 	bl	8000ebc <MX_ETH_Init>
  MX_USART3_UART_Init();
 80012f4:	f000 fab6 	bl	8001864 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80012f8:	f000 fb26 	bl	8001948 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 80012fc:	f000 f98a 	bl	8001614 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001300:	f000 f9d4 	bl	80016ac <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8001304:	480c      	ldr	r0, [pc, #48]	; (8001338 <main+0x58>)
 8001306:	f002 f986 	bl	8003616 <HAL_TIM_Base_Start>
  MVCD_ST7920_baseinit();
 800130a:	f7ff fb75 	bl	80009f8 <MVCD_ST7920_baseinit>
  MVCD_ST7920_GraphicMode(ON);
 800130e:	2001      	movs	r0, #1
 8001310:	f7ff fbbe 	bl	8000a90 <MVCD_ST7920_GraphicMode>
  MVCD_LCDclear();
 8001314:	f7ff fc78 	bl	8000c08 <MVCD_LCDclear>
  HAL_Delay(1);
 8001318:	2001      	movs	r0, #1
 800131a:	f000 fc39 	bl	8001b90 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim3);
 800131e:	4807      	ldr	r0, [pc, #28]	; (800133c <main+0x5c>)
 8001320:	f002 f99d 	bl	800365e <HAL_TIM_Base_Start_IT>
  {
//	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
//	  for(int i=0;i<10;i++) MVCD_delay_us(500);
//	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
//	  for(int i=0;i<10;i++) MVCD_delay_us(2000);
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001324:	2101      	movs	r1, #1
 8001326:	4806      	ldr	r0, [pc, #24]	; (8001340 <main+0x60>)
 8001328:	f001 fbaf 	bl	8002a8a <HAL_GPIO_TogglePin>
	  MVCD_delay_us(10000);
 800132c:	f242 7010 	movw	r0, #10000	; 0x2710
 8001330:	f7ff fae0 	bl	80008f4 <MVCD_delay_us>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001334:	e7f6      	b.n	8001324 <main+0x44>
 8001336:	bf00      	nop
 8001338:	20000a38 	.word	0x20000a38
 800133c:	200009f8 	.word	0x200009f8
 8001340:	40020400 	.word	0x40020400

08001344 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b094      	sub	sp, #80	; 0x50
 8001348:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800134a:	f107 0320 	add.w	r3, r7, #32
 800134e:	2230      	movs	r2, #48	; 0x30
 8001350:	2100      	movs	r1, #0
 8001352:	4618      	mov	r0, r3
 8001354:	f003 fcea 	bl	8004d2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001358:	f107 030c 	add.w	r3, r7, #12
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001368:	2300      	movs	r3, #0
 800136a:	60bb      	str	r3, [r7, #8]
 800136c:	4b29      	ldr	r3, [pc, #164]	; (8001414 <SystemClock_Config+0xd0>)
 800136e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001370:	4a28      	ldr	r2, [pc, #160]	; (8001414 <SystemClock_Config+0xd0>)
 8001372:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001376:	6413      	str	r3, [r2, #64]	; 0x40
 8001378:	4b26      	ldr	r3, [pc, #152]	; (8001414 <SystemClock_Config+0xd0>)
 800137a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001380:	60bb      	str	r3, [r7, #8]
 8001382:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001384:	2300      	movs	r3, #0
 8001386:	607b      	str	r3, [r7, #4]
 8001388:	4b23      	ldr	r3, [pc, #140]	; (8001418 <SystemClock_Config+0xd4>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001390:	4a21      	ldr	r2, [pc, #132]	; (8001418 <SystemClock_Config+0xd4>)
 8001392:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001396:	6013      	str	r3, [r2, #0]
 8001398:	4b1f      	ldr	r3, [pc, #124]	; (8001418 <SystemClock_Config+0xd4>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013a0:	607b      	str	r3, [r7, #4]
 80013a2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013a4:	2301      	movs	r3, #1
 80013a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80013a8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ae:	2302      	movs	r3, #2
 80013b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80013b8:	2304      	movs	r3, #4
 80013ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80013bc:	2348      	movs	r3, #72	; 0x48
 80013be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013c0:	2302      	movs	r3, #2
 80013c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80013c4:	2303      	movs	r3, #3
 80013c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013c8:	f107 0320 	add.w	r3, r7, #32
 80013cc:	4618      	mov	r0, r3
 80013ce:	f001 fc95 	bl	8002cfc <HAL_RCC_OscConfig>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80013d8:	f000 f820 	bl	800141c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013dc:	230f      	movs	r3, #15
 80013de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013e0:	2302      	movs	r3, #2
 80013e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013f4:	f107 030c 	add.w	r3, r7, #12
 80013f8:	2102      	movs	r1, #2
 80013fa:	4618      	mov	r0, r3
 80013fc:	f001 feee 	bl	80031dc <HAL_RCC_ClockConfig>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001406:	f000 f809 	bl	800141c <Error_Handler>
  }
}
 800140a:	bf00      	nop
 800140c:	3750      	adds	r7, #80	; 0x50
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40023800 	.word	0x40023800
 8001418:	40007000 	.word	0x40007000

0800141c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
	...

0800142c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	607b      	str	r3, [r7, #4]
 8001436:	4b10      	ldr	r3, [pc, #64]	; (8001478 <HAL_MspInit+0x4c>)
 8001438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143a:	4a0f      	ldr	r2, [pc, #60]	; (8001478 <HAL_MspInit+0x4c>)
 800143c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001440:	6453      	str	r3, [r2, #68]	; 0x44
 8001442:	4b0d      	ldr	r3, [pc, #52]	; (8001478 <HAL_MspInit+0x4c>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	603b      	str	r3, [r7, #0]
 8001452:	4b09      	ldr	r3, [pc, #36]	; (8001478 <HAL_MspInit+0x4c>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	4a08      	ldr	r2, [pc, #32]	; (8001478 <HAL_MspInit+0x4c>)
 8001458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800145c:	6413      	str	r3, [r2, #64]	; 0x40
 800145e:	4b06      	ldr	r3, [pc, #24]	; (8001478 <HAL_MspInit+0x4c>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001466:	603b      	str	r3, [r7, #0]
 8001468:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	40023800 	.word	0x40023800

0800147c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800148e:	e7fe      	b.n	800148e <HardFault_Handler+0x4>

08001490 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001494:	e7fe      	b.n	8001494 <MemManage_Handler+0x4>

08001496 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800149a:	e7fe      	b.n	800149a <BusFault_Handler+0x4>

0800149c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <UsageFault_Handler+0x4>

080014a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014d0:	f000 fb3e 	bl	8001b50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014d4:	bf00      	nop
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80014dc:	4802      	ldr	r0, [pc, #8]	; (80014e8 <TIM3_IRQHandler+0x10>)
 80014de:	f002 f8e2 	bl	80036a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	200009f8 	.word	0x200009f8

080014ec <_read>:
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]
 80014fc:	e00a      	b.n	8001514 <_read+0x28>
 80014fe:	f3af 8000 	nop.w
 8001502:	4601      	mov	r1, r0
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	1c5a      	adds	r2, r3, #1
 8001508:	60ba      	str	r2, [r7, #8]
 800150a:	b2ca      	uxtb	r2, r1
 800150c:	701a      	strb	r2, [r3, #0]
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	3301      	adds	r3, #1
 8001512:	617b      	str	r3, [r7, #20]
 8001514:	697a      	ldr	r2, [r7, #20]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	429a      	cmp	r2, r3
 800151a:	dbf0      	blt.n	80014fe <_read+0x12>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4618      	mov	r0, r3
 8001520:	3718      	adds	r7, #24
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <_close>:
 8001526:	b480      	push	{r7}
 8001528:	b083      	sub	sp, #12
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
 800152e:	f04f 33ff 	mov.w	r3, #4294967295
 8001532:	4618      	mov	r0, r3
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr

0800153e <_fstat>:
 800153e:	b480      	push	{r7}
 8001540:	b083      	sub	sp, #12
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
 8001546:	6039      	str	r1, [r7, #0]
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800154e:	605a      	str	r2, [r3, #4]
 8001550:	2300      	movs	r3, #0
 8001552:	4618      	mov	r0, r3
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <_isatty>:
 800155e:	b480      	push	{r7}
 8001560:	b083      	sub	sp, #12
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
 8001566:	2301      	movs	r3, #1
 8001568:	4618      	mov	r0, r3
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <_lseek>:
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
 8001580:	2300      	movs	r3, #0
 8001582:	4618      	mov	r0, r3
 8001584:	3714      	adds	r7, #20
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
	...

08001590 <_sbrk>:
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <_sbrk+0x50>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d102      	bne.n	80015a6 <_sbrk+0x16>
 80015a0:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <_sbrk+0x50>)
 80015a2:	4a10      	ldr	r2, [pc, #64]	; (80015e4 <_sbrk+0x54>)
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <_sbrk+0x50>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <_sbrk+0x50>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4413      	add	r3, r2
 80015b4:	466a      	mov	r2, sp
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d907      	bls.n	80015ca <_sbrk+0x3a>
 80015ba:	f003 fb8d 	bl	8004cd8 <__errno>
 80015be:	4602      	mov	r2, r0
 80015c0:	230c      	movs	r3, #12
 80015c2:	6013      	str	r3, [r2, #0]
 80015c4:	f04f 33ff 	mov.w	r3, #4294967295
 80015c8:	e006      	b.n	80015d8 <_sbrk+0x48>
 80015ca:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <_sbrk+0x50>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4413      	add	r3, r2
 80015d2:	4a03      	ldr	r2, [pc, #12]	; (80015e0 <_sbrk+0x50>)
 80015d4:	6013      	str	r3, [r2, #0]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	4618      	mov	r0, r3
 80015da:	3710      	adds	r7, #16
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20000098 	.word	0x20000098
 80015e4:	20000ec8 	.word	0x20000ec8

080015e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015ec:	4b08      	ldr	r3, [pc, #32]	; (8001610 <SystemInit+0x28>)
 80015ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015f2:	4a07      	ldr	r2, [pc, #28]	; (8001610 <SystemInit+0x28>)
 80015f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015fc:	4b04      	ldr	r3, [pc, #16]	; (8001610 <SystemInit+0x28>)
 80015fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001602:	609a      	str	r2, [r3, #8]
#endif
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800161a:	f107 0308 	add.w	r3, r7, #8
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	605a      	str	r2, [r3, #4]
 8001624:	609a      	str	r2, [r3, #8]
 8001626:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001628:	463b      	mov	r3, r7
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8001630:	4b1d      	ldr	r3, [pc, #116]	; (80016a8 <MX_TIM2_Init+0x94>)
 8001632:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001636:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 8001638:	4b1b      	ldr	r3, [pc, #108]	; (80016a8 <MX_TIM2_Init+0x94>)
 800163a:	2248      	movs	r2, #72	; 0x48
 800163c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800163e:	4b1a      	ldr	r3, [pc, #104]	; (80016a8 <MX_TIM2_Init+0x94>)
 8001640:	2200      	movs	r2, #0
 8001642:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff;
 8001644:	4b18      	ldr	r3, [pc, #96]	; (80016a8 <MX_TIM2_Init+0x94>)
 8001646:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800164a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800164c:	4b16      	ldr	r3, [pc, #88]	; (80016a8 <MX_TIM2_Init+0x94>)
 800164e:	2200      	movs	r2, #0
 8001650:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001652:	4b15      	ldr	r3, [pc, #84]	; (80016a8 <MX_TIM2_Init+0x94>)
 8001654:	2200      	movs	r2, #0
 8001656:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001658:	4813      	ldr	r0, [pc, #76]	; (80016a8 <MX_TIM2_Init+0x94>)
 800165a:	f001 ffb1 	bl	80035c0 <HAL_TIM_Base_Init>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001664:	f7ff feda 	bl	800141c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001668:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800166c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800166e:	f107 0308 	add.w	r3, r7, #8
 8001672:	4619      	mov	r1, r3
 8001674:	480c      	ldr	r0, [pc, #48]	; (80016a8 <MX_TIM2_Init+0x94>)
 8001676:	f002 f91e 	bl	80038b6 <HAL_TIM_ConfigClockSource>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001680:	f7ff fecc 	bl	800141c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001684:	2300      	movs	r3, #0
 8001686:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001688:	2300      	movs	r3, #0
 800168a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800168c:	463b      	mov	r3, r7
 800168e:	4619      	mov	r1, r3
 8001690:	4805      	ldr	r0, [pc, #20]	; (80016a8 <MX_TIM2_Init+0x94>)
 8001692:	f002 fb29 	bl	8003ce8 <HAL_TIMEx_MasterConfigSynchronization>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800169c:	f7ff febe 	bl	800141c <Error_Handler>
  }

}
 80016a0:	bf00      	nop
 80016a2:	3718      	adds	r7, #24
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20000a38 	.word	0x20000a38

080016ac <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016b2:	f107 0308 	add.w	r3, r7, #8
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	609a      	str	r2, [r3, #8]
 80016be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016c0:	463b      	mov	r3, r7
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 80016c8:	4b1c      	ldr	r3, [pc, #112]	; (800173c <MX_TIM3_Init+0x90>)
 80016ca:	4a1d      	ldr	r2, [pc, #116]	; (8001740 <MX_TIM3_Init+0x94>)
 80016cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 80016ce:	4b1b      	ldr	r3, [pc, #108]	; (800173c <MX_TIM3_Init+0x90>)
 80016d0:	2248      	movs	r2, #72	; 0x48
 80016d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d4:	4b19      	ldr	r3, [pc, #100]	; (800173c <MX_TIM3_Init+0x90>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10-1;
 80016da:	4b18      	ldr	r3, [pc, #96]	; (800173c <MX_TIM3_Init+0x90>)
 80016dc:	2209      	movs	r2, #9
 80016de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e0:	4b16      	ldr	r3, [pc, #88]	; (800173c <MX_TIM3_Init+0x90>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e6:	4b15      	ldr	r3, [pc, #84]	; (800173c <MX_TIM3_Init+0x90>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016ec:	4813      	ldr	r0, [pc, #76]	; (800173c <MX_TIM3_Init+0x90>)
 80016ee:	f001 ff67 	bl	80035c0 <HAL_TIM_Base_Init>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 80016f8:	f7ff fe90 	bl	800141c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001700:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001702:	f107 0308 	add.w	r3, r7, #8
 8001706:	4619      	mov	r1, r3
 8001708:	480c      	ldr	r0, [pc, #48]	; (800173c <MX_TIM3_Init+0x90>)
 800170a:	f002 f8d4 	bl	80038b6 <HAL_TIM_ConfigClockSource>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8001714:	f7ff fe82 	bl	800141c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001718:	2300      	movs	r3, #0
 800171a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800171c:	2300      	movs	r3, #0
 800171e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001720:	463b      	mov	r3, r7
 8001722:	4619      	mov	r1, r3
 8001724:	4805      	ldr	r0, [pc, #20]	; (800173c <MX_TIM3_Init+0x90>)
 8001726:	f002 fadf 	bl	8003ce8 <HAL_TIMEx_MasterConfigSynchronization>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8001730:	f7ff fe74 	bl	800141c <Error_Handler>
  }

}
 8001734:	bf00      	nop
 8001736:	3718      	adds	r7, #24
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	200009f8 	.word	0x200009f8
 8001740:	40000400 	.word	0x40000400

08001744 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001754:	d10e      	bne.n	8001774 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	4b16      	ldr	r3, [pc, #88]	; (80017b4 <HAL_TIM_Base_MspInit+0x70>)
 800175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175e:	4a15      	ldr	r2, [pc, #84]	; (80017b4 <HAL_TIM_Base_MspInit+0x70>)
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	6413      	str	r3, [r2, #64]	; 0x40
 8001766:	4b13      	ldr	r3, [pc, #76]	; (80017b4 <HAL_TIM_Base_MspInit+0x70>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001772:	e01a      	b.n	80017aa <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM3)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a0f      	ldr	r2, [pc, #60]	; (80017b8 <HAL_TIM_Base_MspInit+0x74>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d115      	bne.n	80017aa <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	60bb      	str	r3, [r7, #8]
 8001782:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <HAL_TIM_Base_MspInit+0x70>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	4a0b      	ldr	r2, [pc, #44]	; (80017b4 <HAL_TIM_Base_MspInit+0x70>)
 8001788:	f043 0302 	orr.w	r3, r3, #2
 800178c:	6413      	str	r3, [r2, #64]	; 0x40
 800178e:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <HAL_TIM_Base_MspInit+0x70>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	60bb      	str	r3, [r7, #8]
 8001798:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800179a:	2200      	movs	r2, #0
 800179c:	2100      	movs	r1, #0
 800179e:	201d      	movs	r0, #29
 80017a0:	f000 faf3 	bl	8001d8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80017a4:	201d      	movs	r0, #29
 80017a6:	f000 fb0c 	bl	8001dc2 <HAL_NVIC_EnableIRQ>
}
 80017aa:	bf00      	nop
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40023800 	.word	0x40023800
 80017b8:	40000400 	.word	0x40000400

080017bc <HAL_TIM_PeriodElapsedCallback>:
  /* USER CODE END TIM3_MspDeInit 1 */
  }
} 

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af02      	add	r7, sp, #8
 80017c2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a20      	ldr	r2, [pc, #128]	; (800184c <HAL_TIM_PeriodElapsedCallback+0x90>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d139      	bne.n	8001842 <HAL_TIM_PeriodElapsedCallback+0x86>
		i++;
 80017ce:	4b20      	ldr	r3, [pc, #128]	; (8001850 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	3301      	adds	r3, #1
 80017d4:	4a1e      	ldr	r2, [pc, #120]	; (8001850 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80017d6:	6013      	str	r3, [r2, #0]
		sel = LogicAnalyzer(GPIOB, GPIO_PIN_0, i, 10, MS,startTrigger);
 80017d8:	4b1d      	ldr	r3, [pc, #116]	; (8001850 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	4b1d      	ldr	r3, [pc, #116]	; (8001854 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	9301      	str	r3, [sp, #4]
 80017e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017e6:	9300      	str	r3, [sp, #0]
 80017e8:	230a      	movs	r3, #10
 80017ea:	2101      	movs	r1, #1
 80017ec:	481a      	ldr	r0, [pc, #104]	; (8001858 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80017ee:	f7ff fa5f 	bl	8000cb0 <LogicAnalyzer>
 80017f2:	4602      	mov	r2, r0
 80017f4:	4b19      	ldr	r3, [pc, #100]	; (800185c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80017f6:	601a      	str	r2, [r3, #0]
		if(sel == 1) i=0;
 80017f8:	4b18      	ldr	r3, [pc, #96]	; (800185c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d103      	bne.n	8001808 <HAL_TIM_PeriodElapsedCallback+0x4c>
 8001800:	4b13      	ldr	r3, [pc, #76]	; (8001850 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
			i=0;
			printf("ss\n");
		}
		else if(sel == 4) startTrigger = 4;
	}
}
 8001806:	e01c      	b.n	8001842 <HAL_TIM_PeriodElapsedCallback+0x86>
		else if(sel == 2) {
 8001808:	4b14      	ldr	r3, [pc, #80]	; (800185c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2b02      	cmp	r3, #2
 800180e:	d106      	bne.n	800181e <HAL_TIM_PeriodElapsedCallback+0x62>
			startTrigger = 2;
 8001810:	4b10      	ldr	r3, [pc, #64]	; (8001854 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001812:	2202      	movs	r2, #2
 8001814:	601a      	str	r2, [r3, #0]
			i=0;
 8001816:	4b0e      	ldr	r3, [pc, #56]	; (8001850 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
}
 800181c:	e011      	b.n	8001842 <HAL_TIM_PeriodElapsedCallback+0x86>
		else if(sel == 3) {
 800181e:	4b0f      	ldr	r3, [pc, #60]	; (800185c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2b03      	cmp	r3, #3
 8001824:	d106      	bne.n	8001834 <HAL_TIM_PeriodElapsedCallback+0x78>
			i=0;
 8001826:	4b0a      	ldr	r3, [pc, #40]	; (8001850 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
			printf("ss\n");
 800182c:	480c      	ldr	r0, [pc, #48]	; (8001860 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800182e:	f003 fae1 	bl	8004df4 <puts>
}
 8001832:	e006      	b.n	8001842 <HAL_TIM_PeriodElapsedCallback+0x86>
		else if(sel == 4) startTrigger = 4;
 8001834:	4b09      	ldr	r3, [pc, #36]	; (800185c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b04      	cmp	r3, #4
 800183a:	d102      	bne.n	8001842 <HAL_TIM_PeriodElapsedCallback+0x86>
 800183c:	4b05      	ldr	r3, [pc, #20]	; (8001854 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800183e:	2204      	movs	r2, #4
 8001840:	601a      	str	r2, [r3, #0]
}
 8001842:	bf00      	nop
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40000400 	.word	0x40000400
 8001850:	2000009c 	.word	0x2000009c
 8001854:	200000a0 	.word	0x200000a0
 8001858:	40020400 	.word	0x40020400
 800185c:	200000a4 	.word	0x200000a4
 8001860:	08005624 	.word	0x08005624

08001864 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001868:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <MX_USART3_UART_Init+0x4c>)
 800186a:	4a12      	ldr	r2, [pc, #72]	; (80018b4 <MX_USART3_UART_Init+0x50>)
 800186c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800186e:	4b10      	ldr	r3, [pc, #64]	; (80018b0 <MX_USART3_UART_Init+0x4c>)
 8001870:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001874:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001876:	4b0e      	ldr	r3, [pc, #56]	; (80018b0 <MX_USART3_UART_Init+0x4c>)
 8001878:	2200      	movs	r2, #0
 800187a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800187c:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <MX_USART3_UART_Init+0x4c>)
 800187e:	2200      	movs	r2, #0
 8001880:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001882:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <MX_USART3_UART_Init+0x4c>)
 8001884:	2200      	movs	r2, #0
 8001886:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001888:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <MX_USART3_UART_Init+0x4c>)
 800188a:	220c      	movs	r2, #12
 800188c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800188e:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <MX_USART3_UART_Init+0x4c>)
 8001890:	2200      	movs	r2, #0
 8001892:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001894:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <MX_USART3_UART_Init+0x4c>)
 8001896:	2200      	movs	r2, #0
 8001898:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800189a:	4805      	ldr	r0, [pc, #20]	; (80018b0 <MX_USART3_UART_Init+0x4c>)
 800189c:	f002 fab4 	bl	8003e08 <HAL_UART_Init>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80018a6:	f7ff fdb9 	bl	800141c <Error_Handler>
  }

}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20000a78 	.word	0x20000a78
 80018b4:	40004800 	.word	0x40004800

080018b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08a      	sub	sp, #40	; 0x28
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c0:	f107 0314 	add.w	r3, r7, #20
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	60da      	str	r2, [r3, #12]
 80018ce:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a19      	ldr	r2, [pc, #100]	; (800193c <HAL_UART_MspInit+0x84>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d12c      	bne.n	8001934 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	613b      	str	r3, [r7, #16]
 80018de:	4b18      	ldr	r3, [pc, #96]	; (8001940 <HAL_UART_MspInit+0x88>)
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	4a17      	ldr	r2, [pc, #92]	; (8001940 <HAL_UART_MspInit+0x88>)
 80018e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018e8:	6413      	str	r3, [r2, #64]	; 0x40
 80018ea:	4b15      	ldr	r3, [pc, #84]	; (8001940 <HAL_UART_MspInit+0x88>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018f2:	613b      	str	r3, [r7, #16]
 80018f4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	4b11      	ldr	r3, [pc, #68]	; (8001940 <HAL_UART_MspInit+0x88>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	4a10      	ldr	r2, [pc, #64]	; (8001940 <HAL_UART_MspInit+0x88>)
 8001900:	f043 0308 	orr.w	r3, r3, #8
 8001904:	6313      	str	r3, [r2, #48]	; 0x30
 8001906:	4b0e      	ldr	r3, [pc, #56]	; (8001940 <HAL_UART_MspInit+0x88>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	f003 0308 	and.w	r3, r3, #8
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001912:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001916:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001918:	2302      	movs	r3, #2
 800191a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800191c:	2301      	movs	r3, #1
 800191e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001920:	2303      	movs	r3, #3
 8001922:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001924:	2307      	movs	r3, #7
 8001926:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001928:	f107 0314 	add.w	r3, r7, #20
 800192c:	4619      	mov	r1, r3
 800192e:	4805      	ldr	r0, [pc, #20]	; (8001944 <HAL_UART_MspInit+0x8c>)
 8001930:	f000 fed0 	bl	80026d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001934:	bf00      	nop
 8001936:	3728      	adds	r7, #40	; 0x28
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40004800 	.word	0x40004800
 8001940:	40023800 	.word	0x40023800
 8001944:	40020c00 	.word	0x40020c00

08001948 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800194c:	4b14      	ldr	r3, [pc, #80]	; (80019a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800194e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001952:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001954:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001956:	2204      	movs	r2, #4
 8001958:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800195a:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800195c:	2202      	movs	r2, #2
 800195e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001960:	4b0f      	ldr	r3, [pc, #60]	; (80019a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001962:	2200      	movs	r2, #0
 8001964:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001966:	4b0e      	ldr	r3, [pc, #56]	; (80019a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001968:	2202      	movs	r2, #2
 800196a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800196c:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800196e:	2201      	movs	r2, #1
 8001970:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001972:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001974:	2200      	movs	r2, #0
 8001976:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001978:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800197a:	2200      	movs	r2, #0
 800197c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800197e:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001980:	2201      	movs	r2, #1
 8001982:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001984:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001986:	2200      	movs	r2, #0
 8001988:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800198a:	4805      	ldr	r0, [pc, #20]	; (80019a0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800198c:	f001 f898 	bl	8002ac0 <HAL_PCD_Init>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001996:	f7ff fd41 	bl	800141c <Error_Handler>
  }

}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000ab8 	.word	0x20000ab8

080019a4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b08a      	sub	sp, #40	; 0x28
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ac:	f107 0314 	add.w	r3, r7, #20
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019c4:	d13f      	bne.n	8001a46 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	613b      	str	r3, [r7, #16]
 80019ca:	4b21      	ldr	r3, [pc, #132]	; (8001a50 <HAL_PCD_MspInit+0xac>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	4a20      	ldr	r2, [pc, #128]	; (8001a50 <HAL_PCD_MspInit+0xac>)
 80019d0:	f043 0301 	orr.w	r3, r3, #1
 80019d4:	6313      	str	r3, [r2, #48]	; 0x30
 80019d6:	4b1e      	ldr	r3, [pc, #120]	; (8001a50 <HAL_PCD_MspInit+0xac>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	613b      	str	r3, [r7, #16]
 80019e0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80019e2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80019e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e8:	2302      	movs	r3, #2
 80019ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f0:	2303      	movs	r3, #3
 80019f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80019f4:	230a      	movs	r3, #10
 80019f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f8:	f107 0314 	add.w	r3, r7, #20
 80019fc:	4619      	mov	r1, r3
 80019fe:	4815      	ldr	r0, [pc, #84]	; (8001a54 <HAL_PCD_MspInit+0xb0>)
 8001a00:	f000 fe68 	bl	80026d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001a04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001a12:	f107 0314 	add.w	r3, r7, #20
 8001a16:	4619      	mov	r1, r3
 8001a18:	480e      	ldr	r0, [pc, #56]	; (8001a54 <HAL_PCD_MspInit+0xb0>)
 8001a1a:	f000 fe5b 	bl	80026d4 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001a1e:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <HAL_PCD_MspInit+0xac>)
 8001a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a22:	4a0b      	ldr	r2, [pc, #44]	; (8001a50 <HAL_PCD_MspInit+0xac>)
 8001a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a28:	6353      	str	r3, [r2, #52]	; 0x34
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	4b08      	ldr	r3, [pc, #32]	; (8001a50 <HAL_PCD_MspInit+0xac>)
 8001a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a32:	4a07      	ldr	r2, [pc, #28]	; (8001a50 <HAL_PCD_MspInit+0xac>)
 8001a34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a38:	6453      	str	r3, [r2, #68]	; 0x44
 8001a3a:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <HAL_PCD_MspInit+0xac>)
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001a46:	bf00      	nop
 8001a48:	3728      	adds	r7, #40	; 0x28
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40023800 	.word	0x40023800
 8001a54:	40020000 	.word	0x40020000

08001a58 <Reset_Handler>:
 8001a58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a90 <LoopFillZerobss+0x14>
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	e003      	b.n	8001a68 <LoopCopyDataInit>

08001a60 <CopyDataInit>:
 8001a60:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <LoopFillZerobss+0x18>)
 8001a62:	585b      	ldr	r3, [r3, r1]
 8001a64:	5043      	str	r3, [r0, r1]
 8001a66:	3104      	adds	r1, #4

08001a68 <LoopCopyDataInit>:
 8001a68:	480b      	ldr	r0, [pc, #44]	; (8001a98 <LoopFillZerobss+0x1c>)
 8001a6a:	4b0c      	ldr	r3, [pc, #48]	; (8001a9c <LoopFillZerobss+0x20>)
 8001a6c:	1842      	adds	r2, r0, r1
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d3f6      	bcc.n	8001a60 <CopyDataInit>
 8001a72:	4a0b      	ldr	r2, [pc, #44]	; (8001aa0 <LoopFillZerobss+0x24>)
 8001a74:	e002      	b.n	8001a7c <LoopFillZerobss>

08001a76 <FillZerobss>:
 8001a76:	2300      	movs	r3, #0
 8001a78:	f842 3b04 	str.w	r3, [r2], #4

08001a7c <LoopFillZerobss>:
 8001a7c:	4b09      	ldr	r3, [pc, #36]	; (8001aa4 <LoopFillZerobss+0x28>)
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d3f9      	bcc.n	8001a76 <FillZerobss>
 8001a82:	f7ff fdb1 	bl	80015e8 <SystemInit>
 8001a86:	f003 f92d 	bl	8004ce4 <__libc_init_array>
 8001a8a:	f7ff fc29 	bl	80012e0 <main>
 8001a8e:	4770      	bx	lr
 8001a90:	20030000 	.word	0x20030000
 8001a94:	080056b4 	.word	0x080056b4
 8001a98:	20000000 	.word	0x20000000
 8001a9c:	20000070 	.word	0x20000070
 8001aa0:	20000070 	.word	0x20000070
 8001aa4:	20000ec8 	.word	0x20000ec8

08001aa8 <ADC_IRQHandler>:
 8001aa8:	e7fe      	b.n	8001aa8 <ADC_IRQHandler>
	...

08001aac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ab0:	4b0e      	ldr	r3, [pc, #56]	; (8001aec <HAL_Init+0x40>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a0d      	ldr	r2, [pc, #52]	; (8001aec <HAL_Init+0x40>)
 8001ab6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001abc:	4b0b      	ldr	r3, [pc, #44]	; (8001aec <HAL_Init+0x40>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a0a      	ldr	r2, [pc, #40]	; (8001aec <HAL_Init+0x40>)
 8001ac2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ac6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ac8:	4b08      	ldr	r3, [pc, #32]	; (8001aec <HAL_Init+0x40>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a07      	ldr	r2, [pc, #28]	; (8001aec <HAL_Init+0x40>)
 8001ace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ad2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ad4:	2003      	movs	r0, #3
 8001ad6:	f000 f94d 	bl	8001d74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ada:	2000      	movs	r0, #0
 8001adc:	f000 f808 	bl	8001af0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ae0:	f7ff fca4 	bl	800142c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40023c00 	.word	0x40023c00

08001af0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001af8:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <HAL_InitTick+0x54>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	4b12      	ldr	r3, [pc, #72]	; (8001b48 <HAL_InitTick+0x58>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	4619      	mov	r1, r3
 8001b02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f000 f965 	bl	8001dde <HAL_SYSTICK_Config>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e00e      	b.n	8001b3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2b0f      	cmp	r3, #15
 8001b22:	d80a      	bhi.n	8001b3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b24:	2200      	movs	r2, #0
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	f04f 30ff 	mov.w	r0, #4294967295
 8001b2c:	f000 f92d 	bl	8001d8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b30:	4a06      	ldr	r2, [pc, #24]	; (8001b4c <HAL_InitTick+0x5c>)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
 8001b38:	e000      	b.n	8001b3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20000000 	.word	0x20000000
 8001b48:	20000008 	.word	0x20000008
 8001b4c:	20000004 	.word	0x20000004

08001b50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b54:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <HAL_IncTick+0x20>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <HAL_IncTick+0x24>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4413      	add	r3, r2
 8001b60:	4a04      	ldr	r2, [pc, #16]	; (8001b74 <HAL_IncTick+0x24>)
 8001b62:	6013      	str	r3, [r2, #0]
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	20000008 	.word	0x20000008
 8001b74:	20000ec0 	.word	0x20000ec0

08001b78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b7c:	4b03      	ldr	r3, [pc, #12]	; (8001b8c <HAL_GetTick+0x14>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	20000ec0 	.word	0x20000ec0

08001b90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b98:	f7ff ffee 	bl	8001b78 <HAL_GetTick>
 8001b9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ba8:	d005      	beq.n	8001bb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001baa:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <HAL_Delay+0x40>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bb6:	bf00      	nop
 8001bb8:	f7ff ffde 	bl	8001b78 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	68fa      	ldr	r2, [r7, #12]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d8f7      	bhi.n	8001bb8 <HAL_Delay+0x28>
  {
  }
}
 8001bc8:	bf00      	nop
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	20000008 	.word	0x20000008

08001bd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001be4:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <__NVIC_SetPriorityGrouping+0x44>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bea:	68ba      	ldr	r2, [r7, #8]
 8001bec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c06:	4a04      	ldr	r2, [pc, #16]	; (8001c18 <__NVIC_SetPriorityGrouping+0x44>)
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	60d3      	str	r3, [r2, #12]
}
 8001c0c:	bf00      	nop
 8001c0e:	3714      	adds	r7, #20
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c20:	4b04      	ldr	r3, [pc, #16]	; (8001c34 <__NVIC_GetPriorityGrouping+0x18>)
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	0a1b      	lsrs	r3, r3, #8
 8001c26:	f003 0307 	and.w	r3, r3, #7
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	e000ed00 	.word	0xe000ed00

08001c38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	db0b      	blt.n	8001c62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c4a:	79fb      	ldrb	r3, [r7, #7]
 8001c4c:	f003 021f 	and.w	r2, r3, #31
 8001c50:	4907      	ldr	r1, [pc, #28]	; (8001c70 <__NVIC_EnableIRQ+0x38>)
 8001c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c56:	095b      	lsrs	r3, r3, #5
 8001c58:	2001      	movs	r0, #1
 8001c5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	e000e100 	.word	0xe000e100

08001c74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	6039      	str	r1, [r7, #0]
 8001c7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	db0a      	blt.n	8001c9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	b2da      	uxtb	r2, r3
 8001c8c:	490c      	ldr	r1, [pc, #48]	; (8001cc0 <__NVIC_SetPriority+0x4c>)
 8001c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c92:	0112      	lsls	r2, r2, #4
 8001c94:	b2d2      	uxtb	r2, r2
 8001c96:	440b      	add	r3, r1
 8001c98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c9c:	e00a      	b.n	8001cb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	b2da      	uxtb	r2, r3
 8001ca2:	4908      	ldr	r1, [pc, #32]	; (8001cc4 <__NVIC_SetPriority+0x50>)
 8001ca4:	79fb      	ldrb	r3, [r7, #7]
 8001ca6:	f003 030f 	and.w	r3, r3, #15
 8001caa:	3b04      	subs	r3, #4
 8001cac:	0112      	lsls	r2, r2, #4
 8001cae:	b2d2      	uxtb	r2, r2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	761a      	strb	r2, [r3, #24]
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	e000e100 	.word	0xe000e100
 8001cc4:	e000ed00 	.word	0xe000ed00

08001cc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b089      	sub	sp, #36	; 0x24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	f1c3 0307 	rsb	r3, r3, #7
 8001ce2:	2b04      	cmp	r3, #4
 8001ce4:	bf28      	it	cs
 8001ce6:	2304      	movcs	r3, #4
 8001ce8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	3304      	adds	r3, #4
 8001cee:	2b06      	cmp	r3, #6
 8001cf0:	d902      	bls.n	8001cf8 <NVIC_EncodePriority+0x30>
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	3b03      	subs	r3, #3
 8001cf6:	e000      	b.n	8001cfa <NVIC_EncodePriority+0x32>
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	43da      	mvns	r2, r3
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	401a      	ands	r2, r3
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d10:	f04f 31ff 	mov.w	r1, #4294967295
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1a:	43d9      	mvns	r1, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d20:	4313      	orrs	r3, r2
         );
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3724      	adds	r7, #36	; 0x24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
	...

08001d30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d40:	d301      	bcc.n	8001d46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d42:	2301      	movs	r3, #1
 8001d44:	e00f      	b.n	8001d66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d46:	4a0a      	ldr	r2, [pc, #40]	; (8001d70 <SysTick_Config+0x40>)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d4e:	210f      	movs	r1, #15
 8001d50:	f04f 30ff 	mov.w	r0, #4294967295
 8001d54:	f7ff ff8e 	bl	8001c74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d58:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <SysTick_Config+0x40>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d5e:	4b04      	ldr	r3, [pc, #16]	; (8001d70 <SysTick_Config+0x40>)
 8001d60:	2207      	movs	r2, #7
 8001d62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	e000e010 	.word	0xe000e010

08001d74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f7ff ff29 	bl	8001bd4 <__NVIC_SetPriorityGrouping>
}
 8001d82:	bf00      	nop
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b086      	sub	sp, #24
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	4603      	mov	r3, r0
 8001d92:	60b9      	str	r1, [r7, #8]
 8001d94:	607a      	str	r2, [r7, #4]
 8001d96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d9c:	f7ff ff3e 	bl	8001c1c <__NVIC_GetPriorityGrouping>
 8001da0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	68b9      	ldr	r1, [r7, #8]
 8001da6:	6978      	ldr	r0, [r7, #20]
 8001da8:	f7ff ff8e 	bl	8001cc8 <NVIC_EncodePriority>
 8001dac:	4602      	mov	r2, r0
 8001dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001db2:	4611      	mov	r1, r2
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff ff5d 	bl	8001c74 <__NVIC_SetPriority>
}
 8001dba:	bf00      	nop
 8001dbc:	3718      	adds	r7, #24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b082      	sub	sp, #8
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	4603      	mov	r3, r0
 8001dca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff ff31 	bl	8001c38 <__NVIC_EnableIRQ>
}
 8001dd6:	bf00      	nop
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b082      	sub	sp, #8
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f7ff ffa2 	bl	8001d30 <SysTick_Config>
 8001dec:	4603      	mov	r3, r0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
	...

08001df8 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b088      	sub	sp, #32
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001e00:	2300      	movs	r3, #0
 8001e02:	61fb      	str	r3, [r7, #28]
 8001e04:	2300      	movs	r3, #0
 8001e06:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001e08:	4baa      	ldr	r3, [pc, #680]	; (80020b4 <HAL_ETH_Init+0x2bc>)
 8001e0a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001e10:	2300      	movs	r3, #0
 8001e12:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e185      	b.n	800212a <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d106      	bne.n	8001e38 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f7ff f882 	bl	8000f3c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e38:	2300      	movs	r3, #0
 8001e3a:	60bb      	str	r3, [r7, #8]
 8001e3c:	4b9e      	ldr	r3, [pc, #632]	; (80020b8 <HAL_ETH_Init+0x2c0>)
 8001e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e40:	4a9d      	ldr	r2, [pc, #628]	; (80020b8 <HAL_ETH_Init+0x2c0>)
 8001e42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e46:	6453      	str	r3, [r2, #68]	; 0x44
 8001e48:	4b9b      	ldr	r3, [pc, #620]	; (80020b8 <HAL_ETH_Init+0x2c0>)
 8001e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e50:	60bb      	str	r3, [r7, #8]
 8001e52:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001e54:	4b99      	ldr	r3, [pc, #612]	; (80020bc <HAL_ETH_Init+0x2c4>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	4a98      	ldr	r2, [pc, #608]	; (80020bc <HAL_ETH_Init+0x2c4>)
 8001e5a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001e5e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001e60:	4b96      	ldr	r3, [pc, #600]	; (80020bc <HAL_ETH_Init+0x2c4>)
 8001e62:	685a      	ldr	r2, [r3, #4]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a1b      	ldr	r3, [r3, #32]
 8001e68:	4994      	ldr	r1, [pc, #592]	; (80020bc <HAL_ETH_Init+0x2c4>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f042 0201 	orr.w	r2, r2, #1
 8001e80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e84:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001e86:	f7ff fe77 	bl	8001b78 <HAL_GetTick>
 8001e8a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001e8c:	e011      	b.n	8001eb2 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001e8e:	f7ff fe73 	bl	8001b78 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001e9c:	d909      	bls.n	8001eb2 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2203      	movs	r2, #3
 8001ea2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e13b      	b.n	800212a <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1e4      	bne.n	8001e8e <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	f023 031c 	bic.w	r3, r3, #28
 8001ed2:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001ed4:	f001 fb40 	bl	8003558 <HAL_RCC_GetHCLKFreq>
 8001ed8:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	4a78      	ldr	r2, [pc, #480]	; (80020c0 <HAL_ETH_Init+0x2c8>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d908      	bls.n	8001ef4 <HAL_ETH_Init+0xfc>
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	4a77      	ldr	r2, [pc, #476]	; (80020c4 <HAL_ETH_Init+0x2cc>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d804      	bhi.n	8001ef4 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	f043 0308 	orr.w	r3, r3, #8
 8001ef0:	61fb      	str	r3, [r7, #28]
 8001ef2:	e027      	b.n	8001f44 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	4a73      	ldr	r2, [pc, #460]	; (80020c4 <HAL_ETH_Init+0x2cc>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d908      	bls.n	8001f0e <HAL_ETH_Init+0x116>
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	4a72      	ldr	r2, [pc, #456]	; (80020c8 <HAL_ETH_Init+0x2d0>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d804      	bhi.n	8001f0e <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	f043 030c 	orr.w	r3, r3, #12
 8001f0a:	61fb      	str	r3, [r7, #28]
 8001f0c:	e01a      	b.n	8001f44 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	4a6d      	ldr	r2, [pc, #436]	; (80020c8 <HAL_ETH_Init+0x2d0>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d903      	bls.n	8001f1e <HAL_ETH_Init+0x126>
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	4a6c      	ldr	r2, [pc, #432]	; (80020cc <HAL_ETH_Init+0x2d4>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d911      	bls.n	8001f42 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	4a6a      	ldr	r2, [pc, #424]	; (80020cc <HAL_ETH_Init+0x2d4>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d908      	bls.n	8001f38 <HAL_ETH_Init+0x140>
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	4a69      	ldr	r2, [pc, #420]	; (80020d0 <HAL_ETH_Init+0x2d8>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d804      	bhi.n	8001f38 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	f043 0304 	orr.w	r3, r3, #4
 8001f34:	61fb      	str	r3, [r7, #28]
 8001f36:	e005      	b.n	8001f44 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	f043 0310 	orr.w	r3, r3, #16
 8001f3e:	61fb      	str	r3, [r7, #28]
 8001f40:	e000      	b.n	8001f44 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001f42:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	69fa      	ldr	r2, [r7, #28]
 8001f4a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001f4c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001f50:	2100      	movs	r1, #0
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 f956 	bl	8002204 <HAL_ETH_WritePHYRegister>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d00b      	beq.n	8001f76 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001f62:	6939      	ldr	r1, [r7, #16]
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 f9b3 	bl	80022d0 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e0d9      	b.n	800212a <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001f76:	20ff      	movs	r0, #255	; 0xff
 8001f78:	f7ff fe0a 	bl	8001b90 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f000 80a7 	beq.w	80020d4 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001f86:	f7ff fdf7 	bl	8001b78 <HAL_GetTick>
 8001f8a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001f8c:	f107 030c 	add.w	r3, r7, #12
 8001f90:	461a      	mov	r2, r3
 8001f92:	2101      	movs	r1, #1
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f000 f8cd 	bl	8002134 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001f9a:	f7ff fded 	bl	8001b78 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d90f      	bls.n	8001fcc <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001fb0:	6939      	ldr	r1, [r7, #16]
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 f98c 	bl	80022d0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e0ae      	b.n	800212a <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f003 0304 	and.w	r3, r3, #4
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d0da      	beq.n	8001f8c <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001fd6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001fda:	2100      	movs	r1, #0
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f000 f911 	bl	8002204 <HAL_ETH_WritePHYRegister>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d00b      	beq.n	8002000 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001fec:	6939      	ldr	r1, [r7, #16]
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 f96e 	bl	80022d0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e094      	b.n	800212a <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8002000:	f7ff fdba 	bl	8001b78 <HAL_GetTick>
 8002004:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002006:	f107 030c 	add.w	r3, r7, #12
 800200a:	461a      	mov	r2, r3
 800200c:	2101      	movs	r1, #1
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f000 f890 	bl	8002134 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002014:	f7ff fdb0 	bl	8001b78 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002022:	4293      	cmp	r3, r2
 8002024:	d90f      	bls.n	8002046 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800202a:	6939      	ldr	r1, [r7, #16]
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f000 f94f 	bl	80022d0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2201      	movs	r2, #1
 8002036:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e071      	b.n	800212a <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f003 0320 	and.w	r3, r3, #32
 800204c:	2b00      	cmp	r3, #0
 800204e:	d0da      	beq.n	8002006 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8002050:	f107 030c 	add.w	r3, r7, #12
 8002054:	461a      	mov	r2, r3
 8002056:	211f      	movs	r1, #31
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f000 f86b 	bl	8002134 <HAL_ETH_ReadPHYRegister>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d00b      	beq.n	800207c <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002068:	6939      	ldr	r1, [r7, #16]
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 f930 	bl	80022d0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002078:	2301      	movs	r3, #1
 800207a:	e056      	b.n	800212a <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f003 0310 	and.w	r3, r3, #16
 8002082:	2b00      	cmp	r3, #0
 8002084:	d004      	beq.n	8002090 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800208c:	60da      	str	r2, [r3, #12]
 800208e:	e002      	b.n	8002096 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	2b00      	cmp	r3, #0
 800209e:	d003      	beq.n	80020a8 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	609a      	str	r2, [r3, #8]
 80020a6:	e037      	b.n	8002118 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020ae:	609a      	str	r2, [r3, #8]
 80020b0:	e032      	b.n	8002118 <HAL_ETH_Init+0x320>
 80020b2:	bf00      	nop
 80020b4:	03938700 	.word	0x03938700
 80020b8:	40023800 	.word	0x40023800
 80020bc:	40013800 	.word	0x40013800
 80020c0:	01312cff 	.word	0x01312cff
 80020c4:	02160ebf 	.word	0x02160ebf
 80020c8:	039386ff 	.word	0x039386ff
 80020cc:	05f5e0ff 	.word	0x05f5e0ff
 80020d0:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	08db      	lsrs	r3, r3, #3
 80020da:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	085b      	lsrs	r3, r3, #1
 80020e2:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80020e4:	4313      	orrs	r3, r2
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	461a      	mov	r2, r3
 80020ea:	2100      	movs	r1, #0
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f000 f889 	bl	8002204 <HAL_ETH_WritePHYRegister>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d00b      	beq.n	8002110 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80020fc:	6939      	ldr	r1, [r7, #16]
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 f8e6 	bl	80022d0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e00c      	b.n	800212a <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8002110:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002114:	f7ff fd3c 	bl	8001b90 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8002118:	6939      	ldr	r1, [r7, #16]
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f000 f8d8 	bl	80022d0 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3720      	adds	r7, #32
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop

08002134 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	460b      	mov	r3, r1
 800213e:	607a      	str	r2, [r7, #4]
 8002140:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8002142:	2300      	movs	r3, #0
 8002144:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002146:	2300      	movs	r3, #0
 8002148:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b82      	cmp	r3, #130	; 0x82
 8002154:	d101      	bne.n	800215a <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8002156:	2302      	movs	r3, #2
 8002158:	e050      	b.n	80021fc <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2282      	movs	r2, #130	; 0x82
 800215e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	f003 031c 	and.w	r3, r3, #28
 8002170:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	8a1b      	ldrh	r3, [r3, #16]
 8002176:	02db      	lsls	r3, r3, #11
 8002178:	b29b      	uxth	r3, r3
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	4313      	orrs	r3, r2
 800217e:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8002180:	897b      	ldrh	r3, [r7, #10]
 8002182:	019b      	lsls	r3, r3, #6
 8002184:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002188:	697a      	ldr	r2, [r7, #20]
 800218a:	4313      	orrs	r3, r2
 800218c:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	f023 0302 	bic.w	r3, r3, #2
 8002194:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80021a6:	f7ff fce7 	bl	8001b78 <HAL_GetTick>
 80021aa:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80021ac:	e015      	b.n	80021da <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80021ae:	f7ff fce3 	bl	8001b78 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021bc:	d309      	bcc.n	80021d2 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2201      	movs	r2, #1
 80021c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e014      	b.n	80021fc <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	691b      	ldr	r3, [r3, #16]
 80021d8:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d1e4      	bne.n	80021ae <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	461a      	mov	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2201      	movs	r2, #1
 80021f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3718      	adds	r7, #24
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	460b      	mov	r3, r1
 800220e:	607a      	str	r2, [r7, #4]
 8002210:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8002212:	2300      	movs	r3, #0
 8002214:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002216:	2300      	movs	r3, #0
 8002218:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b42      	cmp	r3, #66	; 0x42
 8002224:	d101      	bne.n	800222a <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002226:	2302      	movs	r3, #2
 8002228:	e04e      	b.n	80022c8 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2242      	movs	r2, #66	; 0x42
 800222e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	f003 031c 	and.w	r3, r3, #28
 8002240:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	8a1b      	ldrh	r3, [r3, #16]
 8002246:	02db      	lsls	r3, r3, #11
 8002248:	b29b      	uxth	r3, r3
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	4313      	orrs	r3, r2
 800224e:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002250:	897b      	ldrh	r3, [r7, #10]
 8002252:	019b      	lsls	r3, r3, #6
 8002254:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002258:	697a      	ldr	r2, [r7, #20]
 800225a:	4313      	orrs	r3, r2
 800225c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	f043 0302 	orr.w	r3, r3, #2
 8002264:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	f043 0301 	orr.w	r3, r3, #1
 800226c:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	b29a      	uxth	r2, r3
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	697a      	ldr	r2, [r7, #20]
 800227e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002280:	f7ff fc7a 	bl	8001b78 <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002286:	e015      	b.n	80022b4 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002288:	f7ff fc76 	bl	8001b78 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002296:	d309      	bcc.n	80022ac <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e00d      	b.n	80022c8 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1e4      	bne.n	8002288 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3718      	adds	r7, #24
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b0b0      	sub	sp, #192	; 0xc0
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80022da:	2300      	movs	r3, #0
 80022dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d007      	beq.n	80022f6 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022ec:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022f4:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80022f6:	2300      	movs	r3, #0
 80022f8:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80022fa:	2300      	movs	r3, #0
 80022fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80022fe:	2300      	movs	r3, #0
 8002300:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002302:	2300      	movs	r3, #0
 8002304:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002306:	2300      	movs	r3, #0
 8002308:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800230a:	2300      	movs	r3, #0
 800230c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d103      	bne.n	800231e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002316:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800231a:	663b      	str	r3, [r7, #96]	; 0x60
 800231c:	e001      	b.n	8002322 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800231e:	2300      	movs	r3, #0
 8002320:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002322:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002326:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002328:	2300      	movs	r3, #0
 800232a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800232c:	2300      	movs	r3, #0
 800232e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002330:	2300      	movs	r3, #0
 8002332:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002334:	2300      	movs	r3, #0
 8002336:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002338:	2300      	movs	r3, #0
 800233a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 800233c:	2340      	movs	r3, #64	; 0x40
 800233e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002340:	2300      	movs	r3, #0
 8002342:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002346:	2300      	movs	r3, #0
 8002348:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 800234c:	2300      	movs	r3, #0
 800234e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002352:	2300      	movs	r3, #0
 8002354:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002358:	2300      	movs	r3, #0
 800235a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 800235e:	2300      	movs	r3, #0
 8002360:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8002364:	2300      	movs	r3, #0
 8002366:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 800236a:	2300      	movs	r3, #0
 800236c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002370:	2380      	movs	r3, #128	; 0x80
 8002372:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002376:	2300      	movs	r3, #0
 8002378:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 800237c:	2300      	movs	r3, #0
 800237e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002382:	2300      	movs	r3, #0
 8002384:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002388:	2300      	movs	r3, #0
 800238a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800238e:	2300      	movs	r3, #0
 8002390:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8002394:	2300      	movs	r3, #0
 8002396:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80023a4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023a8:	4bac      	ldr	r3, [pc, #688]	; (800265c <ETH_MACDMAConfig+0x38c>)
 80023aa:	4013      	ands	r3, r2
 80023ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80023b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80023b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80023b4:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80023b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80023b8:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80023ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80023bc:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80023c2:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80023c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80023c6:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80023c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80023ca:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80023d0:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80023d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80023d4:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80023d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80023d8:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80023da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80023dc:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80023de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80023e0:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80023e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80023e4:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80023e6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023ea:	4313      	orrs	r3, r2
 80023ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023f8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002404:	2001      	movs	r0, #1
 8002406:	f7ff fbc3 	bl	8001b90 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002412:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002414:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002416:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002418:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800241a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 800241c:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800241e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002422:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002424:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002428:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800242a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800242e:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002430:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002434:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002438:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002440:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002442:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800244e:	2001      	movs	r0, #1
 8002450:	f7ff fb9e 	bl	8001b90 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800245c:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002466:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002470:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800247c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002480:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002484:	4013      	ands	r3, r2
 8002486:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800248a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800248e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002490:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002494:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002496:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800249a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 800249c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80024a0:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80024a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80024a6:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80024a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80024ac:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80024ae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80024b2:	4313      	orrs	r3, r2
 80024b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80024c0:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80024cc:	2001      	movs	r0, #1
 80024ce:	f7ff fb5f 	bl	8001b90 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80024da:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80024dc:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80024e0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	430a      	orrs	r2, r1
 80024ea:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	69db      	ldr	r3, [r3, #28]
 80024f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80024f6:	2001      	movs	r0, #1
 80024f8:	f7ff fb4a 	bl	8001b90 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002504:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002506:	2300      	movs	r3, #0
 8002508:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800250a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800250e:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002510:	2300      	movs	r3, #0
 8002512:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002514:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002518:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800251a:	2300      	movs	r3, #0
 800251c:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800251e:	2300      	movs	r3, #0
 8002520:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002522:	2300      	movs	r3, #0
 8002524:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002526:	2300      	movs	r3, #0
 8002528:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800252a:	2304      	movs	r3, #4
 800252c:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800252e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002532:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002534:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002538:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800253a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800253e:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002540:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002544:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002546:	2380      	movs	r3, #128	; 0x80
 8002548:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 800254a:	2300      	movs	r3, #0
 800254c:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800254e:	2300      	movs	r3, #0
 8002550:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800255a:	3318      	adds	r3, #24
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002562:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002566:	4b3e      	ldr	r3, [pc, #248]	; (8002660 <ETH_MACDMAConfig+0x390>)
 8002568:	4013      	ands	r3, r2
 800256a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800256e:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002570:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002572:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002574:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002576:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002578:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800257a:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 800257c:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800257e:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002580:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002582:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002584:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002586:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800258a:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800258c:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800258e:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002590:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002594:	4313      	orrs	r3, r2
 8002596:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025a2:	3318      	adds	r3, #24
 80025a4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80025a8:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025b2:	3318      	adds	r3, #24
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80025ba:	2001      	movs	r0, #1
 80025bc:	f7ff fae8 	bl	8001b90 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025c8:	3318      	adds	r3, #24
 80025ca:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80025ce:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80025d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80025d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80025d4:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80025d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80025d8:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80025da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80025dc:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80025de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80025e0:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 80025e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025e4:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80025e6:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80025e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 80025ea:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80025f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025f8:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002608:	2001      	movs	r0, #1
 800260a:	f7ff fac1 	bl	8001b90 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002616:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800261a:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d10f      	bne.n	8002644 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800262c:	331c      	adds	r3, #28
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002638:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800263c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002640:	331c      	adds	r3, #28
 8002642:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	461a      	mov	r2, r3
 800264a:	2100      	movs	r1, #0
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 f809 	bl	8002664 <ETH_MACAddressConfig>
}
 8002652:	bf00      	nop
 8002654:	37c0      	adds	r7, #192	; 0xc0
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	ff20810f 	.word	0xff20810f
 8002660:	f8de3f23 	.word	0xf8de3f23

08002664 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002664:	b480      	push	{r7}
 8002666:	b087      	sub	sp, #28
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	3305      	adds	r3, #5
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	021b      	lsls	r3, r3, #8
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	3204      	adds	r2, #4
 800267c:	7812      	ldrb	r2, [r2, #0]
 800267e:	4313      	orrs	r3, r2
 8002680:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002682:	68ba      	ldr	r2, [r7, #8]
 8002684:	4b11      	ldr	r3, [pc, #68]	; (80026cc <ETH_MACAddressConfig+0x68>)
 8002686:	4413      	add	r3, r2
 8002688:	461a      	mov	r2, r3
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	3303      	adds	r3, #3
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	061a      	lsls	r2, r3, #24
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	3302      	adds	r3, #2
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	041b      	lsls	r3, r3, #16
 800269e:	431a      	orrs	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	3301      	adds	r3, #1
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	021b      	lsls	r3, r3, #8
 80026a8:	4313      	orrs	r3, r2
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	7812      	ldrb	r2, [r2, #0]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80026b2:	68ba      	ldr	r2, [r7, #8]
 80026b4:	4b06      	ldr	r3, [pc, #24]	; (80026d0 <ETH_MACAddressConfig+0x6c>)
 80026b6:	4413      	add	r3, r2
 80026b8:	461a      	mov	r2, r3
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	6013      	str	r3, [r2, #0]
}
 80026be:	bf00      	nop
 80026c0:	371c      	adds	r7, #28
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	40028040 	.word	0x40028040
 80026d0:	40028044 	.word	0x40028044

080026d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b089      	sub	sp, #36	; 0x24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026de:	2300      	movs	r3, #0
 80026e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026e2:	2300      	movs	r3, #0
 80026e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026e6:	2300      	movs	r3, #0
 80026e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026ea:	2300      	movs	r3, #0
 80026ec:	61fb      	str	r3, [r7, #28]
 80026ee:	e177      	b.n	80029e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026f0:	2201      	movs	r2, #1
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	4013      	ands	r3, r2
 8002702:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	429a      	cmp	r2, r3
 800270a:	f040 8166 	bne.w	80029da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d00b      	beq.n	800272e <HAL_GPIO_Init+0x5a>
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2b02      	cmp	r3, #2
 800271c:	d007      	beq.n	800272e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002722:	2b11      	cmp	r3, #17
 8002724:	d003      	beq.n	800272e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b12      	cmp	r3, #18
 800272c:	d130      	bne.n	8002790 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	2203      	movs	r2, #3
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	43db      	mvns	r3, r3
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	4013      	ands	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	68da      	ldr	r2, [r3, #12]
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	fa02 f303 	lsl.w	r3, r2, r3
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	4313      	orrs	r3, r2
 8002756:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002764:	2201      	movs	r2, #1
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	43db      	mvns	r3, r3
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	4013      	ands	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	091b      	lsrs	r3, r3, #4
 800277a:	f003 0201 	and.w	r2, r3, #1
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	4313      	orrs	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	2203      	movs	r2, #3
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	43db      	mvns	r3, r3
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	4013      	ands	r3, r2
 80027a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d003      	beq.n	80027d0 <HAL_GPIO_Init+0xfc>
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	2b12      	cmp	r3, #18
 80027ce:	d123      	bne.n	8002818 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	08da      	lsrs	r2, r3, #3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	3208      	adds	r2, #8
 80027d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	f003 0307 	and.w	r3, r3, #7
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	220f      	movs	r2, #15
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	43db      	mvns	r3, r3
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	4013      	ands	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	691a      	ldr	r2, [r3, #16]
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	f003 0307 	and.w	r3, r3, #7
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	4313      	orrs	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	08da      	lsrs	r2, r3, #3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	3208      	adds	r2, #8
 8002812:	69b9      	ldr	r1, [r7, #24]
 8002814:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	2203      	movs	r2, #3
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	43db      	mvns	r3, r3
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	4013      	ands	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f003 0203 	and.w	r2, r3, #3
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	4313      	orrs	r3, r2
 8002844:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002854:	2b00      	cmp	r3, #0
 8002856:	f000 80c0 	beq.w	80029da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800285a:	2300      	movs	r3, #0
 800285c:	60fb      	str	r3, [r7, #12]
 800285e:	4b65      	ldr	r3, [pc, #404]	; (80029f4 <HAL_GPIO_Init+0x320>)
 8002860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002862:	4a64      	ldr	r2, [pc, #400]	; (80029f4 <HAL_GPIO_Init+0x320>)
 8002864:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002868:	6453      	str	r3, [r2, #68]	; 0x44
 800286a:	4b62      	ldr	r3, [pc, #392]	; (80029f4 <HAL_GPIO_Init+0x320>)
 800286c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002872:	60fb      	str	r3, [r7, #12]
 8002874:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002876:	4a60      	ldr	r2, [pc, #384]	; (80029f8 <HAL_GPIO_Init+0x324>)
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	089b      	lsrs	r3, r3, #2
 800287c:	3302      	adds	r3, #2
 800287e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002882:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	f003 0303 	and.w	r3, r3, #3
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	220f      	movs	r2, #15
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	43db      	mvns	r3, r3
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	4013      	ands	r3, r2
 8002898:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a57      	ldr	r2, [pc, #348]	; (80029fc <HAL_GPIO_Init+0x328>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d037      	beq.n	8002912 <HAL_GPIO_Init+0x23e>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a56      	ldr	r2, [pc, #344]	; (8002a00 <HAL_GPIO_Init+0x32c>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d031      	beq.n	800290e <HAL_GPIO_Init+0x23a>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a55      	ldr	r2, [pc, #340]	; (8002a04 <HAL_GPIO_Init+0x330>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d02b      	beq.n	800290a <HAL_GPIO_Init+0x236>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a54      	ldr	r2, [pc, #336]	; (8002a08 <HAL_GPIO_Init+0x334>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d025      	beq.n	8002906 <HAL_GPIO_Init+0x232>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a53      	ldr	r2, [pc, #332]	; (8002a0c <HAL_GPIO_Init+0x338>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d01f      	beq.n	8002902 <HAL_GPIO_Init+0x22e>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a52      	ldr	r2, [pc, #328]	; (8002a10 <HAL_GPIO_Init+0x33c>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d019      	beq.n	80028fe <HAL_GPIO_Init+0x22a>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a51      	ldr	r2, [pc, #324]	; (8002a14 <HAL_GPIO_Init+0x340>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d013      	beq.n	80028fa <HAL_GPIO_Init+0x226>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a50      	ldr	r2, [pc, #320]	; (8002a18 <HAL_GPIO_Init+0x344>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d00d      	beq.n	80028f6 <HAL_GPIO_Init+0x222>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a4f      	ldr	r2, [pc, #316]	; (8002a1c <HAL_GPIO_Init+0x348>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d007      	beq.n	80028f2 <HAL_GPIO_Init+0x21e>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a4e      	ldr	r2, [pc, #312]	; (8002a20 <HAL_GPIO_Init+0x34c>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d101      	bne.n	80028ee <HAL_GPIO_Init+0x21a>
 80028ea:	2309      	movs	r3, #9
 80028ec:	e012      	b.n	8002914 <HAL_GPIO_Init+0x240>
 80028ee:	230a      	movs	r3, #10
 80028f0:	e010      	b.n	8002914 <HAL_GPIO_Init+0x240>
 80028f2:	2308      	movs	r3, #8
 80028f4:	e00e      	b.n	8002914 <HAL_GPIO_Init+0x240>
 80028f6:	2307      	movs	r3, #7
 80028f8:	e00c      	b.n	8002914 <HAL_GPIO_Init+0x240>
 80028fa:	2306      	movs	r3, #6
 80028fc:	e00a      	b.n	8002914 <HAL_GPIO_Init+0x240>
 80028fe:	2305      	movs	r3, #5
 8002900:	e008      	b.n	8002914 <HAL_GPIO_Init+0x240>
 8002902:	2304      	movs	r3, #4
 8002904:	e006      	b.n	8002914 <HAL_GPIO_Init+0x240>
 8002906:	2303      	movs	r3, #3
 8002908:	e004      	b.n	8002914 <HAL_GPIO_Init+0x240>
 800290a:	2302      	movs	r3, #2
 800290c:	e002      	b.n	8002914 <HAL_GPIO_Init+0x240>
 800290e:	2301      	movs	r3, #1
 8002910:	e000      	b.n	8002914 <HAL_GPIO_Init+0x240>
 8002912:	2300      	movs	r3, #0
 8002914:	69fa      	ldr	r2, [r7, #28]
 8002916:	f002 0203 	and.w	r2, r2, #3
 800291a:	0092      	lsls	r2, r2, #2
 800291c:	4093      	lsls	r3, r2
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	4313      	orrs	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002924:	4934      	ldr	r1, [pc, #208]	; (80029f8 <HAL_GPIO_Init+0x324>)
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	089b      	lsrs	r3, r3, #2
 800292a:	3302      	adds	r3, #2
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002932:	4b3c      	ldr	r3, [pc, #240]	; (8002a24 <HAL_GPIO_Init+0x350>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	43db      	mvns	r3, r3
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	4013      	ands	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d003      	beq.n	8002956 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	4313      	orrs	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002956:	4a33      	ldr	r2, [pc, #204]	; (8002a24 <HAL_GPIO_Init+0x350>)
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800295c:	4b31      	ldr	r3, [pc, #196]	; (8002a24 <HAL_GPIO_Init+0x350>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	43db      	mvns	r3, r3
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	4013      	ands	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d003      	beq.n	8002980 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	4313      	orrs	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002980:	4a28      	ldr	r2, [pc, #160]	; (8002a24 <HAL_GPIO_Init+0x350>)
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002986:	4b27      	ldr	r3, [pc, #156]	; (8002a24 <HAL_GPIO_Init+0x350>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	43db      	mvns	r3, r3
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	4013      	ands	r3, r2
 8002994:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029aa:	4a1e      	ldr	r2, [pc, #120]	; (8002a24 <HAL_GPIO_Init+0x350>)
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029b0:	4b1c      	ldr	r3, [pc, #112]	; (8002a24 <HAL_GPIO_Init+0x350>)
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	43db      	mvns	r3, r3
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	4013      	ands	r3, r2
 80029be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d003      	beq.n	80029d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029d4:	4a13      	ldr	r2, [pc, #76]	; (8002a24 <HAL_GPIO_Init+0x350>)
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	3301      	adds	r3, #1
 80029de:	61fb      	str	r3, [r7, #28]
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	2b0f      	cmp	r3, #15
 80029e4:	f67f ae84 	bls.w	80026f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029e8:	bf00      	nop
 80029ea:	3724      	adds	r7, #36	; 0x24
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr
 80029f4:	40023800 	.word	0x40023800
 80029f8:	40013800 	.word	0x40013800
 80029fc:	40020000 	.word	0x40020000
 8002a00:	40020400 	.word	0x40020400
 8002a04:	40020800 	.word	0x40020800
 8002a08:	40020c00 	.word	0x40020c00
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	40021400 	.word	0x40021400
 8002a14:	40021800 	.word	0x40021800
 8002a18:	40021c00 	.word	0x40021c00
 8002a1c:	40022000 	.word	0x40022000
 8002a20:	40022400 	.word	0x40022400
 8002a24:	40013c00 	.word	0x40013c00

08002a28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	460b      	mov	r3, r1
 8002a32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	691a      	ldr	r2, [r3, #16]
 8002a38:	887b      	ldrh	r3, [r7, #2]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d002      	beq.n	8002a46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a40:	2301      	movs	r3, #1
 8002a42:	73fb      	strb	r3, [r7, #15]
 8002a44:	e001      	b.n	8002a4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a46:	2300      	movs	r3, #0
 8002a48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3714      	adds	r7, #20
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	460b      	mov	r3, r1
 8002a62:	807b      	strh	r3, [r7, #2]
 8002a64:	4613      	mov	r3, r2
 8002a66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a68:	787b      	ldrb	r3, [r7, #1]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d003      	beq.n	8002a76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a6e:	887a      	ldrh	r2, [r7, #2]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a74:	e003      	b.n	8002a7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a76:	887b      	ldrh	r3, [r7, #2]
 8002a78:	041a      	lsls	r2, r3, #16
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	619a      	str	r2, [r3, #24]
}
 8002a7e:	bf00      	nop
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr

08002a8a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	b083      	sub	sp, #12
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
 8002a92:	460b      	mov	r3, r1
 8002a94:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	695a      	ldr	r2, [r3, #20]
 8002a9a:	887b      	ldrh	r3, [r7, #2]
 8002a9c:	401a      	ands	r2, r3
 8002a9e:	887b      	ldrh	r3, [r7, #2]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d104      	bne.n	8002aae <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002aa4:	887b      	ldrh	r3, [r7, #2]
 8002aa6:	041a      	lsls	r2, r3, #16
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002aac:	e002      	b.n	8002ab4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002aae:	887a      	ldrh	r2, [r7, #2]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	619a      	str	r2, [r3, #24]
}
 8002ab4:	bf00      	nop
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ac2:	b08f      	sub	sp, #60	; 0x3c
 8002ac4:	af0a      	add	r7, sp, #40	; 0x28
 8002ac6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e10f      	b.n	8002cf2 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d106      	bne.n	8002af2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f7fe ff59 	bl	80019a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2203      	movs	r2, #3
 8002af6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d102      	bne.n	8002b0c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f001 fe86 	bl	8004822 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	603b      	str	r3, [r7, #0]
 8002b1c:	687e      	ldr	r6, [r7, #4]
 8002b1e:	466d      	mov	r5, sp
 8002b20:	f106 0410 	add.w	r4, r6, #16
 8002b24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b2c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b30:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b34:	1d33      	adds	r3, r6, #4
 8002b36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b38:	6838      	ldr	r0, [r7, #0]
 8002b3a:	f001 fe11 	bl	8004760 <USB_CoreInit>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d005      	beq.n	8002b50 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2202      	movs	r2, #2
 8002b48:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e0d0      	b.n	8002cf2 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2100      	movs	r1, #0
 8002b56:	4618      	mov	r0, r3
 8002b58:	f001 fe74 	bl	8004844 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	73fb      	strb	r3, [r7, #15]
 8002b60:	e04a      	b.n	8002bf8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b62:	7bfa      	ldrb	r2, [r7, #15]
 8002b64:	6879      	ldr	r1, [r7, #4]
 8002b66:	4613      	mov	r3, r2
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	1a9b      	subs	r3, r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	440b      	add	r3, r1
 8002b70:	333d      	adds	r3, #61	; 0x3d
 8002b72:	2201      	movs	r2, #1
 8002b74:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b76:	7bfa      	ldrb	r2, [r7, #15]
 8002b78:	6879      	ldr	r1, [r7, #4]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	1a9b      	subs	r3, r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	440b      	add	r3, r1
 8002b84:	333c      	adds	r3, #60	; 0x3c
 8002b86:	7bfa      	ldrb	r2, [r7, #15]
 8002b88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b8a:	7bfa      	ldrb	r2, [r7, #15]
 8002b8c:	7bfb      	ldrb	r3, [r7, #15]
 8002b8e:	b298      	uxth	r0, r3
 8002b90:	6879      	ldr	r1, [r7, #4]
 8002b92:	4613      	mov	r3, r2
 8002b94:	00db      	lsls	r3, r3, #3
 8002b96:	1a9b      	subs	r3, r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	440b      	add	r3, r1
 8002b9c:	3342      	adds	r3, #66	; 0x42
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ba2:	7bfa      	ldrb	r2, [r7, #15]
 8002ba4:	6879      	ldr	r1, [r7, #4]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	1a9b      	subs	r3, r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	440b      	add	r3, r1
 8002bb0:	333f      	adds	r3, #63	; 0x3f
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002bb6:	7bfa      	ldrb	r2, [r7, #15]
 8002bb8:	6879      	ldr	r1, [r7, #4]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	1a9b      	subs	r3, r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	440b      	add	r3, r1
 8002bc4:	3344      	adds	r3, #68	; 0x44
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002bca:	7bfa      	ldrb	r2, [r7, #15]
 8002bcc:	6879      	ldr	r1, [r7, #4]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	1a9b      	subs	r3, r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	440b      	add	r3, r1
 8002bd8:	3348      	adds	r3, #72	; 0x48
 8002bda:	2200      	movs	r2, #0
 8002bdc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002bde:	7bfa      	ldrb	r2, [r7, #15]
 8002be0:	6879      	ldr	r1, [r7, #4]
 8002be2:	4613      	mov	r3, r2
 8002be4:	00db      	lsls	r3, r3, #3
 8002be6:	1a9b      	subs	r3, r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	440b      	add	r3, r1
 8002bec:	3350      	adds	r3, #80	; 0x50
 8002bee:	2200      	movs	r2, #0
 8002bf0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bf2:	7bfb      	ldrb	r3, [r7, #15]
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	73fb      	strb	r3, [r7, #15]
 8002bf8:	7bfa      	ldrb	r2, [r7, #15]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d3af      	bcc.n	8002b62 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c02:	2300      	movs	r3, #0
 8002c04:	73fb      	strb	r3, [r7, #15]
 8002c06:	e044      	b.n	8002c92 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c08:	7bfa      	ldrb	r2, [r7, #15]
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	1a9b      	subs	r3, r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	440b      	add	r3, r1
 8002c16:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c1e:	7bfa      	ldrb	r2, [r7, #15]
 8002c20:	6879      	ldr	r1, [r7, #4]
 8002c22:	4613      	mov	r3, r2
 8002c24:	00db      	lsls	r3, r3, #3
 8002c26:	1a9b      	subs	r3, r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	440b      	add	r3, r1
 8002c2c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002c30:	7bfa      	ldrb	r2, [r7, #15]
 8002c32:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c34:	7bfa      	ldrb	r2, [r7, #15]
 8002c36:	6879      	ldr	r1, [r7, #4]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	1a9b      	subs	r3, r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	440b      	add	r3, r1
 8002c42:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002c46:	2200      	movs	r2, #0
 8002c48:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c4a:	7bfa      	ldrb	r2, [r7, #15]
 8002c4c:	6879      	ldr	r1, [r7, #4]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	1a9b      	subs	r3, r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	440b      	add	r3, r1
 8002c58:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c60:	7bfa      	ldrb	r2, [r7, #15]
 8002c62:	6879      	ldr	r1, [r7, #4]
 8002c64:	4613      	mov	r3, r2
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	1a9b      	subs	r3, r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	440b      	add	r3, r1
 8002c6e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002c72:	2200      	movs	r2, #0
 8002c74:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c76:	7bfa      	ldrb	r2, [r7, #15]
 8002c78:	6879      	ldr	r1, [r7, #4]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	1a9b      	subs	r3, r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	440b      	add	r3, r1
 8002c84:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002c88:	2200      	movs	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c8c:	7bfb      	ldrb	r3, [r7, #15]
 8002c8e:	3301      	adds	r3, #1
 8002c90:	73fb      	strb	r3, [r7, #15]
 8002c92:	7bfa      	ldrb	r2, [r7, #15]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d3b5      	bcc.n	8002c08 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	603b      	str	r3, [r7, #0]
 8002ca2:	687e      	ldr	r6, [r7, #4]
 8002ca4:	466d      	mov	r5, sp
 8002ca6:	f106 0410 	add.w	r4, r6, #16
 8002caa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cb2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002cb6:	e885 0003 	stmia.w	r5, {r0, r1}
 8002cba:	1d33      	adds	r3, r6, #4
 8002cbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cbe:	6838      	ldr	r0, [r7, #0]
 8002cc0:	f001 fdea 	bl	8004898 <USB_DevInit>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d005      	beq.n	8002cd6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2202      	movs	r2, #2
 8002cce:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e00d      	b.n	8002cf2 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f001 ffa7 	bl	8004c3e <USB_DevDisconnect>

  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3714      	adds	r7, #20
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002cfc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e25b      	b.n	80031c6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d075      	beq.n	8002e06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d1a:	4ba3      	ldr	r3, [pc, #652]	; (8002fa8 <HAL_RCC_OscConfig+0x2ac>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 030c 	and.w	r3, r3, #12
 8002d22:	2b04      	cmp	r3, #4
 8002d24:	d00c      	beq.n	8002d40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d26:	4ba0      	ldr	r3, [pc, #640]	; (8002fa8 <HAL_RCC_OscConfig+0x2ac>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d2e:	2b08      	cmp	r3, #8
 8002d30:	d112      	bne.n	8002d58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d32:	4b9d      	ldr	r3, [pc, #628]	; (8002fa8 <HAL_RCC_OscConfig+0x2ac>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d3e:	d10b      	bne.n	8002d58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d40:	4b99      	ldr	r3, [pc, #612]	; (8002fa8 <HAL_RCC_OscConfig+0x2ac>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d05b      	beq.n	8002e04 <HAL_RCC_OscConfig+0x108>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d157      	bne.n	8002e04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e236      	b.n	80031c6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d60:	d106      	bne.n	8002d70 <HAL_RCC_OscConfig+0x74>
 8002d62:	4b91      	ldr	r3, [pc, #580]	; (8002fa8 <HAL_RCC_OscConfig+0x2ac>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a90      	ldr	r2, [pc, #576]	; (8002fa8 <HAL_RCC_OscConfig+0x2ac>)
 8002d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d6c:	6013      	str	r3, [r2, #0]
 8002d6e:	e01d      	b.n	8002dac <HAL_RCC_OscConfig+0xb0>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d78:	d10c      	bne.n	8002d94 <HAL_RCC_OscConfig+0x98>
 8002d7a:	4b8b      	ldr	r3, [pc, #556]	; (8002fa8 <HAL_RCC_OscConfig+0x2ac>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a8a      	ldr	r2, [pc, #552]	; (8002fa8 <HAL_RCC_OscConfig+0x2ac>)
 8002d80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d84:	6013      	str	r3, [r2, #0]
 8002d86:	4b88      	ldr	r3, [pc, #544]	; (8002fa8 <HAL_RCC_OscConfig+0x2ac>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a87      	ldr	r2, [pc, #540]	; (8002fa8 <HAL_RCC_OscConfig+0x2ac>)
 8002d8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d90:	6013      	str	r3, [r2, #0]
 8002d92:	e00b      	b.n	8002dac <HAL_RCC_OscConfig+0xb0>
 8002d94:	4b84      	ldr	r3, [pc, #528]	; (8002fa8 <HAL_RCC_OscConfig+0x2ac>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a83      	ldr	r2, [pc, #524]	; (8002fa8 <HAL_RCC_OscConfig+0x2ac>)
 8002d9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d9e:	6013      	str	r3, [r2, #0]
 8002da0:	4b81      	ldr	r3, [pc, #516]	; (8002fa8 <HAL_RCC_OscConfig+0x2ac>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a80      	ldr	r2, [pc, #512]	; (8002fa8 <HAL_RCC_OscConfig+0x2ac>)
 8002da6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002daa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d013      	beq.n	8002ddc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db4:	f7fe fee0 	bl	8001b78 <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dbc:	f7fe fedc 	bl	8001b78 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b64      	cmp	r3, #100	; 0x64
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e1fb      	b.n	80031c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dce:	4b76      	ldr	r3, [pc, #472]	; (8002fa8 <HAL_RCC_OscConfig+0x2ac>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d0f0      	beq.n	8002dbc <HAL_RCC_OscConfig+0xc0>
 8002dda:	e014      	b.n	8002e06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ddc:	f7fe fecc 	bl	8001b78 <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002de4:	f7fe fec8 	bl	8001b78 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b64      	cmp	r3, #100	; 0x64
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e1e7      	b.n	80031c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002df6:	4b6c      	ldr	r3, [pc, #432]	; (8002fa8 <HAL_RCC_OscConfig+0x2ac>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1f0      	bne.n	8002de4 <HAL_RCC_OscConfig+0xe8>
 8002e02:	e000      	b.n	8002e06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d063      	beq.n	8002eda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e12:	4b65      	ldr	r3, [pc, #404]	; (8002fa8 <HAL_RCC_OscConfig+0x2ac>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f003 030c 	and.w	r3, r3, #12
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00b      	beq.n	8002e36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e1e:	4b62      	ldr	r3, [pc, #392]	; (8002fa8 <HAL_RCC_OscConfig+0x2ac>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e26:	2b08      	cmp	r3, #8
 8002e28:	d11c      	bne.n	8002e64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e2a:	4b5f      	ldr	r3, [pc, #380]	; (8002fa8 <HAL_RCC_OscConfig+0x2ac>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d116      	bne.n	8002e64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e36:	4b5c      	ldr	r3, [pc, #368]	; (8002fa8 <HAL_RCC_OscConfig+0x2ac>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d005      	beq.n	8002e4e <HAL_RCC_OscConfig+0x152>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d001      	beq.n	8002e4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e1bb      	b.n	80031c6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e4e:	4b56      	ldr	r3, [pc, #344]	; (8002fa8 <HAL_RCC_OscConfig+0x2ac>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	4952      	ldr	r1, [pc, #328]	; (8002fa8 <HAL_RCC_OscConfig+0x2ac>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e62:	e03a      	b.n	8002eda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d020      	beq.n	8002eae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e6c:	4b4f      	ldr	r3, [pc, #316]	; (8002fac <HAL_RCC_OscConfig+0x2b0>)
 8002e6e:	2201      	movs	r2, #1
 8002e70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e72:	f7fe fe81 	bl	8001b78 <HAL_GetTick>
 8002e76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e78:	e008      	b.n	8002e8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e7a:	f7fe fe7d 	bl	8001b78 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e19c      	b.n	80031c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e8c:	4b46      	ldr	r3, [pc, #280]	; (8002fa8 <HAL_RCC_OscConfig+0x2ac>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d0f0      	beq.n	8002e7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e98:	4b43      	ldr	r3, [pc, #268]	; (8002fa8 <HAL_RCC_OscConfig+0x2ac>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	4940      	ldr	r1, [pc, #256]	; (8002fa8 <HAL_RCC_OscConfig+0x2ac>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	600b      	str	r3, [r1, #0]
 8002eac:	e015      	b.n	8002eda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eae:	4b3f      	ldr	r3, [pc, #252]	; (8002fac <HAL_RCC_OscConfig+0x2b0>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb4:	f7fe fe60 	bl	8001b78 <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eba:	e008      	b.n	8002ece <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ebc:	f7fe fe5c 	bl	8001b78 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e17b      	b.n	80031c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ece:	4b36      	ldr	r3, [pc, #216]	; (8002fa8 <HAL_RCC_OscConfig+0x2ac>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1f0      	bne.n	8002ebc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0308 	and.w	r3, r3, #8
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d030      	beq.n	8002f48 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d016      	beq.n	8002f1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eee:	4b30      	ldr	r3, [pc, #192]	; (8002fb0 <HAL_RCC_OscConfig+0x2b4>)
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef4:	f7fe fe40 	bl	8001b78 <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002efa:	e008      	b.n	8002f0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002efc:	f7fe fe3c 	bl	8001b78 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e15b      	b.n	80031c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f0e:	4b26      	ldr	r3, [pc, #152]	; (8002fa8 <HAL_RCC_OscConfig+0x2ac>)
 8002f10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d0f0      	beq.n	8002efc <HAL_RCC_OscConfig+0x200>
 8002f1a:	e015      	b.n	8002f48 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f1c:	4b24      	ldr	r3, [pc, #144]	; (8002fb0 <HAL_RCC_OscConfig+0x2b4>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f22:	f7fe fe29 	bl	8001b78 <HAL_GetTick>
 8002f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f28:	e008      	b.n	8002f3c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f2a:	f7fe fe25 	bl	8001b78 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d901      	bls.n	8002f3c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e144      	b.n	80031c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f3c:	4b1a      	ldr	r3, [pc, #104]	; (8002fa8 <HAL_RCC_OscConfig+0x2ac>)
 8002f3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1f0      	bne.n	8002f2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0304 	and.w	r3, r3, #4
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f000 80a0 	beq.w	8003096 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f56:	2300      	movs	r3, #0
 8002f58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f5a:	4b13      	ldr	r3, [pc, #76]	; (8002fa8 <HAL_RCC_OscConfig+0x2ac>)
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d10f      	bne.n	8002f86 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f66:	2300      	movs	r3, #0
 8002f68:	60bb      	str	r3, [r7, #8]
 8002f6a:	4b0f      	ldr	r3, [pc, #60]	; (8002fa8 <HAL_RCC_OscConfig+0x2ac>)
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6e:	4a0e      	ldr	r2, [pc, #56]	; (8002fa8 <HAL_RCC_OscConfig+0x2ac>)
 8002f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f74:	6413      	str	r3, [r2, #64]	; 0x40
 8002f76:	4b0c      	ldr	r3, [pc, #48]	; (8002fa8 <HAL_RCC_OscConfig+0x2ac>)
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f7e:	60bb      	str	r3, [r7, #8]
 8002f80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f82:	2301      	movs	r3, #1
 8002f84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f86:	4b0b      	ldr	r3, [pc, #44]	; (8002fb4 <HAL_RCC_OscConfig+0x2b8>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d121      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f92:	4b08      	ldr	r3, [pc, #32]	; (8002fb4 <HAL_RCC_OscConfig+0x2b8>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a07      	ldr	r2, [pc, #28]	; (8002fb4 <HAL_RCC_OscConfig+0x2b8>)
 8002f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f9e:	f7fe fdeb 	bl	8001b78 <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa4:	e011      	b.n	8002fca <HAL_RCC_OscConfig+0x2ce>
 8002fa6:	bf00      	nop
 8002fa8:	40023800 	.word	0x40023800
 8002fac:	42470000 	.word	0x42470000
 8002fb0:	42470e80 	.word	0x42470e80
 8002fb4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fb8:	f7fe fdde 	bl	8001b78 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e0fd      	b.n	80031c6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fca:	4b81      	ldr	r3, [pc, #516]	; (80031d0 <HAL_RCC_OscConfig+0x4d4>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d0f0      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d106      	bne.n	8002fec <HAL_RCC_OscConfig+0x2f0>
 8002fde:	4b7d      	ldr	r3, [pc, #500]	; (80031d4 <HAL_RCC_OscConfig+0x4d8>)
 8002fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe2:	4a7c      	ldr	r2, [pc, #496]	; (80031d4 <HAL_RCC_OscConfig+0x4d8>)
 8002fe4:	f043 0301 	orr.w	r3, r3, #1
 8002fe8:	6713      	str	r3, [r2, #112]	; 0x70
 8002fea:	e01c      	b.n	8003026 <HAL_RCC_OscConfig+0x32a>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	2b05      	cmp	r3, #5
 8002ff2:	d10c      	bne.n	800300e <HAL_RCC_OscConfig+0x312>
 8002ff4:	4b77      	ldr	r3, [pc, #476]	; (80031d4 <HAL_RCC_OscConfig+0x4d8>)
 8002ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff8:	4a76      	ldr	r2, [pc, #472]	; (80031d4 <HAL_RCC_OscConfig+0x4d8>)
 8002ffa:	f043 0304 	orr.w	r3, r3, #4
 8002ffe:	6713      	str	r3, [r2, #112]	; 0x70
 8003000:	4b74      	ldr	r3, [pc, #464]	; (80031d4 <HAL_RCC_OscConfig+0x4d8>)
 8003002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003004:	4a73      	ldr	r2, [pc, #460]	; (80031d4 <HAL_RCC_OscConfig+0x4d8>)
 8003006:	f043 0301 	orr.w	r3, r3, #1
 800300a:	6713      	str	r3, [r2, #112]	; 0x70
 800300c:	e00b      	b.n	8003026 <HAL_RCC_OscConfig+0x32a>
 800300e:	4b71      	ldr	r3, [pc, #452]	; (80031d4 <HAL_RCC_OscConfig+0x4d8>)
 8003010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003012:	4a70      	ldr	r2, [pc, #448]	; (80031d4 <HAL_RCC_OscConfig+0x4d8>)
 8003014:	f023 0301 	bic.w	r3, r3, #1
 8003018:	6713      	str	r3, [r2, #112]	; 0x70
 800301a:	4b6e      	ldr	r3, [pc, #440]	; (80031d4 <HAL_RCC_OscConfig+0x4d8>)
 800301c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800301e:	4a6d      	ldr	r2, [pc, #436]	; (80031d4 <HAL_RCC_OscConfig+0x4d8>)
 8003020:	f023 0304 	bic.w	r3, r3, #4
 8003024:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d015      	beq.n	800305a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800302e:	f7fe fda3 	bl	8001b78 <HAL_GetTick>
 8003032:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003034:	e00a      	b.n	800304c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003036:	f7fe fd9f 	bl	8001b78 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	f241 3288 	movw	r2, #5000	; 0x1388
 8003044:	4293      	cmp	r3, r2
 8003046:	d901      	bls.n	800304c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e0bc      	b.n	80031c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800304c:	4b61      	ldr	r3, [pc, #388]	; (80031d4 <HAL_RCC_OscConfig+0x4d8>)
 800304e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003050:	f003 0302 	and.w	r3, r3, #2
 8003054:	2b00      	cmp	r3, #0
 8003056:	d0ee      	beq.n	8003036 <HAL_RCC_OscConfig+0x33a>
 8003058:	e014      	b.n	8003084 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800305a:	f7fe fd8d 	bl	8001b78 <HAL_GetTick>
 800305e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003060:	e00a      	b.n	8003078 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003062:	f7fe fd89 	bl	8001b78 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003070:	4293      	cmp	r3, r2
 8003072:	d901      	bls.n	8003078 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e0a6      	b.n	80031c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003078:	4b56      	ldr	r3, [pc, #344]	; (80031d4 <HAL_RCC_OscConfig+0x4d8>)
 800307a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1ee      	bne.n	8003062 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003084:	7dfb      	ldrb	r3, [r7, #23]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d105      	bne.n	8003096 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800308a:	4b52      	ldr	r3, [pc, #328]	; (80031d4 <HAL_RCC_OscConfig+0x4d8>)
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	4a51      	ldr	r2, [pc, #324]	; (80031d4 <HAL_RCC_OscConfig+0x4d8>)
 8003090:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003094:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	2b00      	cmp	r3, #0
 800309c:	f000 8092 	beq.w	80031c4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030a0:	4b4c      	ldr	r3, [pc, #304]	; (80031d4 <HAL_RCC_OscConfig+0x4d8>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f003 030c 	and.w	r3, r3, #12
 80030a8:	2b08      	cmp	r3, #8
 80030aa:	d05c      	beq.n	8003166 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d141      	bne.n	8003138 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030b4:	4b48      	ldr	r3, [pc, #288]	; (80031d8 <HAL_RCC_OscConfig+0x4dc>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ba:	f7fe fd5d 	bl	8001b78 <HAL_GetTick>
 80030be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030c0:	e008      	b.n	80030d4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030c2:	f7fe fd59 	bl	8001b78 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d901      	bls.n	80030d4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e078      	b.n	80031c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030d4:	4b3f      	ldr	r3, [pc, #252]	; (80031d4 <HAL_RCC_OscConfig+0x4d8>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d1f0      	bne.n	80030c2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	69da      	ldr	r2, [r3, #28]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a1b      	ldr	r3, [r3, #32]
 80030e8:	431a      	orrs	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ee:	019b      	lsls	r3, r3, #6
 80030f0:	431a      	orrs	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f6:	085b      	lsrs	r3, r3, #1
 80030f8:	3b01      	subs	r3, #1
 80030fa:	041b      	lsls	r3, r3, #16
 80030fc:	431a      	orrs	r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003102:	061b      	lsls	r3, r3, #24
 8003104:	4933      	ldr	r1, [pc, #204]	; (80031d4 <HAL_RCC_OscConfig+0x4d8>)
 8003106:	4313      	orrs	r3, r2
 8003108:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800310a:	4b33      	ldr	r3, [pc, #204]	; (80031d8 <HAL_RCC_OscConfig+0x4dc>)
 800310c:	2201      	movs	r2, #1
 800310e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003110:	f7fe fd32 	bl	8001b78 <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003118:	f7fe fd2e 	bl	8001b78 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e04d      	b.n	80031c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800312a:	4b2a      	ldr	r3, [pc, #168]	; (80031d4 <HAL_RCC_OscConfig+0x4d8>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d0f0      	beq.n	8003118 <HAL_RCC_OscConfig+0x41c>
 8003136:	e045      	b.n	80031c4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003138:	4b27      	ldr	r3, [pc, #156]	; (80031d8 <HAL_RCC_OscConfig+0x4dc>)
 800313a:	2200      	movs	r2, #0
 800313c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800313e:	f7fe fd1b 	bl	8001b78 <HAL_GetTick>
 8003142:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003144:	e008      	b.n	8003158 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003146:	f7fe fd17 	bl	8001b78 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d901      	bls.n	8003158 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e036      	b.n	80031c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003158:	4b1e      	ldr	r3, [pc, #120]	; (80031d4 <HAL_RCC_OscConfig+0x4d8>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1f0      	bne.n	8003146 <HAL_RCC_OscConfig+0x44a>
 8003164:	e02e      	b.n	80031c4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d101      	bne.n	8003172 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e029      	b.n	80031c6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003172:	4b18      	ldr	r3, [pc, #96]	; (80031d4 <HAL_RCC_OscConfig+0x4d8>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	429a      	cmp	r2, r3
 8003184:	d11c      	bne.n	80031c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003190:	429a      	cmp	r2, r3
 8003192:	d115      	bne.n	80031c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800319a:	4013      	ands	r3, r2
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d10d      	bne.n	80031c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d106      	bne.n	80031c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80031bc:	429a      	cmp	r2, r3
 80031be:	d001      	beq.n	80031c4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e000      	b.n	80031c6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3718      	adds	r7, #24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	40007000 	.word	0x40007000
 80031d4:	40023800 	.word	0x40023800
 80031d8:	42470060 	.word	0x42470060

080031dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d101      	bne.n	80031f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e0cc      	b.n	800338a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031f0:	4b68      	ldr	r3, [pc, #416]	; (8003394 <HAL_RCC_ClockConfig+0x1b8>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 030f 	and.w	r3, r3, #15
 80031f8:	683a      	ldr	r2, [r7, #0]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d90c      	bls.n	8003218 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031fe:	4b65      	ldr	r3, [pc, #404]	; (8003394 <HAL_RCC_ClockConfig+0x1b8>)
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	b2d2      	uxtb	r2, r2
 8003204:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003206:	4b63      	ldr	r3, [pc, #396]	; (8003394 <HAL_RCC_ClockConfig+0x1b8>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 030f 	and.w	r3, r3, #15
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	429a      	cmp	r2, r3
 8003212:	d001      	beq.n	8003218 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e0b8      	b.n	800338a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d020      	beq.n	8003266 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0304 	and.w	r3, r3, #4
 800322c:	2b00      	cmp	r3, #0
 800322e:	d005      	beq.n	800323c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003230:	4b59      	ldr	r3, [pc, #356]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	4a58      	ldr	r2, [pc, #352]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 8003236:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800323a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0308 	and.w	r3, r3, #8
 8003244:	2b00      	cmp	r3, #0
 8003246:	d005      	beq.n	8003254 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003248:	4b53      	ldr	r3, [pc, #332]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	4a52      	ldr	r2, [pc, #328]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 800324e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003252:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003254:	4b50      	ldr	r3, [pc, #320]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	494d      	ldr	r1, [pc, #308]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 8003262:	4313      	orrs	r3, r2
 8003264:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	2b00      	cmp	r3, #0
 8003270:	d044      	beq.n	80032fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d107      	bne.n	800328a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327a:	4b47      	ldr	r3, [pc, #284]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d119      	bne.n	80032ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e07f      	b.n	800338a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	2b02      	cmp	r3, #2
 8003290:	d003      	beq.n	800329a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003296:	2b03      	cmp	r3, #3
 8003298:	d107      	bne.n	80032aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800329a:	4b3f      	ldr	r3, [pc, #252]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d109      	bne.n	80032ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e06f      	b.n	800338a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032aa:	4b3b      	ldr	r3, [pc, #236]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e067      	b.n	800338a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032ba:	4b37      	ldr	r3, [pc, #220]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f023 0203 	bic.w	r2, r3, #3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	4934      	ldr	r1, [pc, #208]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032cc:	f7fe fc54 	bl	8001b78 <HAL_GetTick>
 80032d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032d2:	e00a      	b.n	80032ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032d4:	f7fe fc50 	bl	8001b78 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e04f      	b.n	800338a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ea:	4b2b      	ldr	r3, [pc, #172]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f003 020c 	and.w	r2, r3, #12
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d1eb      	bne.n	80032d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032fc:	4b25      	ldr	r3, [pc, #148]	; (8003394 <HAL_RCC_ClockConfig+0x1b8>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 030f 	and.w	r3, r3, #15
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	429a      	cmp	r2, r3
 8003308:	d20c      	bcs.n	8003324 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800330a:	4b22      	ldr	r3, [pc, #136]	; (8003394 <HAL_RCC_ClockConfig+0x1b8>)
 800330c:	683a      	ldr	r2, [r7, #0]
 800330e:	b2d2      	uxtb	r2, r2
 8003310:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003312:	4b20      	ldr	r3, [pc, #128]	; (8003394 <HAL_RCC_ClockConfig+0x1b8>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 030f 	and.w	r3, r3, #15
 800331a:	683a      	ldr	r2, [r7, #0]
 800331c:	429a      	cmp	r2, r3
 800331e:	d001      	beq.n	8003324 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e032      	b.n	800338a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0304 	and.w	r3, r3, #4
 800332c:	2b00      	cmp	r3, #0
 800332e:	d008      	beq.n	8003342 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003330:	4b19      	ldr	r3, [pc, #100]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	4916      	ldr	r1, [pc, #88]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 800333e:	4313      	orrs	r3, r2
 8003340:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0308 	and.w	r3, r3, #8
 800334a:	2b00      	cmp	r3, #0
 800334c:	d009      	beq.n	8003362 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800334e:	4b12      	ldr	r3, [pc, #72]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	490e      	ldr	r1, [pc, #56]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 800335e:	4313      	orrs	r3, r2
 8003360:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003362:	f000 f821 	bl	80033a8 <HAL_RCC_GetSysClockFreq>
 8003366:	4601      	mov	r1, r0
 8003368:	4b0b      	ldr	r3, [pc, #44]	; (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	091b      	lsrs	r3, r3, #4
 800336e:	f003 030f 	and.w	r3, r3, #15
 8003372:	4a0a      	ldr	r2, [pc, #40]	; (800339c <HAL_RCC_ClockConfig+0x1c0>)
 8003374:	5cd3      	ldrb	r3, [r2, r3]
 8003376:	fa21 f303 	lsr.w	r3, r1, r3
 800337a:	4a09      	ldr	r2, [pc, #36]	; (80033a0 <HAL_RCC_ClockConfig+0x1c4>)
 800337c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800337e:	4b09      	ldr	r3, [pc, #36]	; (80033a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4618      	mov	r0, r3
 8003384:	f7fe fbb4 	bl	8001af0 <HAL_InitTick>

  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	40023c00 	.word	0x40023c00
 8003398:	40023800 	.word	0x40023800
 800339c:	08005628 	.word	0x08005628
 80033a0:	20000000 	.word	0x20000000
 80033a4:	20000004 	.word	0x20000004

080033a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033aa:	b085      	sub	sp, #20
 80033ac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033ae:	2300      	movs	r3, #0
 80033b0:	607b      	str	r3, [r7, #4]
 80033b2:	2300      	movs	r3, #0
 80033b4:	60fb      	str	r3, [r7, #12]
 80033b6:	2300      	movs	r3, #0
 80033b8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80033ba:	2300      	movs	r3, #0
 80033bc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033be:	4b63      	ldr	r3, [pc, #396]	; (800354c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f003 030c 	and.w	r3, r3, #12
 80033c6:	2b04      	cmp	r3, #4
 80033c8:	d007      	beq.n	80033da <HAL_RCC_GetSysClockFreq+0x32>
 80033ca:	2b08      	cmp	r3, #8
 80033cc:	d008      	beq.n	80033e0 <HAL_RCC_GetSysClockFreq+0x38>
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f040 80b4 	bne.w	800353c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033d4:	4b5e      	ldr	r3, [pc, #376]	; (8003550 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80033d6:	60bb      	str	r3, [r7, #8]
       break;
 80033d8:	e0b3      	b.n	8003542 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033da:	4b5e      	ldr	r3, [pc, #376]	; (8003554 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80033dc:	60bb      	str	r3, [r7, #8]
      break;
 80033de:	e0b0      	b.n	8003542 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033e0:	4b5a      	ldr	r3, [pc, #360]	; (800354c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033e8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033ea:	4b58      	ldr	r3, [pc, #352]	; (800354c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d04a      	beq.n	800348c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033f6:	4b55      	ldr	r3, [pc, #340]	; (800354c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	099b      	lsrs	r3, r3, #6
 80033fc:	f04f 0400 	mov.w	r4, #0
 8003400:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003404:	f04f 0200 	mov.w	r2, #0
 8003408:	ea03 0501 	and.w	r5, r3, r1
 800340c:	ea04 0602 	and.w	r6, r4, r2
 8003410:	4629      	mov	r1, r5
 8003412:	4632      	mov	r2, r6
 8003414:	f04f 0300 	mov.w	r3, #0
 8003418:	f04f 0400 	mov.w	r4, #0
 800341c:	0154      	lsls	r4, r2, #5
 800341e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003422:	014b      	lsls	r3, r1, #5
 8003424:	4619      	mov	r1, r3
 8003426:	4622      	mov	r2, r4
 8003428:	1b49      	subs	r1, r1, r5
 800342a:	eb62 0206 	sbc.w	r2, r2, r6
 800342e:	f04f 0300 	mov.w	r3, #0
 8003432:	f04f 0400 	mov.w	r4, #0
 8003436:	0194      	lsls	r4, r2, #6
 8003438:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800343c:	018b      	lsls	r3, r1, #6
 800343e:	1a5b      	subs	r3, r3, r1
 8003440:	eb64 0402 	sbc.w	r4, r4, r2
 8003444:	f04f 0100 	mov.w	r1, #0
 8003448:	f04f 0200 	mov.w	r2, #0
 800344c:	00e2      	lsls	r2, r4, #3
 800344e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003452:	00d9      	lsls	r1, r3, #3
 8003454:	460b      	mov	r3, r1
 8003456:	4614      	mov	r4, r2
 8003458:	195b      	adds	r3, r3, r5
 800345a:	eb44 0406 	adc.w	r4, r4, r6
 800345e:	f04f 0100 	mov.w	r1, #0
 8003462:	f04f 0200 	mov.w	r2, #0
 8003466:	0262      	lsls	r2, r4, #9
 8003468:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800346c:	0259      	lsls	r1, r3, #9
 800346e:	460b      	mov	r3, r1
 8003470:	4614      	mov	r4, r2
 8003472:	4618      	mov	r0, r3
 8003474:	4621      	mov	r1, r4
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f04f 0400 	mov.w	r4, #0
 800347c:	461a      	mov	r2, r3
 800347e:	4623      	mov	r3, r4
 8003480:	f7fd f8b8 	bl	80005f4 <__aeabi_uldivmod>
 8003484:	4603      	mov	r3, r0
 8003486:	460c      	mov	r4, r1
 8003488:	60fb      	str	r3, [r7, #12]
 800348a:	e049      	b.n	8003520 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800348c:	4b2f      	ldr	r3, [pc, #188]	; (800354c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	099b      	lsrs	r3, r3, #6
 8003492:	f04f 0400 	mov.w	r4, #0
 8003496:	f240 11ff 	movw	r1, #511	; 0x1ff
 800349a:	f04f 0200 	mov.w	r2, #0
 800349e:	ea03 0501 	and.w	r5, r3, r1
 80034a2:	ea04 0602 	and.w	r6, r4, r2
 80034a6:	4629      	mov	r1, r5
 80034a8:	4632      	mov	r2, r6
 80034aa:	f04f 0300 	mov.w	r3, #0
 80034ae:	f04f 0400 	mov.w	r4, #0
 80034b2:	0154      	lsls	r4, r2, #5
 80034b4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80034b8:	014b      	lsls	r3, r1, #5
 80034ba:	4619      	mov	r1, r3
 80034bc:	4622      	mov	r2, r4
 80034be:	1b49      	subs	r1, r1, r5
 80034c0:	eb62 0206 	sbc.w	r2, r2, r6
 80034c4:	f04f 0300 	mov.w	r3, #0
 80034c8:	f04f 0400 	mov.w	r4, #0
 80034cc:	0194      	lsls	r4, r2, #6
 80034ce:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80034d2:	018b      	lsls	r3, r1, #6
 80034d4:	1a5b      	subs	r3, r3, r1
 80034d6:	eb64 0402 	sbc.w	r4, r4, r2
 80034da:	f04f 0100 	mov.w	r1, #0
 80034de:	f04f 0200 	mov.w	r2, #0
 80034e2:	00e2      	lsls	r2, r4, #3
 80034e4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80034e8:	00d9      	lsls	r1, r3, #3
 80034ea:	460b      	mov	r3, r1
 80034ec:	4614      	mov	r4, r2
 80034ee:	195b      	adds	r3, r3, r5
 80034f0:	eb44 0406 	adc.w	r4, r4, r6
 80034f4:	f04f 0100 	mov.w	r1, #0
 80034f8:	f04f 0200 	mov.w	r2, #0
 80034fc:	02a2      	lsls	r2, r4, #10
 80034fe:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003502:	0299      	lsls	r1, r3, #10
 8003504:	460b      	mov	r3, r1
 8003506:	4614      	mov	r4, r2
 8003508:	4618      	mov	r0, r3
 800350a:	4621      	mov	r1, r4
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f04f 0400 	mov.w	r4, #0
 8003512:	461a      	mov	r2, r3
 8003514:	4623      	mov	r3, r4
 8003516:	f7fd f86d 	bl	80005f4 <__aeabi_uldivmod>
 800351a:	4603      	mov	r3, r0
 800351c:	460c      	mov	r4, r1
 800351e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003520:	4b0a      	ldr	r3, [pc, #40]	; (800354c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	0c1b      	lsrs	r3, r3, #16
 8003526:	f003 0303 	and.w	r3, r3, #3
 800352a:	3301      	adds	r3, #1
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	fbb2 f3f3 	udiv	r3, r2, r3
 8003538:	60bb      	str	r3, [r7, #8]
      break;
 800353a:	e002      	b.n	8003542 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800353c:	4b04      	ldr	r3, [pc, #16]	; (8003550 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800353e:	60bb      	str	r3, [r7, #8]
      break;
 8003540:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003542:	68bb      	ldr	r3, [r7, #8]
}
 8003544:	4618      	mov	r0, r3
 8003546:	3714      	adds	r7, #20
 8003548:	46bd      	mov	sp, r7
 800354a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800354c:	40023800 	.word	0x40023800
 8003550:	00f42400 	.word	0x00f42400
 8003554:	007a1200 	.word	0x007a1200

08003558 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003558:	b480      	push	{r7}
 800355a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800355c:	4b03      	ldr	r3, [pc, #12]	; (800356c <HAL_RCC_GetHCLKFreq+0x14>)
 800355e:	681b      	ldr	r3, [r3, #0]
}
 8003560:	4618      	mov	r0, r3
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	20000000 	.word	0x20000000

08003570 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003574:	f7ff fff0 	bl	8003558 <HAL_RCC_GetHCLKFreq>
 8003578:	4601      	mov	r1, r0
 800357a:	4b05      	ldr	r3, [pc, #20]	; (8003590 <HAL_RCC_GetPCLK1Freq+0x20>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	0a9b      	lsrs	r3, r3, #10
 8003580:	f003 0307 	and.w	r3, r3, #7
 8003584:	4a03      	ldr	r2, [pc, #12]	; (8003594 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003586:	5cd3      	ldrb	r3, [r2, r3]
 8003588:	fa21 f303 	lsr.w	r3, r1, r3
}
 800358c:	4618      	mov	r0, r3
 800358e:	bd80      	pop	{r7, pc}
 8003590:	40023800 	.word	0x40023800
 8003594:	08005638 	.word	0x08005638

08003598 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800359c:	f7ff ffdc 	bl	8003558 <HAL_RCC_GetHCLKFreq>
 80035a0:	4601      	mov	r1, r0
 80035a2:	4b05      	ldr	r3, [pc, #20]	; (80035b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	0b5b      	lsrs	r3, r3, #13
 80035a8:	f003 0307 	and.w	r3, r3, #7
 80035ac:	4a03      	ldr	r2, [pc, #12]	; (80035bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80035ae:	5cd3      	ldrb	r3, [r2, r3]
 80035b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	40023800 	.word	0x40023800
 80035bc:	08005638 	.word	0x08005638

080035c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e01d      	b.n	800360e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d106      	bne.n	80035ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f7fe f8ac 	bl	8001744 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2202      	movs	r2, #2
 80035f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	3304      	adds	r3, #4
 80035fc:	4619      	mov	r1, r3
 80035fe:	4610      	mov	r0, r2
 8003600:	f000 fa38 	bl	8003a74 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3708      	adds	r7, #8
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003616:	b480      	push	{r7}
 8003618:	b085      	sub	sp, #20
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2202      	movs	r2, #2
 8003622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f003 0307 	and.w	r3, r3, #7
 8003630:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2b06      	cmp	r3, #6
 8003636:	d007      	beq.n	8003648 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f042 0201 	orr.w	r2, r2, #1
 8003646:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3714      	adds	r7, #20
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr

0800365e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800365e:	b480      	push	{r7}
 8003660:	b085      	sub	sp, #20
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68da      	ldr	r2, [r3, #12]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f042 0201 	orr.w	r2, r2, #1
 8003674:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f003 0307 	and.w	r3, r3, #7
 8003680:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2b06      	cmp	r3, #6
 8003686:	d007      	beq.n	8003698 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f042 0201 	orr.w	r2, r2, #1
 8003696:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3714      	adds	r7, #20
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr

080036a6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b082      	sub	sp, #8
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d122      	bne.n	8003702 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d11b      	bne.n	8003702 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f06f 0202 	mvn.w	r2, #2
 80036d2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	f003 0303 	and.w	r3, r3, #3
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d003      	beq.n	80036f0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 f9a5 	bl	8003a38 <HAL_TIM_IC_CaptureCallback>
 80036ee:	e005      	b.n	80036fc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 f997 	bl	8003a24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 f9a8 	bl	8003a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	f003 0304 	and.w	r3, r3, #4
 800370c:	2b04      	cmp	r3, #4
 800370e:	d122      	bne.n	8003756 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	f003 0304 	and.w	r3, r3, #4
 800371a:	2b04      	cmp	r3, #4
 800371c:	d11b      	bne.n	8003756 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f06f 0204 	mvn.w	r2, #4
 8003726:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2202      	movs	r2, #2
 800372c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003738:	2b00      	cmp	r3, #0
 800373a:	d003      	beq.n	8003744 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 f97b 	bl	8003a38 <HAL_TIM_IC_CaptureCallback>
 8003742:	e005      	b.n	8003750 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f000 f96d 	bl	8003a24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f97e 	bl	8003a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	f003 0308 	and.w	r3, r3, #8
 8003760:	2b08      	cmp	r3, #8
 8003762:	d122      	bne.n	80037aa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	f003 0308 	and.w	r3, r3, #8
 800376e:	2b08      	cmp	r3, #8
 8003770:	d11b      	bne.n	80037aa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f06f 0208 	mvn.w	r2, #8
 800377a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2204      	movs	r2, #4
 8003780:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	69db      	ldr	r3, [r3, #28]
 8003788:	f003 0303 	and.w	r3, r3, #3
 800378c:	2b00      	cmp	r3, #0
 800378e:	d003      	beq.n	8003798 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 f951 	bl	8003a38 <HAL_TIM_IC_CaptureCallback>
 8003796:	e005      	b.n	80037a4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 f943 	bl	8003a24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 f954 	bl	8003a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	f003 0310 	and.w	r3, r3, #16
 80037b4:	2b10      	cmp	r3, #16
 80037b6:	d122      	bne.n	80037fe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	f003 0310 	and.w	r3, r3, #16
 80037c2:	2b10      	cmp	r3, #16
 80037c4:	d11b      	bne.n	80037fe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f06f 0210 	mvn.w	r2, #16
 80037ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2208      	movs	r2, #8
 80037d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	69db      	ldr	r3, [r3, #28]
 80037dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d003      	beq.n	80037ec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f000 f927 	bl	8003a38 <HAL_TIM_IC_CaptureCallback>
 80037ea:	e005      	b.n	80037f8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 f919 	bl	8003a24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f92a 	bl	8003a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	2b01      	cmp	r3, #1
 800380a:	d10e      	bne.n	800382a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b01      	cmp	r3, #1
 8003818:	d107      	bne.n	800382a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f06f 0201 	mvn.w	r2, #1
 8003822:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f7fd ffc9 	bl	80017bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003834:	2b80      	cmp	r3, #128	; 0x80
 8003836:	d10e      	bne.n	8003856 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003842:	2b80      	cmp	r3, #128	; 0x80
 8003844:	d107      	bne.n	8003856 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800384e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 facf 	bl	8003df4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003860:	2b40      	cmp	r3, #64	; 0x40
 8003862:	d10e      	bne.n	8003882 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800386e:	2b40      	cmp	r3, #64	; 0x40
 8003870:	d107      	bne.n	8003882 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800387a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 f8ef 	bl	8003a60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	f003 0320 	and.w	r3, r3, #32
 800388c:	2b20      	cmp	r3, #32
 800388e:	d10e      	bne.n	80038ae <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	f003 0320 	and.w	r3, r3, #32
 800389a:	2b20      	cmp	r3, #32
 800389c:	d107      	bne.n	80038ae <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f06f 0220 	mvn.w	r2, #32
 80038a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f000 fa99 	bl	8003de0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038ae:	bf00      	nop
 80038b0:	3708      	adds	r7, #8
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b084      	sub	sp, #16
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
 80038be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d101      	bne.n	80038ce <HAL_TIM_ConfigClockSource+0x18>
 80038ca:	2302      	movs	r3, #2
 80038cc:	e0a6      	b.n	8003a1c <HAL_TIM_ConfigClockSource+0x166>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2202      	movs	r2, #2
 80038da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80038ec:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038f4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2b40      	cmp	r3, #64	; 0x40
 8003904:	d067      	beq.n	80039d6 <HAL_TIM_ConfigClockSource+0x120>
 8003906:	2b40      	cmp	r3, #64	; 0x40
 8003908:	d80b      	bhi.n	8003922 <HAL_TIM_ConfigClockSource+0x6c>
 800390a:	2b10      	cmp	r3, #16
 800390c:	d073      	beq.n	80039f6 <HAL_TIM_ConfigClockSource+0x140>
 800390e:	2b10      	cmp	r3, #16
 8003910:	d802      	bhi.n	8003918 <HAL_TIM_ConfigClockSource+0x62>
 8003912:	2b00      	cmp	r3, #0
 8003914:	d06f      	beq.n	80039f6 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003916:	e078      	b.n	8003a0a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003918:	2b20      	cmp	r3, #32
 800391a:	d06c      	beq.n	80039f6 <HAL_TIM_ConfigClockSource+0x140>
 800391c:	2b30      	cmp	r3, #48	; 0x30
 800391e:	d06a      	beq.n	80039f6 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003920:	e073      	b.n	8003a0a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003922:	2b70      	cmp	r3, #112	; 0x70
 8003924:	d00d      	beq.n	8003942 <HAL_TIM_ConfigClockSource+0x8c>
 8003926:	2b70      	cmp	r3, #112	; 0x70
 8003928:	d804      	bhi.n	8003934 <HAL_TIM_ConfigClockSource+0x7e>
 800392a:	2b50      	cmp	r3, #80	; 0x50
 800392c:	d033      	beq.n	8003996 <HAL_TIM_ConfigClockSource+0xe0>
 800392e:	2b60      	cmp	r3, #96	; 0x60
 8003930:	d041      	beq.n	80039b6 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003932:	e06a      	b.n	8003a0a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003934:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003938:	d066      	beq.n	8003a08 <HAL_TIM_ConfigClockSource+0x152>
 800393a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800393e:	d017      	beq.n	8003970 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003940:	e063      	b.n	8003a0a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6818      	ldr	r0, [r3, #0]
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	6899      	ldr	r1, [r3, #8]
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	685a      	ldr	r2, [r3, #4]
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	f000 f9a9 	bl	8003ca8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003964:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	609a      	str	r2, [r3, #8]
      break;
 800396e:	e04c      	b.n	8003a0a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6818      	ldr	r0, [r3, #0]
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	6899      	ldr	r1, [r3, #8]
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	685a      	ldr	r2, [r3, #4]
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	f000 f992 	bl	8003ca8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	689a      	ldr	r2, [r3, #8]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003992:	609a      	str	r2, [r3, #8]
      break;
 8003994:	e039      	b.n	8003a0a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6818      	ldr	r0, [r3, #0]
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	6859      	ldr	r1, [r3, #4]
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	461a      	mov	r2, r3
 80039a4:	f000 f906 	bl	8003bb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2150      	movs	r1, #80	; 0x50
 80039ae:	4618      	mov	r0, r3
 80039b0:	f000 f95f 	bl	8003c72 <TIM_ITRx_SetConfig>
      break;
 80039b4:	e029      	b.n	8003a0a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6818      	ldr	r0, [r3, #0]
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	6859      	ldr	r1, [r3, #4]
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	461a      	mov	r2, r3
 80039c4:	f000 f925 	bl	8003c12 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2160      	movs	r1, #96	; 0x60
 80039ce:	4618      	mov	r0, r3
 80039d0:	f000 f94f 	bl	8003c72 <TIM_ITRx_SetConfig>
      break;
 80039d4:	e019      	b.n	8003a0a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6818      	ldr	r0, [r3, #0]
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	6859      	ldr	r1, [r3, #4]
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	461a      	mov	r2, r3
 80039e4:	f000 f8e6 	bl	8003bb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2140      	movs	r1, #64	; 0x40
 80039ee:	4618      	mov	r0, r3
 80039f0:	f000 f93f 	bl	8003c72 <TIM_ITRx_SetConfig>
      break;
 80039f4:	e009      	b.n	8003a0a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4619      	mov	r1, r3
 8003a00:	4610      	mov	r0, r2
 8003a02:	f000 f936 	bl	8003c72 <TIM_ITRx_SetConfig>
      break;
 8003a06:	e000      	b.n	8003a0a <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003a08:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3710      	adds	r7, #16
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a2c:	bf00      	nop
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a68:	bf00      	nop
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a40      	ldr	r2, [pc, #256]	; (8003b88 <TIM_Base_SetConfig+0x114>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d013      	beq.n	8003ab4 <TIM_Base_SetConfig+0x40>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a92:	d00f      	beq.n	8003ab4 <TIM_Base_SetConfig+0x40>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a3d      	ldr	r2, [pc, #244]	; (8003b8c <TIM_Base_SetConfig+0x118>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d00b      	beq.n	8003ab4 <TIM_Base_SetConfig+0x40>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a3c      	ldr	r2, [pc, #240]	; (8003b90 <TIM_Base_SetConfig+0x11c>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d007      	beq.n	8003ab4 <TIM_Base_SetConfig+0x40>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a3b      	ldr	r2, [pc, #236]	; (8003b94 <TIM_Base_SetConfig+0x120>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d003      	beq.n	8003ab4 <TIM_Base_SetConfig+0x40>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a3a      	ldr	r2, [pc, #232]	; (8003b98 <TIM_Base_SetConfig+0x124>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d108      	bne.n	8003ac6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	68fa      	ldr	r2, [r7, #12]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a2f      	ldr	r2, [pc, #188]	; (8003b88 <TIM_Base_SetConfig+0x114>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d02b      	beq.n	8003b26 <TIM_Base_SetConfig+0xb2>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ad4:	d027      	beq.n	8003b26 <TIM_Base_SetConfig+0xb2>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a2c      	ldr	r2, [pc, #176]	; (8003b8c <TIM_Base_SetConfig+0x118>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d023      	beq.n	8003b26 <TIM_Base_SetConfig+0xb2>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a2b      	ldr	r2, [pc, #172]	; (8003b90 <TIM_Base_SetConfig+0x11c>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d01f      	beq.n	8003b26 <TIM_Base_SetConfig+0xb2>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a2a      	ldr	r2, [pc, #168]	; (8003b94 <TIM_Base_SetConfig+0x120>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d01b      	beq.n	8003b26 <TIM_Base_SetConfig+0xb2>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a29      	ldr	r2, [pc, #164]	; (8003b98 <TIM_Base_SetConfig+0x124>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d017      	beq.n	8003b26 <TIM_Base_SetConfig+0xb2>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a28      	ldr	r2, [pc, #160]	; (8003b9c <TIM_Base_SetConfig+0x128>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d013      	beq.n	8003b26 <TIM_Base_SetConfig+0xb2>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a27      	ldr	r2, [pc, #156]	; (8003ba0 <TIM_Base_SetConfig+0x12c>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d00f      	beq.n	8003b26 <TIM_Base_SetConfig+0xb2>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a26      	ldr	r2, [pc, #152]	; (8003ba4 <TIM_Base_SetConfig+0x130>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d00b      	beq.n	8003b26 <TIM_Base_SetConfig+0xb2>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a25      	ldr	r2, [pc, #148]	; (8003ba8 <TIM_Base_SetConfig+0x134>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d007      	beq.n	8003b26 <TIM_Base_SetConfig+0xb2>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a24      	ldr	r2, [pc, #144]	; (8003bac <TIM_Base_SetConfig+0x138>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d003      	beq.n	8003b26 <TIM_Base_SetConfig+0xb2>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a23      	ldr	r2, [pc, #140]	; (8003bb0 <TIM_Base_SetConfig+0x13c>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d108      	bne.n	8003b38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a0a      	ldr	r2, [pc, #40]	; (8003b88 <TIM_Base_SetConfig+0x114>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d003      	beq.n	8003b6c <TIM_Base_SetConfig+0xf8>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a0c      	ldr	r2, [pc, #48]	; (8003b98 <TIM_Base_SetConfig+0x124>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d103      	bne.n	8003b74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	691a      	ldr	r2, [r3, #16]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	615a      	str	r2, [r3, #20]
}
 8003b7a:	bf00      	nop
 8003b7c:	3714      	adds	r7, #20
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	40010000 	.word	0x40010000
 8003b8c:	40000400 	.word	0x40000400
 8003b90:	40000800 	.word	0x40000800
 8003b94:	40000c00 	.word	0x40000c00
 8003b98:	40010400 	.word	0x40010400
 8003b9c:	40014000 	.word	0x40014000
 8003ba0:	40014400 	.word	0x40014400
 8003ba4:	40014800 	.word	0x40014800
 8003ba8:	40001800 	.word	0x40001800
 8003bac:	40001c00 	.word	0x40001c00
 8003bb0:	40002000 	.word	0x40002000

08003bb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b087      	sub	sp, #28
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6a1b      	ldr	r3, [r3, #32]
 8003bc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	f023 0201 	bic.w	r2, r3, #1
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	011b      	lsls	r3, r3, #4
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	f023 030a 	bic.w	r3, r3, #10
 8003bf0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	621a      	str	r2, [r3, #32]
}
 8003c06:	bf00      	nop
 8003c08:	371c      	adds	r7, #28
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr

08003c12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c12:	b480      	push	{r7}
 8003c14:	b087      	sub	sp, #28
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	60f8      	str	r0, [r7, #12]
 8003c1a:	60b9      	str	r1, [r7, #8]
 8003c1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	f023 0210 	bic.w	r2, r3, #16
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	031b      	lsls	r3, r3, #12
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c4e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	011b      	lsls	r3, r3, #4
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	621a      	str	r2, [r3, #32]
}
 8003c66:	bf00      	nop
 8003c68:	371c      	adds	r7, #28
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr

08003c72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c72:	b480      	push	{r7}
 8003c74:	b085      	sub	sp, #20
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
 8003c7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c8a:	683a      	ldr	r2, [r7, #0]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	f043 0307 	orr.w	r3, r3, #7
 8003c94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	609a      	str	r2, [r3, #8]
}
 8003c9c:	bf00      	nop
 8003c9e:	3714      	adds	r7, #20
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b087      	sub	sp, #28
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
 8003cb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	021a      	lsls	r2, r3, #8
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	431a      	orrs	r2, r3
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	697a      	ldr	r2, [r7, #20]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	609a      	str	r2, [r3, #8]
}
 8003cdc:	bf00      	nop
 8003cde:	371c      	adds	r7, #28
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d101      	bne.n	8003d00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	e05a      	b.n	8003db6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2202      	movs	r2, #2
 8003d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a21      	ldr	r2, [pc, #132]	; (8003dc4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d022      	beq.n	8003d8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d4c:	d01d      	beq.n	8003d8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a1d      	ldr	r2, [pc, #116]	; (8003dc8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d018      	beq.n	8003d8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a1b      	ldr	r2, [pc, #108]	; (8003dcc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d013      	beq.n	8003d8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a1a      	ldr	r2, [pc, #104]	; (8003dd0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d00e      	beq.n	8003d8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a18      	ldr	r2, [pc, #96]	; (8003dd4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d009      	beq.n	8003d8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a17      	ldr	r2, [pc, #92]	; (8003dd8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d004      	beq.n	8003d8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a15      	ldr	r2, [pc, #84]	; (8003ddc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d10c      	bne.n	8003da4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	68ba      	ldr	r2, [r7, #8]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68ba      	ldr	r2, [r7, #8]
 8003da2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3714      	adds	r7, #20
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	40010000 	.word	0x40010000
 8003dc8:	40000400 	.word	0x40000400
 8003dcc:	40000800 	.word	0x40000800
 8003dd0:	40000c00 	.word	0x40000c00
 8003dd4:	40010400 	.word	0x40010400
 8003dd8:	40014000 	.word	0x40014000
 8003ddc:	40001800 	.word	0x40001800

08003de0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003dfc:	bf00      	nop
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d101      	bne.n	8003e1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e03f      	b.n	8003e9a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d106      	bne.n	8003e34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f7fd fd42 	bl	80018b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2224      	movs	r2, #36	; 0x24
 8003e38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68da      	ldr	r2, [r3, #12]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 f90b 	bl	8004068 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	691a      	ldr	r2, [r3, #16]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	695a      	ldr	r2, [r3, #20]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68da      	ldr	r2, [r3, #12]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2220      	movs	r2, #32
 8003e8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2220      	movs	r2, #32
 8003e94:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3708      	adds	r7, #8
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b088      	sub	sp, #32
 8003ea6:	af02      	add	r7, sp, #8
 8003ea8:	60f8      	str	r0, [r7, #12]
 8003eaa:	60b9      	str	r1, [r7, #8]
 8003eac:	603b      	str	r3, [r7, #0]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b20      	cmp	r3, #32
 8003ec0:	f040 8083 	bne.w	8003fca <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d002      	beq.n	8003ed0 <HAL_UART_Transmit+0x2e>
 8003eca:	88fb      	ldrh	r3, [r7, #6]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d101      	bne.n	8003ed4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e07b      	b.n	8003fcc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d101      	bne.n	8003ee2 <HAL_UART_Transmit+0x40>
 8003ede:	2302      	movs	r3, #2
 8003ee0:	e074      	b.n	8003fcc <HAL_UART_Transmit+0x12a>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2200      	movs	r2, #0
 8003eee:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2221      	movs	r2, #33	; 0x21
 8003ef4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003ef8:	f7fd fe3e 	bl	8001b78 <HAL_GetTick>
 8003efc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	88fa      	ldrh	r2, [r7, #6]
 8003f02:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	88fa      	ldrh	r2, [r7, #6]
 8003f08:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003f12:	e042      	b.n	8003f9a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f2a:	d122      	bne.n	8003f72 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	9300      	str	r3, [sp, #0]
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	2200      	movs	r2, #0
 8003f34:	2180      	movs	r1, #128	; 0x80
 8003f36:	68f8      	ldr	r0, [r7, #12]
 8003f38:	f000 f84c 	bl	8003fd4 <UART_WaitOnFlagUntilTimeout>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d001      	beq.n	8003f46 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e042      	b.n	8003fcc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	881b      	ldrh	r3, [r3, #0]
 8003f4e:	461a      	mov	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f58:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d103      	bne.n	8003f6a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	3302      	adds	r3, #2
 8003f66:	60bb      	str	r3, [r7, #8]
 8003f68:	e017      	b.n	8003f9a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	60bb      	str	r3, [r7, #8]
 8003f70:	e013      	b.n	8003f9a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	9300      	str	r3, [sp, #0]
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	2180      	movs	r1, #128	; 0x80
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f000 f829 	bl	8003fd4 <UART_WaitOnFlagUntilTimeout>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d001      	beq.n	8003f8c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e01f      	b.n	8003fcc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	1c5a      	adds	r2, r3, #1
 8003f90:	60ba      	str	r2, [r7, #8]
 8003f92:	781a      	ldrb	r2, [r3, #0]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d1b7      	bne.n	8003f14 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	9300      	str	r3, [sp, #0]
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	2200      	movs	r2, #0
 8003fac:	2140      	movs	r1, #64	; 0x40
 8003fae:	68f8      	ldr	r0, [r7, #12]
 8003fb0:	f000 f810 	bl	8003fd4 <UART_WaitOnFlagUntilTimeout>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e006      	b.n	8003fcc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2220      	movs	r2, #32
 8003fc2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	e000      	b.n	8003fcc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003fca:	2302      	movs	r3, #2
  }
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3718      	adds	r7, #24
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	603b      	str	r3, [r7, #0]
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fe4:	e02c      	b.n	8004040 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fec:	d028      	beq.n	8004040 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d007      	beq.n	8004004 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ff4:	f7fd fdc0 	bl	8001b78 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	69ba      	ldr	r2, [r7, #24]
 8004000:	429a      	cmp	r2, r3
 8004002:	d21d      	bcs.n	8004040 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68da      	ldr	r2, [r3, #12]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004012:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	695a      	ldr	r2, [r3, #20]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f022 0201 	bic.w	r2, r2, #1
 8004022:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2220      	movs	r2, #32
 8004028:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2220      	movs	r2, #32
 8004030:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e00f      	b.n	8004060 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	4013      	ands	r3, r2
 800404a:	68ba      	ldr	r2, [r7, #8]
 800404c:	429a      	cmp	r2, r3
 800404e:	bf0c      	ite	eq
 8004050:	2301      	moveq	r3, #1
 8004052:	2300      	movne	r3, #0
 8004054:	b2db      	uxtb	r3, r3
 8004056:	461a      	mov	r2, r3
 8004058:	79fb      	ldrb	r3, [r7, #7]
 800405a:	429a      	cmp	r2, r3
 800405c:	d0c3      	beq.n	8003fe6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	3710      	adds	r7, #16
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800406c:	b085      	sub	sp, #20
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	68da      	ldr	r2, [r3, #12]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	430a      	orrs	r2, r1
 8004086:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	689a      	ldr	r2, [r3, #8]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	431a      	orrs	r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	431a      	orrs	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	69db      	ldr	r3, [r3, #28]
 800409c:	4313      	orrs	r3, r2
 800409e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80040aa:	f023 030c 	bic.w	r3, r3, #12
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	6812      	ldr	r2, [r2, #0]
 80040b2:	68f9      	ldr	r1, [r7, #12]
 80040b4:	430b      	orrs	r3, r1
 80040b6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	699a      	ldr	r2, [r3, #24]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	430a      	orrs	r2, r1
 80040cc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	69db      	ldr	r3, [r3, #28]
 80040d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040d6:	f040 818b 	bne.w	80043f0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4ac1      	ldr	r2, [pc, #772]	; (80043e4 <UART_SetConfig+0x37c>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d005      	beq.n	80040f0 <UART_SetConfig+0x88>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4abf      	ldr	r2, [pc, #764]	; (80043e8 <UART_SetConfig+0x380>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	f040 80bd 	bne.w	800426a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040f0:	f7ff fa52 	bl	8003598 <HAL_RCC_GetPCLK2Freq>
 80040f4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	461d      	mov	r5, r3
 80040fa:	f04f 0600 	mov.w	r6, #0
 80040fe:	46a8      	mov	r8, r5
 8004100:	46b1      	mov	r9, r6
 8004102:	eb18 0308 	adds.w	r3, r8, r8
 8004106:	eb49 0409 	adc.w	r4, r9, r9
 800410a:	4698      	mov	r8, r3
 800410c:	46a1      	mov	r9, r4
 800410e:	eb18 0805 	adds.w	r8, r8, r5
 8004112:	eb49 0906 	adc.w	r9, r9, r6
 8004116:	f04f 0100 	mov.w	r1, #0
 800411a:	f04f 0200 	mov.w	r2, #0
 800411e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004122:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004126:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800412a:	4688      	mov	r8, r1
 800412c:	4691      	mov	r9, r2
 800412e:	eb18 0005 	adds.w	r0, r8, r5
 8004132:	eb49 0106 	adc.w	r1, r9, r6
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	461d      	mov	r5, r3
 800413c:	f04f 0600 	mov.w	r6, #0
 8004140:	196b      	adds	r3, r5, r5
 8004142:	eb46 0406 	adc.w	r4, r6, r6
 8004146:	461a      	mov	r2, r3
 8004148:	4623      	mov	r3, r4
 800414a:	f7fc fa53 	bl	80005f4 <__aeabi_uldivmod>
 800414e:	4603      	mov	r3, r0
 8004150:	460c      	mov	r4, r1
 8004152:	461a      	mov	r2, r3
 8004154:	4ba5      	ldr	r3, [pc, #660]	; (80043ec <UART_SetConfig+0x384>)
 8004156:	fba3 2302 	umull	r2, r3, r3, r2
 800415a:	095b      	lsrs	r3, r3, #5
 800415c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	461d      	mov	r5, r3
 8004164:	f04f 0600 	mov.w	r6, #0
 8004168:	46a9      	mov	r9, r5
 800416a:	46b2      	mov	sl, r6
 800416c:	eb19 0309 	adds.w	r3, r9, r9
 8004170:	eb4a 040a 	adc.w	r4, sl, sl
 8004174:	4699      	mov	r9, r3
 8004176:	46a2      	mov	sl, r4
 8004178:	eb19 0905 	adds.w	r9, r9, r5
 800417c:	eb4a 0a06 	adc.w	sl, sl, r6
 8004180:	f04f 0100 	mov.w	r1, #0
 8004184:	f04f 0200 	mov.w	r2, #0
 8004188:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800418c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004190:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004194:	4689      	mov	r9, r1
 8004196:	4692      	mov	sl, r2
 8004198:	eb19 0005 	adds.w	r0, r9, r5
 800419c:	eb4a 0106 	adc.w	r1, sl, r6
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	461d      	mov	r5, r3
 80041a6:	f04f 0600 	mov.w	r6, #0
 80041aa:	196b      	adds	r3, r5, r5
 80041ac:	eb46 0406 	adc.w	r4, r6, r6
 80041b0:	461a      	mov	r2, r3
 80041b2:	4623      	mov	r3, r4
 80041b4:	f7fc fa1e 	bl	80005f4 <__aeabi_uldivmod>
 80041b8:	4603      	mov	r3, r0
 80041ba:	460c      	mov	r4, r1
 80041bc:	461a      	mov	r2, r3
 80041be:	4b8b      	ldr	r3, [pc, #556]	; (80043ec <UART_SetConfig+0x384>)
 80041c0:	fba3 1302 	umull	r1, r3, r3, r2
 80041c4:	095b      	lsrs	r3, r3, #5
 80041c6:	2164      	movs	r1, #100	; 0x64
 80041c8:	fb01 f303 	mul.w	r3, r1, r3
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	00db      	lsls	r3, r3, #3
 80041d0:	3332      	adds	r3, #50	; 0x32
 80041d2:	4a86      	ldr	r2, [pc, #536]	; (80043ec <UART_SetConfig+0x384>)
 80041d4:	fba2 2303 	umull	r2, r3, r2, r3
 80041d8:	095b      	lsrs	r3, r3, #5
 80041da:	005b      	lsls	r3, r3, #1
 80041dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80041e0:	4498      	add	r8, r3
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	461d      	mov	r5, r3
 80041e6:	f04f 0600 	mov.w	r6, #0
 80041ea:	46a9      	mov	r9, r5
 80041ec:	46b2      	mov	sl, r6
 80041ee:	eb19 0309 	adds.w	r3, r9, r9
 80041f2:	eb4a 040a 	adc.w	r4, sl, sl
 80041f6:	4699      	mov	r9, r3
 80041f8:	46a2      	mov	sl, r4
 80041fa:	eb19 0905 	adds.w	r9, r9, r5
 80041fe:	eb4a 0a06 	adc.w	sl, sl, r6
 8004202:	f04f 0100 	mov.w	r1, #0
 8004206:	f04f 0200 	mov.w	r2, #0
 800420a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800420e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004212:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004216:	4689      	mov	r9, r1
 8004218:	4692      	mov	sl, r2
 800421a:	eb19 0005 	adds.w	r0, r9, r5
 800421e:	eb4a 0106 	adc.w	r1, sl, r6
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	461d      	mov	r5, r3
 8004228:	f04f 0600 	mov.w	r6, #0
 800422c:	196b      	adds	r3, r5, r5
 800422e:	eb46 0406 	adc.w	r4, r6, r6
 8004232:	461a      	mov	r2, r3
 8004234:	4623      	mov	r3, r4
 8004236:	f7fc f9dd 	bl	80005f4 <__aeabi_uldivmod>
 800423a:	4603      	mov	r3, r0
 800423c:	460c      	mov	r4, r1
 800423e:	461a      	mov	r2, r3
 8004240:	4b6a      	ldr	r3, [pc, #424]	; (80043ec <UART_SetConfig+0x384>)
 8004242:	fba3 1302 	umull	r1, r3, r3, r2
 8004246:	095b      	lsrs	r3, r3, #5
 8004248:	2164      	movs	r1, #100	; 0x64
 800424a:	fb01 f303 	mul.w	r3, r1, r3
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	00db      	lsls	r3, r3, #3
 8004252:	3332      	adds	r3, #50	; 0x32
 8004254:	4a65      	ldr	r2, [pc, #404]	; (80043ec <UART_SetConfig+0x384>)
 8004256:	fba2 2303 	umull	r2, r3, r2, r3
 800425a:	095b      	lsrs	r3, r3, #5
 800425c:	f003 0207 	and.w	r2, r3, #7
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4442      	add	r2, r8
 8004266:	609a      	str	r2, [r3, #8]
 8004268:	e26f      	b.n	800474a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800426a:	f7ff f981 	bl	8003570 <HAL_RCC_GetPCLK1Freq>
 800426e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	461d      	mov	r5, r3
 8004274:	f04f 0600 	mov.w	r6, #0
 8004278:	46a8      	mov	r8, r5
 800427a:	46b1      	mov	r9, r6
 800427c:	eb18 0308 	adds.w	r3, r8, r8
 8004280:	eb49 0409 	adc.w	r4, r9, r9
 8004284:	4698      	mov	r8, r3
 8004286:	46a1      	mov	r9, r4
 8004288:	eb18 0805 	adds.w	r8, r8, r5
 800428c:	eb49 0906 	adc.w	r9, r9, r6
 8004290:	f04f 0100 	mov.w	r1, #0
 8004294:	f04f 0200 	mov.w	r2, #0
 8004298:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800429c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80042a0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80042a4:	4688      	mov	r8, r1
 80042a6:	4691      	mov	r9, r2
 80042a8:	eb18 0005 	adds.w	r0, r8, r5
 80042ac:	eb49 0106 	adc.w	r1, r9, r6
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	461d      	mov	r5, r3
 80042b6:	f04f 0600 	mov.w	r6, #0
 80042ba:	196b      	adds	r3, r5, r5
 80042bc:	eb46 0406 	adc.w	r4, r6, r6
 80042c0:	461a      	mov	r2, r3
 80042c2:	4623      	mov	r3, r4
 80042c4:	f7fc f996 	bl	80005f4 <__aeabi_uldivmod>
 80042c8:	4603      	mov	r3, r0
 80042ca:	460c      	mov	r4, r1
 80042cc:	461a      	mov	r2, r3
 80042ce:	4b47      	ldr	r3, [pc, #284]	; (80043ec <UART_SetConfig+0x384>)
 80042d0:	fba3 2302 	umull	r2, r3, r3, r2
 80042d4:	095b      	lsrs	r3, r3, #5
 80042d6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	461d      	mov	r5, r3
 80042de:	f04f 0600 	mov.w	r6, #0
 80042e2:	46a9      	mov	r9, r5
 80042e4:	46b2      	mov	sl, r6
 80042e6:	eb19 0309 	adds.w	r3, r9, r9
 80042ea:	eb4a 040a 	adc.w	r4, sl, sl
 80042ee:	4699      	mov	r9, r3
 80042f0:	46a2      	mov	sl, r4
 80042f2:	eb19 0905 	adds.w	r9, r9, r5
 80042f6:	eb4a 0a06 	adc.w	sl, sl, r6
 80042fa:	f04f 0100 	mov.w	r1, #0
 80042fe:	f04f 0200 	mov.w	r2, #0
 8004302:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004306:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800430a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800430e:	4689      	mov	r9, r1
 8004310:	4692      	mov	sl, r2
 8004312:	eb19 0005 	adds.w	r0, r9, r5
 8004316:	eb4a 0106 	adc.w	r1, sl, r6
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	461d      	mov	r5, r3
 8004320:	f04f 0600 	mov.w	r6, #0
 8004324:	196b      	adds	r3, r5, r5
 8004326:	eb46 0406 	adc.w	r4, r6, r6
 800432a:	461a      	mov	r2, r3
 800432c:	4623      	mov	r3, r4
 800432e:	f7fc f961 	bl	80005f4 <__aeabi_uldivmod>
 8004332:	4603      	mov	r3, r0
 8004334:	460c      	mov	r4, r1
 8004336:	461a      	mov	r2, r3
 8004338:	4b2c      	ldr	r3, [pc, #176]	; (80043ec <UART_SetConfig+0x384>)
 800433a:	fba3 1302 	umull	r1, r3, r3, r2
 800433e:	095b      	lsrs	r3, r3, #5
 8004340:	2164      	movs	r1, #100	; 0x64
 8004342:	fb01 f303 	mul.w	r3, r1, r3
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	00db      	lsls	r3, r3, #3
 800434a:	3332      	adds	r3, #50	; 0x32
 800434c:	4a27      	ldr	r2, [pc, #156]	; (80043ec <UART_SetConfig+0x384>)
 800434e:	fba2 2303 	umull	r2, r3, r2, r3
 8004352:	095b      	lsrs	r3, r3, #5
 8004354:	005b      	lsls	r3, r3, #1
 8004356:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800435a:	4498      	add	r8, r3
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	461d      	mov	r5, r3
 8004360:	f04f 0600 	mov.w	r6, #0
 8004364:	46a9      	mov	r9, r5
 8004366:	46b2      	mov	sl, r6
 8004368:	eb19 0309 	adds.w	r3, r9, r9
 800436c:	eb4a 040a 	adc.w	r4, sl, sl
 8004370:	4699      	mov	r9, r3
 8004372:	46a2      	mov	sl, r4
 8004374:	eb19 0905 	adds.w	r9, r9, r5
 8004378:	eb4a 0a06 	adc.w	sl, sl, r6
 800437c:	f04f 0100 	mov.w	r1, #0
 8004380:	f04f 0200 	mov.w	r2, #0
 8004384:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004388:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800438c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004390:	4689      	mov	r9, r1
 8004392:	4692      	mov	sl, r2
 8004394:	eb19 0005 	adds.w	r0, r9, r5
 8004398:	eb4a 0106 	adc.w	r1, sl, r6
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	461d      	mov	r5, r3
 80043a2:	f04f 0600 	mov.w	r6, #0
 80043a6:	196b      	adds	r3, r5, r5
 80043a8:	eb46 0406 	adc.w	r4, r6, r6
 80043ac:	461a      	mov	r2, r3
 80043ae:	4623      	mov	r3, r4
 80043b0:	f7fc f920 	bl	80005f4 <__aeabi_uldivmod>
 80043b4:	4603      	mov	r3, r0
 80043b6:	460c      	mov	r4, r1
 80043b8:	461a      	mov	r2, r3
 80043ba:	4b0c      	ldr	r3, [pc, #48]	; (80043ec <UART_SetConfig+0x384>)
 80043bc:	fba3 1302 	umull	r1, r3, r3, r2
 80043c0:	095b      	lsrs	r3, r3, #5
 80043c2:	2164      	movs	r1, #100	; 0x64
 80043c4:	fb01 f303 	mul.w	r3, r1, r3
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	00db      	lsls	r3, r3, #3
 80043cc:	3332      	adds	r3, #50	; 0x32
 80043ce:	4a07      	ldr	r2, [pc, #28]	; (80043ec <UART_SetConfig+0x384>)
 80043d0:	fba2 2303 	umull	r2, r3, r2, r3
 80043d4:	095b      	lsrs	r3, r3, #5
 80043d6:	f003 0207 	and.w	r2, r3, #7
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4442      	add	r2, r8
 80043e0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80043e2:	e1b2      	b.n	800474a <UART_SetConfig+0x6e2>
 80043e4:	40011000 	.word	0x40011000
 80043e8:	40011400 	.word	0x40011400
 80043ec:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4ad7      	ldr	r2, [pc, #860]	; (8004754 <UART_SetConfig+0x6ec>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d005      	beq.n	8004406 <UART_SetConfig+0x39e>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4ad6      	ldr	r2, [pc, #856]	; (8004758 <UART_SetConfig+0x6f0>)
 8004400:	4293      	cmp	r3, r2
 8004402:	f040 80d1 	bne.w	80045a8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004406:	f7ff f8c7 	bl	8003598 <HAL_RCC_GetPCLK2Freq>
 800440a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	469a      	mov	sl, r3
 8004410:	f04f 0b00 	mov.w	fp, #0
 8004414:	46d0      	mov	r8, sl
 8004416:	46d9      	mov	r9, fp
 8004418:	eb18 0308 	adds.w	r3, r8, r8
 800441c:	eb49 0409 	adc.w	r4, r9, r9
 8004420:	4698      	mov	r8, r3
 8004422:	46a1      	mov	r9, r4
 8004424:	eb18 080a 	adds.w	r8, r8, sl
 8004428:	eb49 090b 	adc.w	r9, r9, fp
 800442c:	f04f 0100 	mov.w	r1, #0
 8004430:	f04f 0200 	mov.w	r2, #0
 8004434:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004438:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800443c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004440:	4688      	mov	r8, r1
 8004442:	4691      	mov	r9, r2
 8004444:	eb1a 0508 	adds.w	r5, sl, r8
 8004448:	eb4b 0609 	adc.w	r6, fp, r9
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	4619      	mov	r1, r3
 8004452:	f04f 0200 	mov.w	r2, #0
 8004456:	f04f 0300 	mov.w	r3, #0
 800445a:	f04f 0400 	mov.w	r4, #0
 800445e:	0094      	lsls	r4, r2, #2
 8004460:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004464:	008b      	lsls	r3, r1, #2
 8004466:	461a      	mov	r2, r3
 8004468:	4623      	mov	r3, r4
 800446a:	4628      	mov	r0, r5
 800446c:	4631      	mov	r1, r6
 800446e:	f7fc f8c1 	bl	80005f4 <__aeabi_uldivmod>
 8004472:	4603      	mov	r3, r0
 8004474:	460c      	mov	r4, r1
 8004476:	461a      	mov	r2, r3
 8004478:	4bb8      	ldr	r3, [pc, #736]	; (800475c <UART_SetConfig+0x6f4>)
 800447a:	fba3 2302 	umull	r2, r3, r3, r2
 800447e:	095b      	lsrs	r3, r3, #5
 8004480:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	469b      	mov	fp, r3
 8004488:	f04f 0c00 	mov.w	ip, #0
 800448c:	46d9      	mov	r9, fp
 800448e:	46e2      	mov	sl, ip
 8004490:	eb19 0309 	adds.w	r3, r9, r9
 8004494:	eb4a 040a 	adc.w	r4, sl, sl
 8004498:	4699      	mov	r9, r3
 800449a:	46a2      	mov	sl, r4
 800449c:	eb19 090b 	adds.w	r9, r9, fp
 80044a0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80044a4:	f04f 0100 	mov.w	r1, #0
 80044a8:	f04f 0200 	mov.w	r2, #0
 80044ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80044b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80044b8:	4689      	mov	r9, r1
 80044ba:	4692      	mov	sl, r2
 80044bc:	eb1b 0509 	adds.w	r5, fp, r9
 80044c0:	eb4c 060a 	adc.w	r6, ip, sl
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	4619      	mov	r1, r3
 80044ca:	f04f 0200 	mov.w	r2, #0
 80044ce:	f04f 0300 	mov.w	r3, #0
 80044d2:	f04f 0400 	mov.w	r4, #0
 80044d6:	0094      	lsls	r4, r2, #2
 80044d8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80044dc:	008b      	lsls	r3, r1, #2
 80044de:	461a      	mov	r2, r3
 80044e0:	4623      	mov	r3, r4
 80044e2:	4628      	mov	r0, r5
 80044e4:	4631      	mov	r1, r6
 80044e6:	f7fc f885 	bl	80005f4 <__aeabi_uldivmod>
 80044ea:	4603      	mov	r3, r0
 80044ec:	460c      	mov	r4, r1
 80044ee:	461a      	mov	r2, r3
 80044f0:	4b9a      	ldr	r3, [pc, #616]	; (800475c <UART_SetConfig+0x6f4>)
 80044f2:	fba3 1302 	umull	r1, r3, r3, r2
 80044f6:	095b      	lsrs	r3, r3, #5
 80044f8:	2164      	movs	r1, #100	; 0x64
 80044fa:	fb01 f303 	mul.w	r3, r1, r3
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	011b      	lsls	r3, r3, #4
 8004502:	3332      	adds	r3, #50	; 0x32
 8004504:	4a95      	ldr	r2, [pc, #596]	; (800475c <UART_SetConfig+0x6f4>)
 8004506:	fba2 2303 	umull	r2, r3, r2, r3
 800450a:	095b      	lsrs	r3, r3, #5
 800450c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004510:	4498      	add	r8, r3
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	469b      	mov	fp, r3
 8004516:	f04f 0c00 	mov.w	ip, #0
 800451a:	46d9      	mov	r9, fp
 800451c:	46e2      	mov	sl, ip
 800451e:	eb19 0309 	adds.w	r3, r9, r9
 8004522:	eb4a 040a 	adc.w	r4, sl, sl
 8004526:	4699      	mov	r9, r3
 8004528:	46a2      	mov	sl, r4
 800452a:	eb19 090b 	adds.w	r9, r9, fp
 800452e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004532:	f04f 0100 	mov.w	r1, #0
 8004536:	f04f 0200 	mov.w	r2, #0
 800453a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800453e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004542:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004546:	4689      	mov	r9, r1
 8004548:	4692      	mov	sl, r2
 800454a:	eb1b 0509 	adds.w	r5, fp, r9
 800454e:	eb4c 060a 	adc.w	r6, ip, sl
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	4619      	mov	r1, r3
 8004558:	f04f 0200 	mov.w	r2, #0
 800455c:	f04f 0300 	mov.w	r3, #0
 8004560:	f04f 0400 	mov.w	r4, #0
 8004564:	0094      	lsls	r4, r2, #2
 8004566:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800456a:	008b      	lsls	r3, r1, #2
 800456c:	461a      	mov	r2, r3
 800456e:	4623      	mov	r3, r4
 8004570:	4628      	mov	r0, r5
 8004572:	4631      	mov	r1, r6
 8004574:	f7fc f83e 	bl	80005f4 <__aeabi_uldivmod>
 8004578:	4603      	mov	r3, r0
 800457a:	460c      	mov	r4, r1
 800457c:	461a      	mov	r2, r3
 800457e:	4b77      	ldr	r3, [pc, #476]	; (800475c <UART_SetConfig+0x6f4>)
 8004580:	fba3 1302 	umull	r1, r3, r3, r2
 8004584:	095b      	lsrs	r3, r3, #5
 8004586:	2164      	movs	r1, #100	; 0x64
 8004588:	fb01 f303 	mul.w	r3, r1, r3
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	011b      	lsls	r3, r3, #4
 8004590:	3332      	adds	r3, #50	; 0x32
 8004592:	4a72      	ldr	r2, [pc, #456]	; (800475c <UART_SetConfig+0x6f4>)
 8004594:	fba2 2303 	umull	r2, r3, r2, r3
 8004598:	095b      	lsrs	r3, r3, #5
 800459a:	f003 020f 	and.w	r2, r3, #15
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4442      	add	r2, r8
 80045a4:	609a      	str	r2, [r3, #8]
 80045a6:	e0d0      	b.n	800474a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80045a8:	f7fe ffe2 	bl	8003570 <HAL_RCC_GetPCLK1Freq>
 80045ac:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	469a      	mov	sl, r3
 80045b2:	f04f 0b00 	mov.w	fp, #0
 80045b6:	46d0      	mov	r8, sl
 80045b8:	46d9      	mov	r9, fp
 80045ba:	eb18 0308 	adds.w	r3, r8, r8
 80045be:	eb49 0409 	adc.w	r4, r9, r9
 80045c2:	4698      	mov	r8, r3
 80045c4:	46a1      	mov	r9, r4
 80045c6:	eb18 080a 	adds.w	r8, r8, sl
 80045ca:	eb49 090b 	adc.w	r9, r9, fp
 80045ce:	f04f 0100 	mov.w	r1, #0
 80045d2:	f04f 0200 	mov.w	r2, #0
 80045d6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80045da:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80045de:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80045e2:	4688      	mov	r8, r1
 80045e4:	4691      	mov	r9, r2
 80045e6:	eb1a 0508 	adds.w	r5, sl, r8
 80045ea:	eb4b 0609 	adc.w	r6, fp, r9
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	4619      	mov	r1, r3
 80045f4:	f04f 0200 	mov.w	r2, #0
 80045f8:	f04f 0300 	mov.w	r3, #0
 80045fc:	f04f 0400 	mov.w	r4, #0
 8004600:	0094      	lsls	r4, r2, #2
 8004602:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004606:	008b      	lsls	r3, r1, #2
 8004608:	461a      	mov	r2, r3
 800460a:	4623      	mov	r3, r4
 800460c:	4628      	mov	r0, r5
 800460e:	4631      	mov	r1, r6
 8004610:	f7fb fff0 	bl	80005f4 <__aeabi_uldivmod>
 8004614:	4603      	mov	r3, r0
 8004616:	460c      	mov	r4, r1
 8004618:	461a      	mov	r2, r3
 800461a:	4b50      	ldr	r3, [pc, #320]	; (800475c <UART_SetConfig+0x6f4>)
 800461c:	fba3 2302 	umull	r2, r3, r3, r2
 8004620:	095b      	lsrs	r3, r3, #5
 8004622:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	469b      	mov	fp, r3
 800462a:	f04f 0c00 	mov.w	ip, #0
 800462e:	46d9      	mov	r9, fp
 8004630:	46e2      	mov	sl, ip
 8004632:	eb19 0309 	adds.w	r3, r9, r9
 8004636:	eb4a 040a 	adc.w	r4, sl, sl
 800463a:	4699      	mov	r9, r3
 800463c:	46a2      	mov	sl, r4
 800463e:	eb19 090b 	adds.w	r9, r9, fp
 8004642:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004646:	f04f 0100 	mov.w	r1, #0
 800464a:	f04f 0200 	mov.w	r2, #0
 800464e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004652:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004656:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800465a:	4689      	mov	r9, r1
 800465c:	4692      	mov	sl, r2
 800465e:	eb1b 0509 	adds.w	r5, fp, r9
 8004662:	eb4c 060a 	adc.w	r6, ip, sl
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	4619      	mov	r1, r3
 800466c:	f04f 0200 	mov.w	r2, #0
 8004670:	f04f 0300 	mov.w	r3, #0
 8004674:	f04f 0400 	mov.w	r4, #0
 8004678:	0094      	lsls	r4, r2, #2
 800467a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800467e:	008b      	lsls	r3, r1, #2
 8004680:	461a      	mov	r2, r3
 8004682:	4623      	mov	r3, r4
 8004684:	4628      	mov	r0, r5
 8004686:	4631      	mov	r1, r6
 8004688:	f7fb ffb4 	bl	80005f4 <__aeabi_uldivmod>
 800468c:	4603      	mov	r3, r0
 800468e:	460c      	mov	r4, r1
 8004690:	461a      	mov	r2, r3
 8004692:	4b32      	ldr	r3, [pc, #200]	; (800475c <UART_SetConfig+0x6f4>)
 8004694:	fba3 1302 	umull	r1, r3, r3, r2
 8004698:	095b      	lsrs	r3, r3, #5
 800469a:	2164      	movs	r1, #100	; 0x64
 800469c:	fb01 f303 	mul.w	r3, r1, r3
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	011b      	lsls	r3, r3, #4
 80046a4:	3332      	adds	r3, #50	; 0x32
 80046a6:	4a2d      	ldr	r2, [pc, #180]	; (800475c <UART_SetConfig+0x6f4>)
 80046a8:	fba2 2303 	umull	r2, r3, r2, r3
 80046ac:	095b      	lsrs	r3, r3, #5
 80046ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046b2:	4498      	add	r8, r3
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	469b      	mov	fp, r3
 80046b8:	f04f 0c00 	mov.w	ip, #0
 80046bc:	46d9      	mov	r9, fp
 80046be:	46e2      	mov	sl, ip
 80046c0:	eb19 0309 	adds.w	r3, r9, r9
 80046c4:	eb4a 040a 	adc.w	r4, sl, sl
 80046c8:	4699      	mov	r9, r3
 80046ca:	46a2      	mov	sl, r4
 80046cc:	eb19 090b 	adds.w	r9, r9, fp
 80046d0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80046d4:	f04f 0100 	mov.w	r1, #0
 80046d8:	f04f 0200 	mov.w	r2, #0
 80046dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046e0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80046e4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80046e8:	4689      	mov	r9, r1
 80046ea:	4692      	mov	sl, r2
 80046ec:	eb1b 0509 	adds.w	r5, fp, r9
 80046f0:	eb4c 060a 	adc.w	r6, ip, sl
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	4619      	mov	r1, r3
 80046fa:	f04f 0200 	mov.w	r2, #0
 80046fe:	f04f 0300 	mov.w	r3, #0
 8004702:	f04f 0400 	mov.w	r4, #0
 8004706:	0094      	lsls	r4, r2, #2
 8004708:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800470c:	008b      	lsls	r3, r1, #2
 800470e:	461a      	mov	r2, r3
 8004710:	4623      	mov	r3, r4
 8004712:	4628      	mov	r0, r5
 8004714:	4631      	mov	r1, r6
 8004716:	f7fb ff6d 	bl	80005f4 <__aeabi_uldivmod>
 800471a:	4603      	mov	r3, r0
 800471c:	460c      	mov	r4, r1
 800471e:	461a      	mov	r2, r3
 8004720:	4b0e      	ldr	r3, [pc, #56]	; (800475c <UART_SetConfig+0x6f4>)
 8004722:	fba3 1302 	umull	r1, r3, r3, r2
 8004726:	095b      	lsrs	r3, r3, #5
 8004728:	2164      	movs	r1, #100	; 0x64
 800472a:	fb01 f303 	mul.w	r3, r1, r3
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	011b      	lsls	r3, r3, #4
 8004732:	3332      	adds	r3, #50	; 0x32
 8004734:	4a09      	ldr	r2, [pc, #36]	; (800475c <UART_SetConfig+0x6f4>)
 8004736:	fba2 2303 	umull	r2, r3, r2, r3
 800473a:	095b      	lsrs	r3, r3, #5
 800473c:	f003 020f 	and.w	r2, r3, #15
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4442      	add	r2, r8
 8004746:	609a      	str	r2, [r3, #8]
}
 8004748:	e7ff      	b.n	800474a <UART_SetConfig+0x6e2>
 800474a:	bf00      	nop
 800474c:	3714      	adds	r7, #20
 800474e:	46bd      	mov	sp, r7
 8004750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004754:	40011000 	.word	0x40011000
 8004758:	40011400 	.word	0x40011400
 800475c:	51eb851f 	.word	0x51eb851f

08004760 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004760:	b084      	sub	sp, #16
 8004762:	b580      	push	{r7, lr}
 8004764:	b084      	sub	sp, #16
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
 800476a:	f107 001c 	add.w	r0, r7, #28
 800476e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004774:	2b01      	cmp	r3, #1
 8004776:	d122      	bne.n	80047be <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800478c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80047a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d105      	bne.n	80047b2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 fa5c 	bl	8004c70 <USB_CoreReset>
 80047b8:	4603      	mov	r3, r0
 80047ba:	73fb      	strb	r3, [r7, #15]
 80047bc:	e01a      	b.n	80047f4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 fa50 	bl	8004c70 <USB_CoreReset>
 80047d0:	4603      	mov	r3, r0
 80047d2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80047d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d106      	bne.n	80047e8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	639a      	str	r2, [r3, #56]	; 0x38
 80047e6:	e005      	b.n	80047f4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80047f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d10b      	bne.n	8004812 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f043 0206 	orr.w	r2, r3, #6
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f043 0220 	orr.w	r2, r3, #32
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004812:	7bfb      	ldrb	r3, [r7, #15]
}
 8004814:	4618      	mov	r0, r3
 8004816:	3710      	adds	r7, #16
 8004818:	46bd      	mov	sp, r7
 800481a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800481e:	b004      	add	sp, #16
 8004820:	4770      	bx	lr

08004822 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004822:	b480      	push	{r7}
 8004824:	b083      	sub	sp, #12
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f023 0201 	bic.w	r2, r3, #1
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004836:	2300      	movs	r3, #0
}
 8004838:	4618      	mov	r0, r3
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	460b      	mov	r3, r1
 800484e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800485c:	78fb      	ldrb	r3, [r7, #3]
 800485e:	2b01      	cmp	r3, #1
 8004860:	d106      	bne.n	8004870 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	60da      	str	r2, [r3, #12]
 800486e:	e00b      	b.n	8004888 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004870:	78fb      	ldrb	r3, [r7, #3]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d106      	bne.n	8004884 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	60da      	str	r2, [r3, #12]
 8004882:	e001      	b.n	8004888 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e003      	b.n	8004890 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004888:	2032      	movs	r0, #50	; 0x32
 800488a:	f7fd f981 	bl	8001b90 <HAL_Delay>

  return HAL_OK;
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	3708      	adds	r7, #8
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004898:	b084      	sub	sp, #16
 800489a:	b580      	push	{r7, lr}
 800489c:	b086      	sub	sp, #24
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
 80048a2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80048a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80048aa:	2300      	movs	r3, #0
 80048ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80048b2:	2300      	movs	r3, #0
 80048b4:	613b      	str	r3, [r7, #16]
 80048b6:	e009      	b.n	80048cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	3340      	adds	r3, #64	; 0x40
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	4413      	add	r3, r2
 80048c2:	2200      	movs	r2, #0
 80048c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	3301      	adds	r3, #1
 80048ca:	613b      	str	r3, [r7, #16]
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	2b0e      	cmp	r3, #14
 80048d0:	d9f2      	bls.n	80048b8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80048d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d112      	bne.n	80048fe <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048dc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	639a      	str	r2, [r3, #56]	; 0x38
 80048fc:	e00b      	b.n	8004916 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800491c:	461a      	mov	r2, r3
 800491e:	2300      	movs	r3, #0
 8004920:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004928:	4619      	mov	r1, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004930:	461a      	mov	r2, r3
 8004932:	680b      	ldr	r3, [r1, #0]
 8004934:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004938:	2b01      	cmp	r3, #1
 800493a:	d10c      	bne.n	8004956 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800493c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800493e:	2b00      	cmp	r3, #0
 8004940:	d104      	bne.n	800494c <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004942:	2100      	movs	r1, #0
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f000 f961 	bl	8004c0c <USB_SetDevSpeed>
 800494a:	e008      	b.n	800495e <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800494c:	2101      	movs	r1, #1
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 f95c 	bl	8004c0c <USB_SetDevSpeed>
 8004954:	e003      	b.n	800495e <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004956:	2103      	movs	r1, #3
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 f957 	bl	8004c0c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800495e:	2110      	movs	r1, #16
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 f90b 	bl	8004b7c <USB_FlushTxFifo>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d001      	beq.n	8004970 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 f929 	bl	8004bc8 <USB_FlushRxFifo>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d001      	beq.n	8004980 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004986:	461a      	mov	r2, r3
 8004988:	2300      	movs	r3, #0
 800498a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004992:	461a      	mov	r2, r3
 8004994:	2300      	movs	r3, #0
 8004996:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800499e:	461a      	mov	r2, r3
 80049a0:	2300      	movs	r3, #0
 80049a2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049a4:	2300      	movs	r3, #0
 80049a6:	613b      	str	r3, [r7, #16]
 80049a8:	e043      	b.n	8004a32 <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	015a      	lsls	r2, r3, #5
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	4413      	add	r3, r2
 80049b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049c0:	d118      	bne.n	80049f4 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d10a      	bne.n	80049de <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	015a      	lsls	r2, r3, #5
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	4413      	add	r3, r2
 80049d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049d4:	461a      	mov	r2, r3
 80049d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80049da:	6013      	str	r3, [r2, #0]
 80049dc:	e013      	b.n	8004a06 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	015a      	lsls	r2, r3, #5
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	4413      	add	r3, r2
 80049e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ea:	461a      	mov	r2, r3
 80049ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80049f0:	6013      	str	r3, [r2, #0]
 80049f2:	e008      	b.n	8004a06 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	015a      	lsls	r2, r3, #5
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	4413      	add	r3, r2
 80049fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a00:	461a      	mov	r2, r3
 8004a02:	2300      	movs	r3, #0
 8004a04:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	015a      	lsls	r2, r3, #5
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a12:	461a      	mov	r2, r3
 8004a14:	2300      	movs	r3, #0
 8004a16:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	015a      	lsls	r2, r3, #5
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	4413      	add	r3, r2
 8004a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a24:	461a      	mov	r2, r3
 8004a26:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a2a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	3301      	adds	r3, #1
 8004a30:	613b      	str	r3, [r7, #16]
 8004a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d3b7      	bcc.n	80049aa <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	613b      	str	r3, [r7, #16]
 8004a3e:	e043      	b.n	8004ac8 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	015a      	lsls	r2, r3, #5
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	4413      	add	r3, r2
 8004a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a56:	d118      	bne.n	8004a8a <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d10a      	bne.n	8004a74 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	015a      	lsls	r2, r3, #5
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	4413      	add	r3, r2
 8004a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a70:	6013      	str	r3, [r2, #0]
 8004a72:	e013      	b.n	8004a9c <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	015a      	lsls	r2, r3, #5
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a80:	461a      	mov	r2, r3
 8004a82:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a86:	6013      	str	r3, [r2, #0]
 8004a88:	e008      	b.n	8004a9c <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	015a      	lsls	r2, r3, #5
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	4413      	add	r3, r2
 8004a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a96:	461a      	mov	r2, r3
 8004a98:	2300      	movs	r3, #0
 8004a9a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	015a      	lsls	r2, r3, #5
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	2300      	movs	r3, #0
 8004aac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	015a      	lsls	r2, r3, #5
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aba:	461a      	mov	r2, r3
 8004abc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ac0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	613b      	str	r3, [r7, #16]
 8004ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aca:	693a      	ldr	r2, [r7, #16]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d3b7      	bcc.n	8004a40 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ade:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ae2:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8004ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d111      	bne.n	8004b0e <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004af0:	461a      	mov	r2, r3
 8004af2:	4b20      	ldr	r3, [pc, #128]	; (8004b74 <USB_DevInit+0x2dc>)
 8004af4:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b08:	f043 0303 	orr.w	r3, r3, #3
 8004b0c:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004b1a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d105      	bne.n	8004b2e <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	f043 0210 	orr.w	r2, r3, #16
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	699a      	ldr	r2, [r3, #24]
 8004b32:	4b11      	ldr	r3, [pc, #68]	; (8004b78 <USB_DevInit+0x2e0>)
 8004b34:	4313      	orrs	r3, r2
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004b3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d005      	beq.n	8004b4c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	699b      	ldr	r3, [r3, #24]
 8004b44:	f043 0208 	orr.w	r2, r3, #8
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004b4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d107      	bne.n	8004b62 <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b5a:	f043 0304 	orr.w	r3, r3, #4
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004b62:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3718      	adds	r7, #24
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b6e:	b004      	add	sp, #16
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	00800100 	.word	0x00800100
 8004b78:	803c3800 	.word	0x803c3800

08004b7c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004b86:	2300      	movs	r3, #0
 8004b88:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	019b      	lsls	r3, r3, #6
 8004b8e:	f043 0220 	orr.w	r2, r3, #32
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	3301      	adds	r3, #1
 8004b9a:	60fb      	str	r3, [r7, #12]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	4a09      	ldr	r2, [pc, #36]	; (8004bc4 <USB_FlushTxFifo+0x48>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d901      	bls.n	8004ba8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e006      	b.n	8004bb6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	691b      	ldr	r3, [r3, #16]
 8004bac:	f003 0320 	and.w	r3, r3, #32
 8004bb0:	2b20      	cmp	r3, #32
 8004bb2:	d0f0      	beq.n	8004b96 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3714      	adds	r7, #20
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	00030d40 	.word	0x00030d40

08004bc8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2210      	movs	r2, #16
 8004bd8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	3301      	adds	r3, #1
 8004bde:	60fb      	str	r3, [r7, #12]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	4a09      	ldr	r2, [pc, #36]	; (8004c08 <USB_FlushRxFifo+0x40>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d901      	bls.n	8004bec <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e006      	b.n	8004bfa <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	f003 0310 	and.w	r3, r3, #16
 8004bf4:	2b10      	cmp	r3, #16
 8004bf6:	d0f0      	beq.n	8004bda <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3714      	adds	r7, #20
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
 8004c06:	bf00      	nop
 8004c08:	00030d40 	.word	0x00030d40

08004c0c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b085      	sub	sp, #20
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	460b      	mov	r3, r1
 8004c16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	78fb      	ldrb	r3, [r7, #3]
 8004c26:	68f9      	ldr	r1, [r7, #12]
 8004c28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3714      	adds	r7, #20
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr

08004c3e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004c3e:	b580      	push	{r7, lr}
 8004c40:	b084      	sub	sp, #16
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	68fa      	ldr	r2, [r7, #12]
 8004c54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c58:	f043 0302 	orr.w	r3, r3, #2
 8004c5c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8004c5e:	2003      	movs	r0, #3
 8004c60:	f7fc ff96 	bl	8001b90 <HAL_Delay>

  return HAL_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3710      	adds	r7, #16
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
	...

08004c70 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	3301      	adds	r3, #1
 8004c80:	60fb      	str	r3, [r7, #12]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	4a13      	ldr	r2, [pc, #76]	; (8004cd4 <USB_CoreReset+0x64>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d901      	bls.n	8004c8e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e01b      	b.n	8004cc6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	daf2      	bge.n	8004c7c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004c96:	2300      	movs	r3, #0
 8004c98:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	f043 0201 	orr.w	r2, r3, #1
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	3301      	adds	r3, #1
 8004caa:	60fb      	str	r3, [r7, #12]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	4a09      	ldr	r2, [pc, #36]	; (8004cd4 <USB_CoreReset+0x64>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d901      	bls.n	8004cb8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e006      	b.n	8004cc6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	f003 0301 	and.w	r3, r3, #1
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d0f0      	beq.n	8004ca6 <USB_CoreReset+0x36>

  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3714      	adds	r7, #20
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	00030d40 	.word	0x00030d40

08004cd8 <__errno>:
 8004cd8:	4b01      	ldr	r3, [pc, #4]	; (8004ce0 <__errno+0x8>)
 8004cda:	6818      	ldr	r0, [r3, #0]
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	2000000c 	.word	0x2000000c

08004ce4 <__libc_init_array>:
 8004ce4:	b570      	push	{r4, r5, r6, lr}
 8004ce6:	4e0d      	ldr	r6, [pc, #52]	; (8004d1c <__libc_init_array+0x38>)
 8004ce8:	4c0d      	ldr	r4, [pc, #52]	; (8004d20 <__libc_init_array+0x3c>)
 8004cea:	1ba4      	subs	r4, r4, r6
 8004cec:	10a4      	asrs	r4, r4, #2
 8004cee:	2500      	movs	r5, #0
 8004cf0:	42a5      	cmp	r5, r4
 8004cf2:	d109      	bne.n	8004d08 <__libc_init_array+0x24>
 8004cf4:	4e0b      	ldr	r6, [pc, #44]	; (8004d24 <__libc_init_array+0x40>)
 8004cf6:	4c0c      	ldr	r4, [pc, #48]	; (8004d28 <__libc_init_array+0x44>)
 8004cf8:	f000 fc88 	bl	800560c <_init>
 8004cfc:	1ba4      	subs	r4, r4, r6
 8004cfe:	10a4      	asrs	r4, r4, #2
 8004d00:	2500      	movs	r5, #0
 8004d02:	42a5      	cmp	r5, r4
 8004d04:	d105      	bne.n	8004d12 <__libc_init_array+0x2e>
 8004d06:	bd70      	pop	{r4, r5, r6, pc}
 8004d08:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d0c:	4798      	blx	r3
 8004d0e:	3501      	adds	r5, #1
 8004d10:	e7ee      	b.n	8004cf0 <__libc_init_array+0xc>
 8004d12:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d16:	4798      	blx	r3
 8004d18:	3501      	adds	r5, #1
 8004d1a:	e7f2      	b.n	8004d02 <__libc_init_array+0x1e>
 8004d1c:	080056ac 	.word	0x080056ac
 8004d20:	080056ac 	.word	0x080056ac
 8004d24:	080056ac 	.word	0x080056ac
 8004d28:	080056b0 	.word	0x080056b0

08004d2c <memset>:
 8004d2c:	4402      	add	r2, r0
 8004d2e:	4603      	mov	r3, r0
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d100      	bne.n	8004d36 <memset+0xa>
 8004d34:	4770      	bx	lr
 8004d36:	f803 1b01 	strb.w	r1, [r3], #1
 8004d3a:	e7f9      	b.n	8004d30 <memset+0x4>

08004d3c <_puts_r>:
 8004d3c:	b570      	push	{r4, r5, r6, lr}
 8004d3e:	460e      	mov	r6, r1
 8004d40:	4605      	mov	r5, r0
 8004d42:	b118      	cbz	r0, 8004d4c <_puts_r+0x10>
 8004d44:	6983      	ldr	r3, [r0, #24]
 8004d46:	b90b      	cbnz	r3, 8004d4c <_puts_r+0x10>
 8004d48:	f000 fa0c 	bl	8005164 <__sinit>
 8004d4c:	69ab      	ldr	r3, [r5, #24]
 8004d4e:	68ac      	ldr	r4, [r5, #8]
 8004d50:	b913      	cbnz	r3, 8004d58 <_puts_r+0x1c>
 8004d52:	4628      	mov	r0, r5
 8004d54:	f000 fa06 	bl	8005164 <__sinit>
 8004d58:	4b23      	ldr	r3, [pc, #140]	; (8004de8 <_puts_r+0xac>)
 8004d5a:	429c      	cmp	r4, r3
 8004d5c:	d117      	bne.n	8004d8e <_puts_r+0x52>
 8004d5e:	686c      	ldr	r4, [r5, #4]
 8004d60:	89a3      	ldrh	r3, [r4, #12]
 8004d62:	071b      	lsls	r3, r3, #28
 8004d64:	d51d      	bpl.n	8004da2 <_puts_r+0x66>
 8004d66:	6923      	ldr	r3, [r4, #16]
 8004d68:	b1db      	cbz	r3, 8004da2 <_puts_r+0x66>
 8004d6a:	3e01      	subs	r6, #1
 8004d6c:	68a3      	ldr	r3, [r4, #8]
 8004d6e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004d72:	3b01      	subs	r3, #1
 8004d74:	60a3      	str	r3, [r4, #8]
 8004d76:	b9e9      	cbnz	r1, 8004db4 <_puts_r+0x78>
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	da2e      	bge.n	8004dda <_puts_r+0x9e>
 8004d7c:	4622      	mov	r2, r4
 8004d7e:	210a      	movs	r1, #10
 8004d80:	4628      	mov	r0, r5
 8004d82:	f000 f83f 	bl	8004e04 <__swbuf_r>
 8004d86:	3001      	adds	r0, #1
 8004d88:	d011      	beq.n	8004dae <_puts_r+0x72>
 8004d8a:	200a      	movs	r0, #10
 8004d8c:	e011      	b.n	8004db2 <_puts_r+0x76>
 8004d8e:	4b17      	ldr	r3, [pc, #92]	; (8004dec <_puts_r+0xb0>)
 8004d90:	429c      	cmp	r4, r3
 8004d92:	d101      	bne.n	8004d98 <_puts_r+0x5c>
 8004d94:	68ac      	ldr	r4, [r5, #8]
 8004d96:	e7e3      	b.n	8004d60 <_puts_r+0x24>
 8004d98:	4b15      	ldr	r3, [pc, #84]	; (8004df0 <_puts_r+0xb4>)
 8004d9a:	429c      	cmp	r4, r3
 8004d9c:	bf08      	it	eq
 8004d9e:	68ec      	ldreq	r4, [r5, #12]
 8004da0:	e7de      	b.n	8004d60 <_puts_r+0x24>
 8004da2:	4621      	mov	r1, r4
 8004da4:	4628      	mov	r0, r5
 8004da6:	f000 f87f 	bl	8004ea8 <__swsetup_r>
 8004daa:	2800      	cmp	r0, #0
 8004dac:	d0dd      	beq.n	8004d6a <_puts_r+0x2e>
 8004dae:	f04f 30ff 	mov.w	r0, #4294967295
 8004db2:	bd70      	pop	{r4, r5, r6, pc}
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	da04      	bge.n	8004dc2 <_puts_r+0x86>
 8004db8:	69a2      	ldr	r2, [r4, #24]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	dc06      	bgt.n	8004dcc <_puts_r+0x90>
 8004dbe:	290a      	cmp	r1, #10
 8004dc0:	d004      	beq.n	8004dcc <_puts_r+0x90>
 8004dc2:	6823      	ldr	r3, [r4, #0]
 8004dc4:	1c5a      	adds	r2, r3, #1
 8004dc6:	6022      	str	r2, [r4, #0]
 8004dc8:	7019      	strb	r1, [r3, #0]
 8004dca:	e7cf      	b.n	8004d6c <_puts_r+0x30>
 8004dcc:	4622      	mov	r2, r4
 8004dce:	4628      	mov	r0, r5
 8004dd0:	f000 f818 	bl	8004e04 <__swbuf_r>
 8004dd4:	3001      	adds	r0, #1
 8004dd6:	d1c9      	bne.n	8004d6c <_puts_r+0x30>
 8004dd8:	e7e9      	b.n	8004dae <_puts_r+0x72>
 8004dda:	6823      	ldr	r3, [r4, #0]
 8004ddc:	200a      	movs	r0, #10
 8004dde:	1c5a      	adds	r2, r3, #1
 8004de0:	6022      	str	r2, [r4, #0]
 8004de2:	7018      	strb	r0, [r3, #0]
 8004de4:	e7e5      	b.n	8004db2 <_puts_r+0x76>
 8004de6:	bf00      	nop
 8004de8:	08005664 	.word	0x08005664
 8004dec:	08005684 	.word	0x08005684
 8004df0:	08005644 	.word	0x08005644

08004df4 <puts>:
 8004df4:	4b02      	ldr	r3, [pc, #8]	; (8004e00 <puts+0xc>)
 8004df6:	4601      	mov	r1, r0
 8004df8:	6818      	ldr	r0, [r3, #0]
 8004dfa:	f7ff bf9f 	b.w	8004d3c <_puts_r>
 8004dfe:	bf00      	nop
 8004e00:	2000000c 	.word	0x2000000c

08004e04 <__swbuf_r>:
 8004e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e06:	460e      	mov	r6, r1
 8004e08:	4614      	mov	r4, r2
 8004e0a:	4605      	mov	r5, r0
 8004e0c:	b118      	cbz	r0, 8004e16 <__swbuf_r+0x12>
 8004e0e:	6983      	ldr	r3, [r0, #24]
 8004e10:	b90b      	cbnz	r3, 8004e16 <__swbuf_r+0x12>
 8004e12:	f000 f9a7 	bl	8005164 <__sinit>
 8004e16:	4b21      	ldr	r3, [pc, #132]	; (8004e9c <__swbuf_r+0x98>)
 8004e18:	429c      	cmp	r4, r3
 8004e1a:	d12a      	bne.n	8004e72 <__swbuf_r+0x6e>
 8004e1c:	686c      	ldr	r4, [r5, #4]
 8004e1e:	69a3      	ldr	r3, [r4, #24]
 8004e20:	60a3      	str	r3, [r4, #8]
 8004e22:	89a3      	ldrh	r3, [r4, #12]
 8004e24:	071a      	lsls	r2, r3, #28
 8004e26:	d52e      	bpl.n	8004e86 <__swbuf_r+0x82>
 8004e28:	6923      	ldr	r3, [r4, #16]
 8004e2a:	b363      	cbz	r3, 8004e86 <__swbuf_r+0x82>
 8004e2c:	6923      	ldr	r3, [r4, #16]
 8004e2e:	6820      	ldr	r0, [r4, #0]
 8004e30:	1ac0      	subs	r0, r0, r3
 8004e32:	6963      	ldr	r3, [r4, #20]
 8004e34:	b2f6      	uxtb	r6, r6
 8004e36:	4283      	cmp	r3, r0
 8004e38:	4637      	mov	r7, r6
 8004e3a:	dc04      	bgt.n	8004e46 <__swbuf_r+0x42>
 8004e3c:	4621      	mov	r1, r4
 8004e3e:	4628      	mov	r0, r5
 8004e40:	f000 f926 	bl	8005090 <_fflush_r>
 8004e44:	bb28      	cbnz	r0, 8004e92 <__swbuf_r+0x8e>
 8004e46:	68a3      	ldr	r3, [r4, #8]
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	60a3      	str	r3, [r4, #8]
 8004e4c:	6823      	ldr	r3, [r4, #0]
 8004e4e:	1c5a      	adds	r2, r3, #1
 8004e50:	6022      	str	r2, [r4, #0]
 8004e52:	701e      	strb	r6, [r3, #0]
 8004e54:	6963      	ldr	r3, [r4, #20]
 8004e56:	3001      	adds	r0, #1
 8004e58:	4283      	cmp	r3, r0
 8004e5a:	d004      	beq.n	8004e66 <__swbuf_r+0x62>
 8004e5c:	89a3      	ldrh	r3, [r4, #12]
 8004e5e:	07db      	lsls	r3, r3, #31
 8004e60:	d519      	bpl.n	8004e96 <__swbuf_r+0x92>
 8004e62:	2e0a      	cmp	r6, #10
 8004e64:	d117      	bne.n	8004e96 <__swbuf_r+0x92>
 8004e66:	4621      	mov	r1, r4
 8004e68:	4628      	mov	r0, r5
 8004e6a:	f000 f911 	bl	8005090 <_fflush_r>
 8004e6e:	b190      	cbz	r0, 8004e96 <__swbuf_r+0x92>
 8004e70:	e00f      	b.n	8004e92 <__swbuf_r+0x8e>
 8004e72:	4b0b      	ldr	r3, [pc, #44]	; (8004ea0 <__swbuf_r+0x9c>)
 8004e74:	429c      	cmp	r4, r3
 8004e76:	d101      	bne.n	8004e7c <__swbuf_r+0x78>
 8004e78:	68ac      	ldr	r4, [r5, #8]
 8004e7a:	e7d0      	b.n	8004e1e <__swbuf_r+0x1a>
 8004e7c:	4b09      	ldr	r3, [pc, #36]	; (8004ea4 <__swbuf_r+0xa0>)
 8004e7e:	429c      	cmp	r4, r3
 8004e80:	bf08      	it	eq
 8004e82:	68ec      	ldreq	r4, [r5, #12]
 8004e84:	e7cb      	b.n	8004e1e <__swbuf_r+0x1a>
 8004e86:	4621      	mov	r1, r4
 8004e88:	4628      	mov	r0, r5
 8004e8a:	f000 f80d 	bl	8004ea8 <__swsetup_r>
 8004e8e:	2800      	cmp	r0, #0
 8004e90:	d0cc      	beq.n	8004e2c <__swbuf_r+0x28>
 8004e92:	f04f 37ff 	mov.w	r7, #4294967295
 8004e96:	4638      	mov	r0, r7
 8004e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	08005664 	.word	0x08005664
 8004ea0:	08005684 	.word	0x08005684
 8004ea4:	08005644 	.word	0x08005644

08004ea8 <__swsetup_r>:
 8004ea8:	4b32      	ldr	r3, [pc, #200]	; (8004f74 <__swsetup_r+0xcc>)
 8004eaa:	b570      	push	{r4, r5, r6, lr}
 8004eac:	681d      	ldr	r5, [r3, #0]
 8004eae:	4606      	mov	r6, r0
 8004eb0:	460c      	mov	r4, r1
 8004eb2:	b125      	cbz	r5, 8004ebe <__swsetup_r+0x16>
 8004eb4:	69ab      	ldr	r3, [r5, #24]
 8004eb6:	b913      	cbnz	r3, 8004ebe <__swsetup_r+0x16>
 8004eb8:	4628      	mov	r0, r5
 8004eba:	f000 f953 	bl	8005164 <__sinit>
 8004ebe:	4b2e      	ldr	r3, [pc, #184]	; (8004f78 <__swsetup_r+0xd0>)
 8004ec0:	429c      	cmp	r4, r3
 8004ec2:	d10f      	bne.n	8004ee4 <__swsetup_r+0x3c>
 8004ec4:	686c      	ldr	r4, [r5, #4]
 8004ec6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004eca:	b29a      	uxth	r2, r3
 8004ecc:	0715      	lsls	r5, r2, #28
 8004ece:	d42c      	bmi.n	8004f2a <__swsetup_r+0x82>
 8004ed0:	06d0      	lsls	r0, r2, #27
 8004ed2:	d411      	bmi.n	8004ef8 <__swsetup_r+0x50>
 8004ed4:	2209      	movs	r2, #9
 8004ed6:	6032      	str	r2, [r6, #0]
 8004ed8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004edc:	81a3      	strh	r3, [r4, #12]
 8004ede:	f04f 30ff 	mov.w	r0, #4294967295
 8004ee2:	e03e      	b.n	8004f62 <__swsetup_r+0xba>
 8004ee4:	4b25      	ldr	r3, [pc, #148]	; (8004f7c <__swsetup_r+0xd4>)
 8004ee6:	429c      	cmp	r4, r3
 8004ee8:	d101      	bne.n	8004eee <__swsetup_r+0x46>
 8004eea:	68ac      	ldr	r4, [r5, #8]
 8004eec:	e7eb      	b.n	8004ec6 <__swsetup_r+0x1e>
 8004eee:	4b24      	ldr	r3, [pc, #144]	; (8004f80 <__swsetup_r+0xd8>)
 8004ef0:	429c      	cmp	r4, r3
 8004ef2:	bf08      	it	eq
 8004ef4:	68ec      	ldreq	r4, [r5, #12]
 8004ef6:	e7e6      	b.n	8004ec6 <__swsetup_r+0x1e>
 8004ef8:	0751      	lsls	r1, r2, #29
 8004efa:	d512      	bpl.n	8004f22 <__swsetup_r+0x7a>
 8004efc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004efe:	b141      	cbz	r1, 8004f12 <__swsetup_r+0x6a>
 8004f00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f04:	4299      	cmp	r1, r3
 8004f06:	d002      	beq.n	8004f0e <__swsetup_r+0x66>
 8004f08:	4630      	mov	r0, r6
 8004f0a:	f000 fa19 	bl	8005340 <_free_r>
 8004f0e:	2300      	movs	r3, #0
 8004f10:	6363      	str	r3, [r4, #52]	; 0x34
 8004f12:	89a3      	ldrh	r3, [r4, #12]
 8004f14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004f18:	81a3      	strh	r3, [r4, #12]
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	6063      	str	r3, [r4, #4]
 8004f1e:	6923      	ldr	r3, [r4, #16]
 8004f20:	6023      	str	r3, [r4, #0]
 8004f22:	89a3      	ldrh	r3, [r4, #12]
 8004f24:	f043 0308 	orr.w	r3, r3, #8
 8004f28:	81a3      	strh	r3, [r4, #12]
 8004f2a:	6923      	ldr	r3, [r4, #16]
 8004f2c:	b94b      	cbnz	r3, 8004f42 <__swsetup_r+0x9a>
 8004f2e:	89a3      	ldrh	r3, [r4, #12]
 8004f30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004f34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f38:	d003      	beq.n	8004f42 <__swsetup_r+0x9a>
 8004f3a:	4621      	mov	r1, r4
 8004f3c:	4630      	mov	r0, r6
 8004f3e:	f000 f9bf 	bl	80052c0 <__smakebuf_r>
 8004f42:	89a2      	ldrh	r2, [r4, #12]
 8004f44:	f012 0301 	ands.w	r3, r2, #1
 8004f48:	d00c      	beq.n	8004f64 <__swsetup_r+0xbc>
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	60a3      	str	r3, [r4, #8]
 8004f4e:	6963      	ldr	r3, [r4, #20]
 8004f50:	425b      	negs	r3, r3
 8004f52:	61a3      	str	r3, [r4, #24]
 8004f54:	6923      	ldr	r3, [r4, #16]
 8004f56:	b953      	cbnz	r3, 8004f6e <__swsetup_r+0xc6>
 8004f58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f5c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004f60:	d1ba      	bne.n	8004ed8 <__swsetup_r+0x30>
 8004f62:	bd70      	pop	{r4, r5, r6, pc}
 8004f64:	0792      	lsls	r2, r2, #30
 8004f66:	bf58      	it	pl
 8004f68:	6963      	ldrpl	r3, [r4, #20]
 8004f6a:	60a3      	str	r3, [r4, #8]
 8004f6c:	e7f2      	b.n	8004f54 <__swsetup_r+0xac>
 8004f6e:	2000      	movs	r0, #0
 8004f70:	e7f7      	b.n	8004f62 <__swsetup_r+0xba>
 8004f72:	bf00      	nop
 8004f74:	2000000c 	.word	0x2000000c
 8004f78:	08005664 	.word	0x08005664
 8004f7c:	08005684 	.word	0x08005684
 8004f80:	08005644 	.word	0x08005644

08004f84 <__sflush_r>:
 8004f84:	898a      	ldrh	r2, [r1, #12]
 8004f86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f8a:	4605      	mov	r5, r0
 8004f8c:	0710      	lsls	r0, r2, #28
 8004f8e:	460c      	mov	r4, r1
 8004f90:	d458      	bmi.n	8005044 <__sflush_r+0xc0>
 8004f92:	684b      	ldr	r3, [r1, #4]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	dc05      	bgt.n	8004fa4 <__sflush_r+0x20>
 8004f98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	dc02      	bgt.n	8004fa4 <__sflush_r+0x20>
 8004f9e:	2000      	movs	r0, #0
 8004fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fa4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004fa6:	2e00      	cmp	r6, #0
 8004fa8:	d0f9      	beq.n	8004f9e <__sflush_r+0x1a>
 8004faa:	2300      	movs	r3, #0
 8004fac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004fb0:	682f      	ldr	r7, [r5, #0]
 8004fb2:	6a21      	ldr	r1, [r4, #32]
 8004fb4:	602b      	str	r3, [r5, #0]
 8004fb6:	d032      	beq.n	800501e <__sflush_r+0x9a>
 8004fb8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004fba:	89a3      	ldrh	r3, [r4, #12]
 8004fbc:	075a      	lsls	r2, r3, #29
 8004fbe:	d505      	bpl.n	8004fcc <__sflush_r+0x48>
 8004fc0:	6863      	ldr	r3, [r4, #4]
 8004fc2:	1ac0      	subs	r0, r0, r3
 8004fc4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004fc6:	b10b      	cbz	r3, 8004fcc <__sflush_r+0x48>
 8004fc8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004fca:	1ac0      	subs	r0, r0, r3
 8004fcc:	2300      	movs	r3, #0
 8004fce:	4602      	mov	r2, r0
 8004fd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004fd2:	6a21      	ldr	r1, [r4, #32]
 8004fd4:	4628      	mov	r0, r5
 8004fd6:	47b0      	blx	r6
 8004fd8:	1c43      	adds	r3, r0, #1
 8004fda:	89a3      	ldrh	r3, [r4, #12]
 8004fdc:	d106      	bne.n	8004fec <__sflush_r+0x68>
 8004fde:	6829      	ldr	r1, [r5, #0]
 8004fe0:	291d      	cmp	r1, #29
 8004fe2:	d848      	bhi.n	8005076 <__sflush_r+0xf2>
 8004fe4:	4a29      	ldr	r2, [pc, #164]	; (800508c <__sflush_r+0x108>)
 8004fe6:	40ca      	lsrs	r2, r1
 8004fe8:	07d6      	lsls	r6, r2, #31
 8004fea:	d544      	bpl.n	8005076 <__sflush_r+0xf2>
 8004fec:	2200      	movs	r2, #0
 8004fee:	6062      	str	r2, [r4, #4]
 8004ff0:	04d9      	lsls	r1, r3, #19
 8004ff2:	6922      	ldr	r2, [r4, #16]
 8004ff4:	6022      	str	r2, [r4, #0]
 8004ff6:	d504      	bpl.n	8005002 <__sflush_r+0x7e>
 8004ff8:	1c42      	adds	r2, r0, #1
 8004ffa:	d101      	bne.n	8005000 <__sflush_r+0x7c>
 8004ffc:	682b      	ldr	r3, [r5, #0]
 8004ffe:	b903      	cbnz	r3, 8005002 <__sflush_r+0x7e>
 8005000:	6560      	str	r0, [r4, #84]	; 0x54
 8005002:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005004:	602f      	str	r7, [r5, #0]
 8005006:	2900      	cmp	r1, #0
 8005008:	d0c9      	beq.n	8004f9e <__sflush_r+0x1a>
 800500a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800500e:	4299      	cmp	r1, r3
 8005010:	d002      	beq.n	8005018 <__sflush_r+0x94>
 8005012:	4628      	mov	r0, r5
 8005014:	f000 f994 	bl	8005340 <_free_r>
 8005018:	2000      	movs	r0, #0
 800501a:	6360      	str	r0, [r4, #52]	; 0x34
 800501c:	e7c0      	b.n	8004fa0 <__sflush_r+0x1c>
 800501e:	2301      	movs	r3, #1
 8005020:	4628      	mov	r0, r5
 8005022:	47b0      	blx	r6
 8005024:	1c41      	adds	r1, r0, #1
 8005026:	d1c8      	bne.n	8004fba <__sflush_r+0x36>
 8005028:	682b      	ldr	r3, [r5, #0]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d0c5      	beq.n	8004fba <__sflush_r+0x36>
 800502e:	2b1d      	cmp	r3, #29
 8005030:	d001      	beq.n	8005036 <__sflush_r+0xb2>
 8005032:	2b16      	cmp	r3, #22
 8005034:	d101      	bne.n	800503a <__sflush_r+0xb6>
 8005036:	602f      	str	r7, [r5, #0]
 8005038:	e7b1      	b.n	8004f9e <__sflush_r+0x1a>
 800503a:	89a3      	ldrh	r3, [r4, #12]
 800503c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005040:	81a3      	strh	r3, [r4, #12]
 8005042:	e7ad      	b.n	8004fa0 <__sflush_r+0x1c>
 8005044:	690f      	ldr	r7, [r1, #16]
 8005046:	2f00      	cmp	r7, #0
 8005048:	d0a9      	beq.n	8004f9e <__sflush_r+0x1a>
 800504a:	0793      	lsls	r3, r2, #30
 800504c:	680e      	ldr	r6, [r1, #0]
 800504e:	bf08      	it	eq
 8005050:	694b      	ldreq	r3, [r1, #20]
 8005052:	600f      	str	r7, [r1, #0]
 8005054:	bf18      	it	ne
 8005056:	2300      	movne	r3, #0
 8005058:	eba6 0807 	sub.w	r8, r6, r7
 800505c:	608b      	str	r3, [r1, #8]
 800505e:	f1b8 0f00 	cmp.w	r8, #0
 8005062:	dd9c      	ble.n	8004f9e <__sflush_r+0x1a>
 8005064:	4643      	mov	r3, r8
 8005066:	463a      	mov	r2, r7
 8005068:	6a21      	ldr	r1, [r4, #32]
 800506a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800506c:	4628      	mov	r0, r5
 800506e:	47b0      	blx	r6
 8005070:	2800      	cmp	r0, #0
 8005072:	dc06      	bgt.n	8005082 <__sflush_r+0xfe>
 8005074:	89a3      	ldrh	r3, [r4, #12]
 8005076:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800507a:	81a3      	strh	r3, [r4, #12]
 800507c:	f04f 30ff 	mov.w	r0, #4294967295
 8005080:	e78e      	b.n	8004fa0 <__sflush_r+0x1c>
 8005082:	4407      	add	r7, r0
 8005084:	eba8 0800 	sub.w	r8, r8, r0
 8005088:	e7e9      	b.n	800505e <__sflush_r+0xda>
 800508a:	bf00      	nop
 800508c:	20400001 	.word	0x20400001

08005090 <_fflush_r>:
 8005090:	b538      	push	{r3, r4, r5, lr}
 8005092:	690b      	ldr	r3, [r1, #16]
 8005094:	4605      	mov	r5, r0
 8005096:	460c      	mov	r4, r1
 8005098:	b1db      	cbz	r3, 80050d2 <_fflush_r+0x42>
 800509a:	b118      	cbz	r0, 80050a4 <_fflush_r+0x14>
 800509c:	6983      	ldr	r3, [r0, #24]
 800509e:	b90b      	cbnz	r3, 80050a4 <_fflush_r+0x14>
 80050a0:	f000 f860 	bl	8005164 <__sinit>
 80050a4:	4b0c      	ldr	r3, [pc, #48]	; (80050d8 <_fflush_r+0x48>)
 80050a6:	429c      	cmp	r4, r3
 80050a8:	d109      	bne.n	80050be <_fflush_r+0x2e>
 80050aa:	686c      	ldr	r4, [r5, #4]
 80050ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050b0:	b17b      	cbz	r3, 80050d2 <_fflush_r+0x42>
 80050b2:	4621      	mov	r1, r4
 80050b4:	4628      	mov	r0, r5
 80050b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80050ba:	f7ff bf63 	b.w	8004f84 <__sflush_r>
 80050be:	4b07      	ldr	r3, [pc, #28]	; (80050dc <_fflush_r+0x4c>)
 80050c0:	429c      	cmp	r4, r3
 80050c2:	d101      	bne.n	80050c8 <_fflush_r+0x38>
 80050c4:	68ac      	ldr	r4, [r5, #8]
 80050c6:	e7f1      	b.n	80050ac <_fflush_r+0x1c>
 80050c8:	4b05      	ldr	r3, [pc, #20]	; (80050e0 <_fflush_r+0x50>)
 80050ca:	429c      	cmp	r4, r3
 80050cc:	bf08      	it	eq
 80050ce:	68ec      	ldreq	r4, [r5, #12]
 80050d0:	e7ec      	b.n	80050ac <_fflush_r+0x1c>
 80050d2:	2000      	movs	r0, #0
 80050d4:	bd38      	pop	{r3, r4, r5, pc}
 80050d6:	bf00      	nop
 80050d8:	08005664 	.word	0x08005664
 80050dc:	08005684 	.word	0x08005684
 80050e0:	08005644 	.word	0x08005644

080050e4 <std>:
 80050e4:	2300      	movs	r3, #0
 80050e6:	b510      	push	{r4, lr}
 80050e8:	4604      	mov	r4, r0
 80050ea:	e9c0 3300 	strd	r3, r3, [r0]
 80050ee:	6083      	str	r3, [r0, #8]
 80050f0:	8181      	strh	r1, [r0, #12]
 80050f2:	6643      	str	r3, [r0, #100]	; 0x64
 80050f4:	81c2      	strh	r2, [r0, #14]
 80050f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80050fa:	6183      	str	r3, [r0, #24]
 80050fc:	4619      	mov	r1, r3
 80050fe:	2208      	movs	r2, #8
 8005100:	305c      	adds	r0, #92	; 0x5c
 8005102:	f7ff fe13 	bl	8004d2c <memset>
 8005106:	4b05      	ldr	r3, [pc, #20]	; (800511c <std+0x38>)
 8005108:	6263      	str	r3, [r4, #36]	; 0x24
 800510a:	4b05      	ldr	r3, [pc, #20]	; (8005120 <std+0x3c>)
 800510c:	62a3      	str	r3, [r4, #40]	; 0x28
 800510e:	4b05      	ldr	r3, [pc, #20]	; (8005124 <std+0x40>)
 8005110:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005112:	4b05      	ldr	r3, [pc, #20]	; (8005128 <std+0x44>)
 8005114:	6224      	str	r4, [r4, #32]
 8005116:	6323      	str	r3, [r4, #48]	; 0x30
 8005118:	bd10      	pop	{r4, pc}
 800511a:	bf00      	nop
 800511c:	080054b1 	.word	0x080054b1
 8005120:	080054d3 	.word	0x080054d3
 8005124:	0800550b 	.word	0x0800550b
 8005128:	0800552f 	.word	0x0800552f

0800512c <_cleanup_r>:
 800512c:	4901      	ldr	r1, [pc, #4]	; (8005134 <_cleanup_r+0x8>)
 800512e:	f000 b885 	b.w	800523c <_fwalk_reent>
 8005132:	bf00      	nop
 8005134:	08005091 	.word	0x08005091

08005138 <__sfmoreglue>:
 8005138:	b570      	push	{r4, r5, r6, lr}
 800513a:	1e4a      	subs	r2, r1, #1
 800513c:	2568      	movs	r5, #104	; 0x68
 800513e:	4355      	muls	r5, r2
 8005140:	460e      	mov	r6, r1
 8005142:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005146:	f000 f949 	bl	80053dc <_malloc_r>
 800514a:	4604      	mov	r4, r0
 800514c:	b140      	cbz	r0, 8005160 <__sfmoreglue+0x28>
 800514e:	2100      	movs	r1, #0
 8005150:	e9c0 1600 	strd	r1, r6, [r0]
 8005154:	300c      	adds	r0, #12
 8005156:	60a0      	str	r0, [r4, #8]
 8005158:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800515c:	f7ff fde6 	bl	8004d2c <memset>
 8005160:	4620      	mov	r0, r4
 8005162:	bd70      	pop	{r4, r5, r6, pc}

08005164 <__sinit>:
 8005164:	6983      	ldr	r3, [r0, #24]
 8005166:	b510      	push	{r4, lr}
 8005168:	4604      	mov	r4, r0
 800516a:	bb33      	cbnz	r3, 80051ba <__sinit+0x56>
 800516c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005170:	6503      	str	r3, [r0, #80]	; 0x50
 8005172:	4b12      	ldr	r3, [pc, #72]	; (80051bc <__sinit+0x58>)
 8005174:	4a12      	ldr	r2, [pc, #72]	; (80051c0 <__sinit+0x5c>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	6282      	str	r2, [r0, #40]	; 0x28
 800517a:	4298      	cmp	r0, r3
 800517c:	bf04      	itt	eq
 800517e:	2301      	moveq	r3, #1
 8005180:	6183      	streq	r3, [r0, #24]
 8005182:	f000 f81f 	bl	80051c4 <__sfp>
 8005186:	6060      	str	r0, [r4, #4]
 8005188:	4620      	mov	r0, r4
 800518a:	f000 f81b 	bl	80051c4 <__sfp>
 800518e:	60a0      	str	r0, [r4, #8]
 8005190:	4620      	mov	r0, r4
 8005192:	f000 f817 	bl	80051c4 <__sfp>
 8005196:	2200      	movs	r2, #0
 8005198:	60e0      	str	r0, [r4, #12]
 800519a:	2104      	movs	r1, #4
 800519c:	6860      	ldr	r0, [r4, #4]
 800519e:	f7ff ffa1 	bl	80050e4 <std>
 80051a2:	2201      	movs	r2, #1
 80051a4:	2109      	movs	r1, #9
 80051a6:	68a0      	ldr	r0, [r4, #8]
 80051a8:	f7ff ff9c 	bl	80050e4 <std>
 80051ac:	2202      	movs	r2, #2
 80051ae:	2112      	movs	r1, #18
 80051b0:	68e0      	ldr	r0, [r4, #12]
 80051b2:	f7ff ff97 	bl	80050e4 <std>
 80051b6:	2301      	movs	r3, #1
 80051b8:	61a3      	str	r3, [r4, #24]
 80051ba:	bd10      	pop	{r4, pc}
 80051bc:	08005640 	.word	0x08005640
 80051c0:	0800512d 	.word	0x0800512d

080051c4 <__sfp>:
 80051c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051c6:	4b1b      	ldr	r3, [pc, #108]	; (8005234 <__sfp+0x70>)
 80051c8:	681e      	ldr	r6, [r3, #0]
 80051ca:	69b3      	ldr	r3, [r6, #24]
 80051cc:	4607      	mov	r7, r0
 80051ce:	b913      	cbnz	r3, 80051d6 <__sfp+0x12>
 80051d0:	4630      	mov	r0, r6
 80051d2:	f7ff ffc7 	bl	8005164 <__sinit>
 80051d6:	3648      	adds	r6, #72	; 0x48
 80051d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80051dc:	3b01      	subs	r3, #1
 80051de:	d503      	bpl.n	80051e8 <__sfp+0x24>
 80051e0:	6833      	ldr	r3, [r6, #0]
 80051e2:	b133      	cbz	r3, 80051f2 <__sfp+0x2e>
 80051e4:	6836      	ldr	r6, [r6, #0]
 80051e6:	e7f7      	b.n	80051d8 <__sfp+0x14>
 80051e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80051ec:	b16d      	cbz	r5, 800520a <__sfp+0x46>
 80051ee:	3468      	adds	r4, #104	; 0x68
 80051f0:	e7f4      	b.n	80051dc <__sfp+0x18>
 80051f2:	2104      	movs	r1, #4
 80051f4:	4638      	mov	r0, r7
 80051f6:	f7ff ff9f 	bl	8005138 <__sfmoreglue>
 80051fa:	6030      	str	r0, [r6, #0]
 80051fc:	2800      	cmp	r0, #0
 80051fe:	d1f1      	bne.n	80051e4 <__sfp+0x20>
 8005200:	230c      	movs	r3, #12
 8005202:	603b      	str	r3, [r7, #0]
 8005204:	4604      	mov	r4, r0
 8005206:	4620      	mov	r0, r4
 8005208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800520a:	4b0b      	ldr	r3, [pc, #44]	; (8005238 <__sfp+0x74>)
 800520c:	6665      	str	r5, [r4, #100]	; 0x64
 800520e:	e9c4 5500 	strd	r5, r5, [r4]
 8005212:	60a5      	str	r5, [r4, #8]
 8005214:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005218:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800521c:	2208      	movs	r2, #8
 800521e:	4629      	mov	r1, r5
 8005220:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005224:	f7ff fd82 	bl	8004d2c <memset>
 8005228:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800522c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005230:	e7e9      	b.n	8005206 <__sfp+0x42>
 8005232:	bf00      	nop
 8005234:	08005640 	.word	0x08005640
 8005238:	ffff0001 	.word	0xffff0001

0800523c <_fwalk_reent>:
 800523c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005240:	4680      	mov	r8, r0
 8005242:	4689      	mov	r9, r1
 8005244:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005248:	2600      	movs	r6, #0
 800524a:	b914      	cbnz	r4, 8005252 <_fwalk_reent+0x16>
 800524c:	4630      	mov	r0, r6
 800524e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005252:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005256:	3f01      	subs	r7, #1
 8005258:	d501      	bpl.n	800525e <_fwalk_reent+0x22>
 800525a:	6824      	ldr	r4, [r4, #0]
 800525c:	e7f5      	b.n	800524a <_fwalk_reent+0xe>
 800525e:	89ab      	ldrh	r3, [r5, #12]
 8005260:	2b01      	cmp	r3, #1
 8005262:	d907      	bls.n	8005274 <_fwalk_reent+0x38>
 8005264:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005268:	3301      	adds	r3, #1
 800526a:	d003      	beq.n	8005274 <_fwalk_reent+0x38>
 800526c:	4629      	mov	r1, r5
 800526e:	4640      	mov	r0, r8
 8005270:	47c8      	blx	r9
 8005272:	4306      	orrs	r6, r0
 8005274:	3568      	adds	r5, #104	; 0x68
 8005276:	e7ee      	b.n	8005256 <_fwalk_reent+0x1a>

08005278 <__swhatbuf_r>:
 8005278:	b570      	push	{r4, r5, r6, lr}
 800527a:	460e      	mov	r6, r1
 800527c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005280:	2900      	cmp	r1, #0
 8005282:	b096      	sub	sp, #88	; 0x58
 8005284:	4614      	mov	r4, r2
 8005286:	461d      	mov	r5, r3
 8005288:	da07      	bge.n	800529a <__swhatbuf_r+0x22>
 800528a:	2300      	movs	r3, #0
 800528c:	602b      	str	r3, [r5, #0]
 800528e:	89b3      	ldrh	r3, [r6, #12]
 8005290:	061a      	lsls	r2, r3, #24
 8005292:	d410      	bmi.n	80052b6 <__swhatbuf_r+0x3e>
 8005294:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005298:	e00e      	b.n	80052b8 <__swhatbuf_r+0x40>
 800529a:	466a      	mov	r2, sp
 800529c:	f000 f96e 	bl	800557c <_fstat_r>
 80052a0:	2800      	cmp	r0, #0
 80052a2:	dbf2      	blt.n	800528a <__swhatbuf_r+0x12>
 80052a4:	9a01      	ldr	r2, [sp, #4]
 80052a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80052aa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80052ae:	425a      	negs	r2, r3
 80052b0:	415a      	adcs	r2, r3
 80052b2:	602a      	str	r2, [r5, #0]
 80052b4:	e7ee      	b.n	8005294 <__swhatbuf_r+0x1c>
 80052b6:	2340      	movs	r3, #64	; 0x40
 80052b8:	2000      	movs	r0, #0
 80052ba:	6023      	str	r3, [r4, #0]
 80052bc:	b016      	add	sp, #88	; 0x58
 80052be:	bd70      	pop	{r4, r5, r6, pc}

080052c0 <__smakebuf_r>:
 80052c0:	898b      	ldrh	r3, [r1, #12]
 80052c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80052c4:	079d      	lsls	r5, r3, #30
 80052c6:	4606      	mov	r6, r0
 80052c8:	460c      	mov	r4, r1
 80052ca:	d507      	bpl.n	80052dc <__smakebuf_r+0x1c>
 80052cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80052d0:	6023      	str	r3, [r4, #0]
 80052d2:	6123      	str	r3, [r4, #16]
 80052d4:	2301      	movs	r3, #1
 80052d6:	6163      	str	r3, [r4, #20]
 80052d8:	b002      	add	sp, #8
 80052da:	bd70      	pop	{r4, r5, r6, pc}
 80052dc:	ab01      	add	r3, sp, #4
 80052de:	466a      	mov	r2, sp
 80052e0:	f7ff ffca 	bl	8005278 <__swhatbuf_r>
 80052e4:	9900      	ldr	r1, [sp, #0]
 80052e6:	4605      	mov	r5, r0
 80052e8:	4630      	mov	r0, r6
 80052ea:	f000 f877 	bl	80053dc <_malloc_r>
 80052ee:	b948      	cbnz	r0, 8005304 <__smakebuf_r+0x44>
 80052f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052f4:	059a      	lsls	r2, r3, #22
 80052f6:	d4ef      	bmi.n	80052d8 <__smakebuf_r+0x18>
 80052f8:	f023 0303 	bic.w	r3, r3, #3
 80052fc:	f043 0302 	orr.w	r3, r3, #2
 8005300:	81a3      	strh	r3, [r4, #12]
 8005302:	e7e3      	b.n	80052cc <__smakebuf_r+0xc>
 8005304:	4b0d      	ldr	r3, [pc, #52]	; (800533c <__smakebuf_r+0x7c>)
 8005306:	62b3      	str	r3, [r6, #40]	; 0x28
 8005308:	89a3      	ldrh	r3, [r4, #12]
 800530a:	6020      	str	r0, [r4, #0]
 800530c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005310:	81a3      	strh	r3, [r4, #12]
 8005312:	9b00      	ldr	r3, [sp, #0]
 8005314:	6163      	str	r3, [r4, #20]
 8005316:	9b01      	ldr	r3, [sp, #4]
 8005318:	6120      	str	r0, [r4, #16]
 800531a:	b15b      	cbz	r3, 8005334 <__smakebuf_r+0x74>
 800531c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005320:	4630      	mov	r0, r6
 8005322:	f000 f93d 	bl	80055a0 <_isatty_r>
 8005326:	b128      	cbz	r0, 8005334 <__smakebuf_r+0x74>
 8005328:	89a3      	ldrh	r3, [r4, #12]
 800532a:	f023 0303 	bic.w	r3, r3, #3
 800532e:	f043 0301 	orr.w	r3, r3, #1
 8005332:	81a3      	strh	r3, [r4, #12]
 8005334:	89a3      	ldrh	r3, [r4, #12]
 8005336:	431d      	orrs	r5, r3
 8005338:	81a5      	strh	r5, [r4, #12]
 800533a:	e7cd      	b.n	80052d8 <__smakebuf_r+0x18>
 800533c:	0800512d 	.word	0x0800512d

08005340 <_free_r>:
 8005340:	b538      	push	{r3, r4, r5, lr}
 8005342:	4605      	mov	r5, r0
 8005344:	2900      	cmp	r1, #0
 8005346:	d045      	beq.n	80053d4 <_free_r+0x94>
 8005348:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800534c:	1f0c      	subs	r4, r1, #4
 800534e:	2b00      	cmp	r3, #0
 8005350:	bfb8      	it	lt
 8005352:	18e4      	addlt	r4, r4, r3
 8005354:	f000 f946 	bl	80055e4 <__malloc_lock>
 8005358:	4a1f      	ldr	r2, [pc, #124]	; (80053d8 <_free_r+0x98>)
 800535a:	6813      	ldr	r3, [r2, #0]
 800535c:	4610      	mov	r0, r2
 800535e:	b933      	cbnz	r3, 800536e <_free_r+0x2e>
 8005360:	6063      	str	r3, [r4, #4]
 8005362:	6014      	str	r4, [r2, #0]
 8005364:	4628      	mov	r0, r5
 8005366:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800536a:	f000 b93c 	b.w	80055e6 <__malloc_unlock>
 800536e:	42a3      	cmp	r3, r4
 8005370:	d90c      	bls.n	800538c <_free_r+0x4c>
 8005372:	6821      	ldr	r1, [r4, #0]
 8005374:	1862      	adds	r2, r4, r1
 8005376:	4293      	cmp	r3, r2
 8005378:	bf04      	itt	eq
 800537a:	681a      	ldreq	r2, [r3, #0]
 800537c:	685b      	ldreq	r3, [r3, #4]
 800537e:	6063      	str	r3, [r4, #4]
 8005380:	bf04      	itt	eq
 8005382:	1852      	addeq	r2, r2, r1
 8005384:	6022      	streq	r2, [r4, #0]
 8005386:	6004      	str	r4, [r0, #0]
 8005388:	e7ec      	b.n	8005364 <_free_r+0x24>
 800538a:	4613      	mov	r3, r2
 800538c:	685a      	ldr	r2, [r3, #4]
 800538e:	b10a      	cbz	r2, 8005394 <_free_r+0x54>
 8005390:	42a2      	cmp	r2, r4
 8005392:	d9fa      	bls.n	800538a <_free_r+0x4a>
 8005394:	6819      	ldr	r1, [r3, #0]
 8005396:	1858      	adds	r0, r3, r1
 8005398:	42a0      	cmp	r0, r4
 800539a:	d10b      	bne.n	80053b4 <_free_r+0x74>
 800539c:	6820      	ldr	r0, [r4, #0]
 800539e:	4401      	add	r1, r0
 80053a0:	1858      	adds	r0, r3, r1
 80053a2:	4282      	cmp	r2, r0
 80053a4:	6019      	str	r1, [r3, #0]
 80053a6:	d1dd      	bne.n	8005364 <_free_r+0x24>
 80053a8:	6810      	ldr	r0, [r2, #0]
 80053aa:	6852      	ldr	r2, [r2, #4]
 80053ac:	605a      	str	r2, [r3, #4]
 80053ae:	4401      	add	r1, r0
 80053b0:	6019      	str	r1, [r3, #0]
 80053b2:	e7d7      	b.n	8005364 <_free_r+0x24>
 80053b4:	d902      	bls.n	80053bc <_free_r+0x7c>
 80053b6:	230c      	movs	r3, #12
 80053b8:	602b      	str	r3, [r5, #0]
 80053ba:	e7d3      	b.n	8005364 <_free_r+0x24>
 80053bc:	6820      	ldr	r0, [r4, #0]
 80053be:	1821      	adds	r1, r4, r0
 80053c0:	428a      	cmp	r2, r1
 80053c2:	bf04      	itt	eq
 80053c4:	6811      	ldreq	r1, [r2, #0]
 80053c6:	6852      	ldreq	r2, [r2, #4]
 80053c8:	6062      	str	r2, [r4, #4]
 80053ca:	bf04      	itt	eq
 80053cc:	1809      	addeq	r1, r1, r0
 80053ce:	6021      	streq	r1, [r4, #0]
 80053d0:	605c      	str	r4, [r3, #4]
 80053d2:	e7c7      	b.n	8005364 <_free_r+0x24>
 80053d4:	bd38      	pop	{r3, r4, r5, pc}
 80053d6:	bf00      	nop
 80053d8:	200000a8 	.word	0x200000a8

080053dc <_malloc_r>:
 80053dc:	b570      	push	{r4, r5, r6, lr}
 80053de:	1ccd      	adds	r5, r1, #3
 80053e0:	f025 0503 	bic.w	r5, r5, #3
 80053e4:	3508      	adds	r5, #8
 80053e6:	2d0c      	cmp	r5, #12
 80053e8:	bf38      	it	cc
 80053ea:	250c      	movcc	r5, #12
 80053ec:	2d00      	cmp	r5, #0
 80053ee:	4606      	mov	r6, r0
 80053f0:	db01      	blt.n	80053f6 <_malloc_r+0x1a>
 80053f2:	42a9      	cmp	r1, r5
 80053f4:	d903      	bls.n	80053fe <_malloc_r+0x22>
 80053f6:	230c      	movs	r3, #12
 80053f8:	6033      	str	r3, [r6, #0]
 80053fa:	2000      	movs	r0, #0
 80053fc:	bd70      	pop	{r4, r5, r6, pc}
 80053fe:	f000 f8f1 	bl	80055e4 <__malloc_lock>
 8005402:	4a21      	ldr	r2, [pc, #132]	; (8005488 <_malloc_r+0xac>)
 8005404:	6814      	ldr	r4, [r2, #0]
 8005406:	4621      	mov	r1, r4
 8005408:	b991      	cbnz	r1, 8005430 <_malloc_r+0x54>
 800540a:	4c20      	ldr	r4, [pc, #128]	; (800548c <_malloc_r+0xb0>)
 800540c:	6823      	ldr	r3, [r4, #0]
 800540e:	b91b      	cbnz	r3, 8005418 <_malloc_r+0x3c>
 8005410:	4630      	mov	r0, r6
 8005412:	f000 f83d 	bl	8005490 <_sbrk_r>
 8005416:	6020      	str	r0, [r4, #0]
 8005418:	4629      	mov	r1, r5
 800541a:	4630      	mov	r0, r6
 800541c:	f000 f838 	bl	8005490 <_sbrk_r>
 8005420:	1c43      	adds	r3, r0, #1
 8005422:	d124      	bne.n	800546e <_malloc_r+0x92>
 8005424:	230c      	movs	r3, #12
 8005426:	6033      	str	r3, [r6, #0]
 8005428:	4630      	mov	r0, r6
 800542a:	f000 f8dc 	bl	80055e6 <__malloc_unlock>
 800542e:	e7e4      	b.n	80053fa <_malloc_r+0x1e>
 8005430:	680b      	ldr	r3, [r1, #0]
 8005432:	1b5b      	subs	r3, r3, r5
 8005434:	d418      	bmi.n	8005468 <_malloc_r+0x8c>
 8005436:	2b0b      	cmp	r3, #11
 8005438:	d90f      	bls.n	800545a <_malloc_r+0x7e>
 800543a:	600b      	str	r3, [r1, #0]
 800543c:	50cd      	str	r5, [r1, r3]
 800543e:	18cc      	adds	r4, r1, r3
 8005440:	4630      	mov	r0, r6
 8005442:	f000 f8d0 	bl	80055e6 <__malloc_unlock>
 8005446:	f104 000b 	add.w	r0, r4, #11
 800544a:	1d23      	adds	r3, r4, #4
 800544c:	f020 0007 	bic.w	r0, r0, #7
 8005450:	1ac3      	subs	r3, r0, r3
 8005452:	d0d3      	beq.n	80053fc <_malloc_r+0x20>
 8005454:	425a      	negs	r2, r3
 8005456:	50e2      	str	r2, [r4, r3]
 8005458:	e7d0      	b.n	80053fc <_malloc_r+0x20>
 800545a:	428c      	cmp	r4, r1
 800545c:	684b      	ldr	r3, [r1, #4]
 800545e:	bf16      	itet	ne
 8005460:	6063      	strne	r3, [r4, #4]
 8005462:	6013      	streq	r3, [r2, #0]
 8005464:	460c      	movne	r4, r1
 8005466:	e7eb      	b.n	8005440 <_malloc_r+0x64>
 8005468:	460c      	mov	r4, r1
 800546a:	6849      	ldr	r1, [r1, #4]
 800546c:	e7cc      	b.n	8005408 <_malloc_r+0x2c>
 800546e:	1cc4      	adds	r4, r0, #3
 8005470:	f024 0403 	bic.w	r4, r4, #3
 8005474:	42a0      	cmp	r0, r4
 8005476:	d005      	beq.n	8005484 <_malloc_r+0xa8>
 8005478:	1a21      	subs	r1, r4, r0
 800547a:	4630      	mov	r0, r6
 800547c:	f000 f808 	bl	8005490 <_sbrk_r>
 8005480:	3001      	adds	r0, #1
 8005482:	d0cf      	beq.n	8005424 <_malloc_r+0x48>
 8005484:	6025      	str	r5, [r4, #0]
 8005486:	e7db      	b.n	8005440 <_malloc_r+0x64>
 8005488:	200000a8 	.word	0x200000a8
 800548c:	200000ac 	.word	0x200000ac

08005490 <_sbrk_r>:
 8005490:	b538      	push	{r3, r4, r5, lr}
 8005492:	4c06      	ldr	r4, [pc, #24]	; (80054ac <_sbrk_r+0x1c>)
 8005494:	2300      	movs	r3, #0
 8005496:	4605      	mov	r5, r0
 8005498:	4608      	mov	r0, r1
 800549a:	6023      	str	r3, [r4, #0]
 800549c:	f7fc f878 	bl	8001590 <_sbrk>
 80054a0:	1c43      	adds	r3, r0, #1
 80054a2:	d102      	bne.n	80054aa <_sbrk_r+0x1a>
 80054a4:	6823      	ldr	r3, [r4, #0]
 80054a6:	b103      	cbz	r3, 80054aa <_sbrk_r+0x1a>
 80054a8:	602b      	str	r3, [r5, #0]
 80054aa:	bd38      	pop	{r3, r4, r5, pc}
 80054ac:	20000ec4 	.word	0x20000ec4

080054b0 <__sread>:
 80054b0:	b510      	push	{r4, lr}
 80054b2:	460c      	mov	r4, r1
 80054b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054b8:	f000 f896 	bl	80055e8 <_read_r>
 80054bc:	2800      	cmp	r0, #0
 80054be:	bfab      	itete	ge
 80054c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80054c2:	89a3      	ldrhlt	r3, [r4, #12]
 80054c4:	181b      	addge	r3, r3, r0
 80054c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80054ca:	bfac      	ite	ge
 80054cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80054ce:	81a3      	strhlt	r3, [r4, #12]
 80054d0:	bd10      	pop	{r4, pc}

080054d2 <__swrite>:
 80054d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054d6:	461f      	mov	r7, r3
 80054d8:	898b      	ldrh	r3, [r1, #12]
 80054da:	05db      	lsls	r3, r3, #23
 80054dc:	4605      	mov	r5, r0
 80054de:	460c      	mov	r4, r1
 80054e0:	4616      	mov	r6, r2
 80054e2:	d505      	bpl.n	80054f0 <__swrite+0x1e>
 80054e4:	2302      	movs	r3, #2
 80054e6:	2200      	movs	r2, #0
 80054e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054ec:	f000 f868 	bl	80055c0 <_lseek_r>
 80054f0:	89a3      	ldrh	r3, [r4, #12]
 80054f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054fa:	81a3      	strh	r3, [r4, #12]
 80054fc:	4632      	mov	r2, r6
 80054fe:	463b      	mov	r3, r7
 8005500:	4628      	mov	r0, r5
 8005502:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005506:	f000 b817 	b.w	8005538 <_write_r>

0800550a <__sseek>:
 800550a:	b510      	push	{r4, lr}
 800550c:	460c      	mov	r4, r1
 800550e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005512:	f000 f855 	bl	80055c0 <_lseek_r>
 8005516:	1c43      	adds	r3, r0, #1
 8005518:	89a3      	ldrh	r3, [r4, #12]
 800551a:	bf15      	itete	ne
 800551c:	6560      	strne	r0, [r4, #84]	; 0x54
 800551e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005522:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005526:	81a3      	strheq	r3, [r4, #12]
 8005528:	bf18      	it	ne
 800552a:	81a3      	strhne	r3, [r4, #12]
 800552c:	bd10      	pop	{r4, pc}

0800552e <__sclose>:
 800552e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005532:	f000 b813 	b.w	800555c <_close_r>
	...

08005538 <_write_r>:
 8005538:	b538      	push	{r3, r4, r5, lr}
 800553a:	4c07      	ldr	r4, [pc, #28]	; (8005558 <_write_r+0x20>)
 800553c:	4605      	mov	r5, r0
 800553e:	4608      	mov	r0, r1
 8005540:	4611      	mov	r1, r2
 8005542:	2200      	movs	r2, #0
 8005544:	6022      	str	r2, [r4, #0]
 8005546:	461a      	mov	r2, r3
 8005548:	f7fb feb6 	bl	80012b8 <_write>
 800554c:	1c43      	adds	r3, r0, #1
 800554e:	d102      	bne.n	8005556 <_write_r+0x1e>
 8005550:	6823      	ldr	r3, [r4, #0]
 8005552:	b103      	cbz	r3, 8005556 <_write_r+0x1e>
 8005554:	602b      	str	r3, [r5, #0]
 8005556:	bd38      	pop	{r3, r4, r5, pc}
 8005558:	20000ec4 	.word	0x20000ec4

0800555c <_close_r>:
 800555c:	b538      	push	{r3, r4, r5, lr}
 800555e:	4c06      	ldr	r4, [pc, #24]	; (8005578 <_close_r+0x1c>)
 8005560:	2300      	movs	r3, #0
 8005562:	4605      	mov	r5, r0
 8005564:	4608      	mov	r0, r1
 8005566:	6023      	str	r3, [r4, #0]
 8005568:	f7fb ffdd 	bl	8001526 <_close>
 800556c:	1c43      	adds	r3, r0, #1
 800556e:	d102      	bne.n	8005576 <_close_r+0x1a>
 8005570:	6823      	ldr	r3, [r4, #0]
 8005572:	b103      	cbz	r3, 8005576 <_close_r+0x1a>
 8005574:	602b      	str	r3, [r5, #0]
 8005576:	bd38      	pop	{r3, r4, r5, pc}
 8005578:	20000ec4 	.word	0x20000ec4

0800557c <_fstat_r>:
 800557c:	b538      	push	{r3, r4, r5, lr}
 800557e:	4c07      	ldr	r4, [pc, #28]	; (800559c <_fstat_r+0x20>)
 8005580:	2300      	movs	r3, #0
 8005582:	4605      	mov	r5, r0
 8005584:	4608      	mov	r0, r1
 8005586:	4611      	mov	r1, r2
 8005588:	6023      	str	r3, [r4, #0]
 800558a:	f7fb ffd8 	bl	800153e <_fstat>
 800558e:	1c43      	adds	r3, r0, #1
 8005590:	d102      	bne.n	8005598 <_fstat_r+0x1c>
 8005592:	6823      	ldr	r3, [r4, #0]
 8005594:	b103      	cbz	r3, 8005598 <_fstat_r+0x1c>
 8005596:	602b      	str	r3, [r5, #0]
 8005598:	bd38      	pop	{r3, r4, r5, pc}
 800559a:	bf00      	nop
 800559c:	20000ec4 	.word	0x20000ec4

080055a0 <_isatty_r>:
 80055a0:	b538      	push	{r3, r4, r5, lr}
 80055a2:	4c06      	ldr	r4, [pc, #24]	; (80055bc <_isatty_r+0x1c>)
 80055a4:	2300      	movs	r3, #0
 80055a6:	4605      	mov	r5, r0
 80055a8:	4608      	mov	r0, r1
 80055aa:	6023      	str	r3, [r4, #0]
 80055ac:	f7fb ffd7 	bl	800155e <_isatty>
 80055b0:	1c43      	adds	r3, r0, #1
 80055b2:	d102      	bne.n	80055ba <_isatty_r+0x1a>
 80055b4:	6823      	ldr	r3, [r4, #0]
 80055b6:	b103      	cbz	r3, 80055ba <_isatty_r+0x1a>
 80055b8:	602b      	str	r3, [r5, #0]
 80055ba:	bd38      	pop	{r3, r4, r5, pc}
 80055bc:	20000ec4 	.word	0x20000ec4

080055c0 <_lseek_r>:
 80055c0:	b538      	push	{r3, r4, r5, lr}
 80055c2:	4c07      	ldr	r4, [pc, #28]	; (80055e0 <_lseek_r+0x20>)
 80055c4:	4605      	mov	r5, r0
 80055c6:	4608      	mov	r0, r1
 80055c8:	4611      	mov	r1, r2
 80055ca:	2200      	movs	r2, #0
 80055cc:	6022      	str	r2, [r4, #0]
 80055ce:	461a      	mov	r2, r3
 80055d0:	f7fb ffd0 	bl	8001574 <_lseek>
 80055d4:	1c43      	adds	r3, r0, #1
 80055d6:	d102      	bne.n	80055de <_lseek_r+0x1e>
 80055d8:	6823      	ldr	r3, [r4, #0]
 80055da:	b103      	cbz	r3, 80055de <_lseek_r+0x1e>
 80055dc:	602b      	str	r3, [r5, #0]
 80055de:	bd38      	pop	{r3, r4, r5, pc}
 80055e0:	20000ec4 	.word	0x20000ec4

080055e4 <__malloc_lock>:
 80055e4:	4770      	bx	lr

080055e6 <__malloc_unlock>:
 80055e6:	4770      	bx	lr

080055e8 <_read_r>:
 80055e8:	b538      	push	{r3, r4, r5, lr}
 80055ea:	4c07      	ldr	r4, [pc, #28]	; (8005608 <_read_r+0x20>)
 80055ec:	4605      	mov	r5, r0
 80055ee:	4608      	mov	r0, r1
 80055f0:	4611      	mov	r1, r2
 80055f2:	2200      	movs	r2, #0
 80055f4:	6022      	str	r2, [r4, #0]
 80055f6:	461a      	mov	r2, r3
 80055f8:	f7fb ff78 	bl	80014ec <_read>
 80055fc:	1c43      	adds	r3, r0, #1
 80055fe:	d102      	bne.n	8005606 <_read_r+0x1e>
 8005600:	6823      	ldr	r3, [r4, #0]
 8005602:	b103      	cbz	r3, 8005606 <_read_r+0x1e>
 8005604:	602b      	str	r3, [r5, #0]
 8005606:	bd38      	pop	{r3, r4, r5, pc}
 8005608:	20000ec4 	.word	0x20000ec4

0800560c <_init>:
 800560c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800560e:	bf00      	nop
 8005610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005612:	bc08      	pop	{r3}
 8005614:	469e      	mov	lr, r3
 8005616:	4770      	bx	lr

08005618 <_fini>:
 8005618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800561a:	bf00      	nop
 800561c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800561e:	bc08      	pop	{r3}
 8005620:	469e      	mov	lr, r3
 8005622:	4770      	bx	lr
