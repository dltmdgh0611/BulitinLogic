
MVLogic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067ac  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  0800695c  0800695c  0001695c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b40  08006b40  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08006b40  08006b40  00016b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b48  08006b48  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b48  08006b48  00016b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b4c  08006b4c  00016b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08006b50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001dc4  200001e0  08006d30  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001fa4  08006d30  00021fa4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015275  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f88  00000000  00000000  00035485  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011b0  00000000  00000000  00038410  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001028  00000000  00000000  000395c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026e8b  00000000  00000000  0003a5e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f5a9  00000000  00000000  00061473  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e487f  00000000  00000000  00070a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015529b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052ac  00000000  00000000  00155318  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006944 	.word	0x08006944

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	08006944 	.word	0x08006944

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_d2iz>:
 8000608:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800060c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000610:	d215      	bcs.n	800063e <__aeabi_d2iz+0x36>
 8000612:	d511      	bpl.n	8000638 <__aeabi_d2iz+0x30>
 8000614:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000618:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800061c:	d912      	bls.n	8000644 <__aeabi_d2iz+0x3c>
 800061e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000622:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000626:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800062a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800062e:	fa23 f002 	lsr.w	r0, r3, r2
 8000632:	bf18      	it	ne
 8000634:	4240      	negne	r0, r0
 8000636:	4770      	bx	lr
 8000638:	f04f 0000 	mov.w	r0, #0
 800063c:	4770      	bx	lr
 800063e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000642:	d105      	bne.n	8000650 <__aeabi_d2iz+0x48>
 8000644:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000648:	bf08      	it	eq
 800064a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800064e:	4770      	bx	lr
 8000650:	f04f 0000 	mov.w	r0, #0
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop

08000658 <__aeabi_d2uiz>:
 8000658:	004a      	lsls	r2, r1, #1
 800065a:	d211      	bcs.n	8000680 <__aeabi_d2uiz+0x28>
 800065c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000660:	d211      	bcs.n	8000686 <__aeabi_d2uiz+0x2e>
 8000662:	d50d      	bpl.n	8000680 <__aeabi_d2uiz+0x28>
 8000664:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000668:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800066c:	d40e      	bmi.n	800068c <__aeabi_d2uiz+0x34>
 800066e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000672:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000676:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800067a:	fa23 f002 	lsr.w	r0, r3, r2
 800067e:	4770      	bx	lr
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	4770      	bx	lr
 8000686:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800068a:	d102      	bne.n	8000692 <__aeabi_d2uiz+0x3a>
 800068c:	f04f 30ff 	mov.w	r0, #4294967295
 8000690:	4770      	bx	lr
 8000692:	f04f 0000 	mov.w	r0, #0
 8000696:	4770      	bx	lr

08000698 <__aeabi_uldivmod>:
 8000698:	b953      	cbnz	r3, 80006b0 <__aeabi_uldivmod+0x18>
 800069a:	b94a      	cbnz	r2, 80006b0 <__aeabi_uldivmod+0x18>
 800069c:	2900      	cmp	r1, #0
 800069e:	bf08      	it	eq
 80006a0:	2800      	cmpeq	r0, #0
 80006a2:	bf1c      	itt	ne
 80006a4:	f04f 31ff 	movne.w	r1, #4294967295
 80006a8:	f04f 30ff 	movne.w	r0, #4294967295
 80006ac:	f000 b972 	b.w	8000994 <__aeabi_idiv0>
 80006b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006b8:	f000 f806 	bl	80006c8 <__udivmoddi4>
 80006bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006c4:	b004      	add	sp, #16
 80006c6:	4770      	bx	lr

080006c8 <__udivmoddi4>:
 80006c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006cc:	9e08      	ldr	r6, [sp, #32]
 80006ce:	4604      	mov	r4, r0
 80006d0:	4688      	mov	r8, r1
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d14b      	bne.n	800076e <__udivmoddi4+0xa6>
 80006d6:	428a      	cmp	r2, r1
 80006d8:	4615      	mov	r5, r2
 80006da:	d967      	bls.n	80007ac <__udivmoddi4+0xe4>
 80006dc:	fab2 f282 	clz	r2, r2
 80006e0:	b14a      	cbz	r2, 80006f6 <__udivmoddi4+0x2e>
 80006e2:	f1c2 0720 	rsb	r7, r2, #32
 80006e6:	fa01 f302 	lsl.w	r3, r1, r2
 80006ea:	fa20 f707 	lsr.w	r7, r0, r7
 80006ee:	4095      	lsls	r5, r2
 80006f0:	ea47 0803 	orr.w	r8, r7, r3
 80006f4:	4094      	lsls	r4, r2
 80006f6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80006fa:	0c23      	lsrs	r3, r4, #16
 80006fc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000700:	fa1f fc85 	uxth.w	ip, r5
 8000704:	fb0e 8817 	mls	r8, lr, r7, r8
 8000708:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800070c:	fb07 f10c 	mul.w	r1, r7, ip
 8000710:	4299      	cmp	r1, r3
 8000712:	d909      	bls.n	8000728 <__udivmoddi4+0x60>
 8000714:	18eb      	adds	r3, r5, r3
 8000716:	f107 30ff 	add.w	r0, r7, #4294967295
 800071a:	f080 811b 	bcs.w	8000954 <__udivmoddi4+0x28c>
 800071e:	4299      	cmp	r1, r3
 8000720:	f240 8118 	bls.w	8000954 <__udivmoddi4+0x28c>
 8000724:	3f02      	subs	r7, #2
 8000726:	442b      	add	r3, r5
 8000728:	1a5b      	subs	r3, r3, r1
 800072a:	b2a4      	uxth	r4, r4
 800072c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000730:	fb0e 3310 	mls	r3, lr, r0, r3
 8000734:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000738:	fb00 fc0c 	mul.w	ip, r0, ip
 800073c:	45a4      	cmp	ip, r4
 800073e:	d909      	bls.n	8000754 <__udivmoddi4+0x8c>
 8000740:	192c      	adds	r4, r5, r4
 8000742:	f100 33ff 	add.w	r3, r0, #4294967295
 8000746:	f080 8107 	bcs.w	8000958 <__udivmoddi4+0x290>
 800074a:	45a4      	cmp	ip, r4
 800074c:	f240 8104 	bls.w	8000958 <__udivmoddi4+0x290>
 8000750:	3802      	subs	r0, #2
 8000752:	442c      	add	r4, r5
 8000754:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000758:	eba4 040c 	sub.w	r4, r4, ip
 800075c:	2700      	movs	r7, #0
 800075e:	b11e      	cbz	r6, 8000768 <__udivmoddi4+0xa0>
 8000760:	40d4      	lsrs	r4, r2
 8000762:	2300      	movs	r3, #0
 8000764:	e9c6 4300 	strd	r4, r3, [r6]
 8000768:	4639      	mov	r1, r7
 800076a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800076e:	428b      	cmp	r3, r1
 8000770:	d909      	bls.n	8000786 <__udivmoddi4+0xbe>
 8000772:	2e00      	cmp	r6, #0
 8000774:	f000 80eb 	beq.w	800094e <__udivmoddi4+0x286>
 8000778:	2700      	movs	r7, #0
 800077a:	e9c6 0100 	strd	r0, r1, [r6]
 800077e:	4638      	mov	r0, r7
 8000780:	4639      	mov	r1, r7
 8000782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000786:	fab3 f783 	clz	r7, r3
 800078a:	2f00      	cmp	r7, #0
 800078c:	d147      	bne.n	800081e <__udivmoddi4+0x156>
 800078e:	428b      	cmp	r3, r1
 8000790:	d302      	bcc.n	8000798 <__udivmoddi4+0xd0>
 8000792:	4282      	cmp	r2, r0
 8000794:	f200 80fa 	bhi.w	800098c <__udivmoddi4+0x2c4>
 8000798:	1a84      	subs	r4, r0, r2
 800079a:	eb61 0303 	sbc.w	r3, r1, r3
 800079e:	2001      	movs	r0, #1
 80007a0:	4698      	mov	r8, r3
 80007a2:	2e00      	cmp	r6, #0
 80007a4:	d0e0      	beq.n	8000768 <__udivmoddi4+0xa0>
 80007a6:	e9c6 4800 	strd	r4, r8, [r6]
 80007aa:	e7dd      	b.n	8000768 <__udivmoddi4+0xa0>
 80007ac:	b902      	cbnz	r2, 80007b0 <__udivmoddi4+0xe8>
 80007ae:	deff      	udf	#255	; 0xff
 80007b0:	fab2 f282 	clz	r2, r2
 80007b4:	2a00      	cmp	r2, #0
 80007b6:	f040 808f 	bne.w	80008d8 <__udivmoddi4+0x210>
 80007ba:	1b49      	subs	r1, r1, r5
 80007bc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80007c0:	fa1f f885 	uxth.w	r8, r5
 80007c4:	2701      	movs	r7, #1
 80007c6:	fbb1 fcfe 	udiv	ip, r1, lr
 80007ca:	0c23      	lsrs	r3, r4, #16
 80007cc:	fb0e 111c 	mls	r1, lr, ip, r1
 80007d0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007d4:	fb08 f10c 	mul.w	r1, r8, ip
 80007d8:	4299      	cmp	r1, r3
 80007da:	d907      	bls.n	80007ec <__udivmoddi4+0x124>
 80007dc:	18eb      	adds	r3, r5, r3
 80007de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80007e2:	d202      	bcs.n	80007ea <__udivmoddi4+0x122>
 80007e4:	4299      	cmp	r1, r3
 80007e6:	f200 80cd 	bhi.w	8000984 <__udivmoddi4+0x2bc>
 80007ea:	4684      	mov	ip, r0
 80007ec:	1a59      	subs	r1, r3, r1
 80007ee:	b2a3      	uxth	r3, r4
 80007f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80007f4:	fb0e 1410 	mls	r4, lr, r0, r1
 80007f8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80007fc:	fb08 f800 	mul.w	r8, r8, r0
 8000800:	45a0      	cmp	r8, r4
 8000802:	d907      	bls.n	8000814 <__udivmoddi4+0x14c>
 8000804:	192c      	adds	r4, r5, r4
 8000806:	f100 33ff 	add.w	r3, r0, #4294967295
 800080a:	d202      	bcs.n	8000812 <__udivmoddi4+0x14a>
 800080c:	45a0      	cmp	r8, r4
 800080e:	f200 80b6 	bhi.w	800097e <__udivmoddi4+0x2b6>
 8000812:	4618      	mov	r0, r3
 8000814:	eba4 0408 	sub.w	r4, r4, r8
 8000818:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800081c:	e79f      	b.n	800075e <__udivmoddi4+0x96>
 800081e:	f1c7 0c20 	rsb	ip, r7, #32
 8000822:	40bb      	lsls	r3, r7
 8000824:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000828:	ea4e 0e03 	orr.w	lr, lr, r3
 800082c:	fa01 f407 	lsl.w	r4, r1, r7
 8000830:	fa20 f50c 	lsr.w	r5, r0, ip
 8000834:	fa21 f30c 	lsr.w	r3, r1, ip
 8000838:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800083c:	4325      	orrs	r5, r4
 800083e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000842:	0c2c      	lsrs	r4, r5, #16
 8000844:	fb08 3319 	mls	r3, r8, r9, r3
 8000848:	fa1f fa8e 	uxth.w	sl, lr
 800084c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000850:	fb09 f40a 	mul.w	r4, r9, sl
 8000854:	429c      	cmp	r4, r3
 8000856:	fa02 f207 	lsl.w	r2, r2, r7
 800085a:	fa00 f107 	lsl.w	r1, r0, r7
 800085e:	d90b      	bls.n	8000878 <__udivmoddi4+0x1b0>
 8000860:	eb1e 0303 	adds.w	r3, lr, r3
 8000864:	f109 30ff 	add.w	r0, r9, #4294967295
 8000868:	f080 8087 	bcs.w	800097a <__udivmoddi4+0x2b2>
 800086c:	429c      	cmp	r4, r3
 800086e:	f240 8084 	bls.w	800097a <__udivmoddi4+0x2b2>
 8000872:	f1a9 0902 	sub.w	r9, r9, #2
 8000876:	4473      	add	r3, lr
 8000878:	1b1b      	subs	r3, r3, r4
 800087a:	b2ad      	uxth	r5, r5
 800087c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000880:	fb08 3310 	mls	r3, r8, r0, r3
 8000884:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000888:	fb00 fa0a 	mul.w	sl, r0, sl
 800088c:	45a2      	cmp	sl, r4
 800088e:	d908      	bls.n	80008a2 <__udivmoddi4+0x1da>
 8000890:	eb1e 0404 	adds.w	r4, lr, r4
 8000894:	f100 33ff 	add.w	r3, r0, #4294967295
 8000898:	d26b      	bcs.n	8000972 <__udivmoddi4+0x2aa>
 800089a:	45a2      	cmp	sl, r4
 800089c:	d969      	bls.n	8000972 <__udivmoddi4+0x2aa>
 800089e:	3802      	subs	r0, #2
 80008a0:	4474      	add	r4, lr
 80008a2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80008a6:	fba0 8902 	umull	r8, r9, r0, r2
 80008aa:	eba4 040a 	sub.w	r4, r4, sl
 80008ae:	454c      	cmp	r4, r9
 80008b0:	46c2      	mov	sl, r8
 80008b2:	464b      	mov	r3, r9
 80008b4:	d354      	bcc.n	8000960 <__udivmoddi4+0x298>
 80008b6:	d051      	beq.n	800095c <__udivmoddi4+0x294>
 80008b8:	2e00      	cmp	r6, #0
 80008ba:	d069      	beq.n	8000990 <__udivmoddi4+0x2c8>
 80008bc:	ebb1 050a 	subs.w	r5, r1, sl
 80008c0:	eb64 0403 	sbc.w	r4, r4, r3
 80008c4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80008c8:	40fd      	lsrs	r5, r7
 80008ca:	40fc      	lsrs	r4, r7
 80008cc:	ea4c 0505 	orr.w	r5, ip, r5
 80008d0:	e9c6 5400 	strd	r5, r4, [r6]
 80008d4:	2700      	movs	r7, #0
 80008d6:	e747      	b.n	8000768 <__udivmoddi4+0xa0>
 80008d8:	f1c2 0320 	rsb	r3, r2, #32
 80008dc:	fa20 f703 	lsr.w	r7, r0, r3
 80008e0:	4095      	lsls	r5, r2
 80008e2:	fa01 f002 	lsl.w	r0, r1, r2
 80008e6:	fa21 f303 	lsr.w	r3, r1, r3
 80008ea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80008ee:	4338      	orrs	r0, r7
 80008f0:	0c01      	lsrs	r1, r0, #16
 80008f2:	fbb3 f7fe 	udiv	r7, r3, lr
 80008f6:	fa1f f885 	uxth.w	r8, r5
 80008fa:	fb0e 3317 	mls	r3, lr, r7, r3
 80008fe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000902:	fb07 f308 	mul.w	r3, r7, r8
 8000906:	428b      	cmp	r3, r1
 8000908:	fa04 f402 	lsl.w	r4, r4, r2
 800090c:	d907      	bls.n	800091e <__udivmoddi4+0x256>
 800090e:	1869      	adds	r1, r5, r1
 8000910:	f107 3cff 	add.w	ip, r7, #4294967295
 8000914:	d22f      	bcs.n	8000976 <__udivmoddi4+0x2ae>
 8000916:	428b      	cmp	r3, r1
 8000918:	d92d      	bls.n	8000976 <__udivmoddi4+0x2ae>
 800091a:	3f02      	subs	r7, #2
 800091c:	4429      	add	r1, r5
 800091e:	1acb      	subs	r3, r1, r3
 8000920:	b281      	uxth	r1, r0
 8000922:	fbb3 f0fe 	udiv	r0, r3, lr
 8000926:	fb0e 3310 	mls	r3, lr, r0, r3
 800092a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800092e:	fb00 f308 	mul.w	r3, r0, r8
 8000932:	428b      	cmp	r3, r1
 8000934:	d907      	bls.n	8000946 <__udivmoddi4+0x27e>
 8000936:	1869      	adds	r1, r5, r1
 8000938:	f100 3cff 	add.w	ip, r0, #4294967295
 800093c:	d217      	bcs.n	800096e <__udivmoddi4+0x2a6>
 800093e:	428b      	cmp	r3, r1
 8000940:	d915      	bls.n	800096e <__udivmoddi4+0x2a6>
 8000942:	3802      	subs	r0, #2
 8000944:	4429      	add	r1, r5
 8000946:	1ac9      	subs	r1, r1, r3
 8000948:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800094c:	e73b      	b.n	80007c6 <__udivmoddi4+0xfe>
 800094e:	4637      	mov	r7, r6
 8000950:	4630      	mov	r0, r6
 8000952:	e709      	b.n	8000768 <__udivmoddi4+0xa0>
 8000954:	4607      	mov	r7, r0
 8000956:	e6e7      	b.n	8000728 <__udivmoddi4+0x60>
 8000958:	4618      	mov	r0, r3
 800095a:	e6fb      	b.n	8000754 <__udivmoddi4+0x8c>
 800095c:	4541      	cmp	r1, r8
 800095e:	d2ab      	bcs.n	80008b8 <__udivmoddi4+0x1f0>
 8000960:	ebb8 0a02 	subs.w	sl, r8, r2
 8000964:	eb69 020e 	sbc.w	r2, r9, lr
 8000968:	3801      	subs	r0, #1
 800096a:	4613      	mov	r3, r2
 800096c:	e7a4      	b.n	80008b8 <__udivmoddi4+0x1f0>
 800096e:	4660      	mov	r0, ip
 8000970:	e7e9      	b.n	8000946 <__udivmoddi4+0x27e>
 8000972:	4618      	mov	r0, r3
 8000974:	e795      	b.n	80008a2 <__udivmoddi4+0x1da>
 8000976:	4667      	mov	r7, ip
 8000978:	e7d1      	b.n	800091e <__udivmoddi4+0x256>
 800097a:	4681      	mov	r9, r0
 800097c:	e77c      	b.n	8000878 <__udivmoddi4+0x1b0>
 800097e:	3802      	subs	r0, #2
 8000980:	442c      	add	r4, r5
 8000982:	e747      	b.n	8000814 <__udivmoddi4+0x14c>
 8000984:	f1ac 0c02 	sub.w	ip, ip, #2
 8000988:	442b      	add	r3, r5
 800098a:	e72f      	b.n	80007ec <__udivmoddi4+0x124>
 800098c:	4638      	mov	r0, r7
 800098e:	e708      	b.n	80007a2 <__udivmoddi4+0xda>
 8000990:	4637      	mov	r7, r6
 8000992:	e6e9      	b.n	8000768 <__udivmoddi4+0xa0>

08000994 <__aeabi_idiv0>:
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop

08000998 <MVCD_delay_us>:

#define RST_PIN GPIO_PIN_14
#define RST_PORT GPIOF

void MVCD_delay_us (uint16_t us)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2,0);  // set the counter value a 0
 80009a2:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <MVCD_delay_us+0x2c>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	2200      	movs	r2, #0
 80009a8:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us);  // wait for the counter to reach the us input in the parameter
 80009aa:	bf00      	nop
 80009ac:	4b05      	ldr	r3, [pc, #20]	; (80009c4 <MVCD_delay_us+0x2c>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80009b2:	88fb      	ldrh	r3, [r7, #6]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d3f9      	bcc.n	80009ac <MVCD_delay_us+0x14>
}
 80009b8:	bf00      	nop
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr
 80009c4:	20001b14 	.word	0x20001b14

080009c8 <MVCD_SendByte_SPI>:

void MVCD_SendByte_SPI(uint8_t byte)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	71fb      	strb	r3, [r7, #7]
	for(int i=0;i<8;i++)
 80009d2:	2300      	movs	r3, #0
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	e023      	b.n	8000a20 <MVCD_SendByte_SPI+0x58>
	{
		if((byte<<i)&0x80)
 80009d8:	79fa      	ldrb	r2, [r7, #7]
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	fa02 f303 	lsl.w	r3, r2, r3
 80009e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d006      	beq.n	80009f6 <MVCD_SendByte_SPI+0x2e>
			{
				HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_SET);  // SID=1  OR MOSI
 80009e8:	2201      	movs	r2, #1
 80009ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009ee:	4810      	ldr	r0, [pc, #64]	; (8000a30 <MVCD_SendByte_SPI+0x68>)
 80009f0:	f002 fc0c 	bl	800320c <HAL_GPIO_WritePin>
 80009f4:	e005      	b.n	8000a02 <MVCD_SendByte_SPI+0x3a>
			}

		else HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_RESET);  // SID=0
 80009f6:	2200      	movs	r2, #0
 80009f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009fc:	480c      	ldr	r0, [pc, #48]	; (8000a30 <MVCD_SendByte_SPI+0x68>)
 80009fe:	f002 fc05 	bl	800320c <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_RESET);  // SCLK =0  OR SCK
 8000a02:	2200      	movs	r2, #0
 8000a04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a08:	480a      	ldr	r0, [pc, #40]	; (8000a34 <MVCD_SendByte_SPI+0x6c>)
 8000a0a:	f002 fbff 	bl	800320c <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_SET);  // SCLK=1
 8000a0e:	2201      	movs	r2, #1
 8000a10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a14:	4807      	ldr	r0, [pc, #28]	; (8000a34 <MVCD_SendByte_SPI+0x6c>)
 8000a16:	f002 fbf9 	bl	800320c <HAL_GPIO_WritePin>
	for(int i=0;i<8;i++)
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	2b07      	cmp	r3, #7
 8000a24:	ddd8      	ble.n	80009d8 <MVCD_SendByte_SPI+0x10>
	}
}
 8000a26:	bf00      	nop
 8000a28:	3710      	adds	r7, #16
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40021000 	.word	0x40021000
 8000a34:	40021400 	.word	0x40021400

08000a38 <MVCD_ST7920_Send>:

void MVCD_ST7920_Send(uint8_t data, int modflag) //modflag - (data 1), (cmd 0)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	6039      	str	r1, [r7, #0]
 8000a42:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  // PUll the CS high
 8000a44:	2201      	movs	r2, #1
 8000a46:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a4a:	4813      	ldr	r0, [pc, #76]	; (8000a98 <MVCD_ST7920_Send+0x60>)
 8000a4c:	f002 fbde 	bl	800320c <HAL_GPIO_WritePin>

	MVCD_SendByte_SPI(0xf8+(modflag<<1));  // send the SYNC + RS(1)
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	3b08      	subs	r3, #8
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff ffb3 	bl	80009c8 <MVCD_SendByte_SPI>
	MVCD_SendByte_SPI(data&0xf0);  // send the higher nibble first
 8000a62:	79fb      	ldrb	r3, [r7, #7]
 8000a64:	f023 030f 	bic.w	r3, r3, #15
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff ffac 	bl	80009c8 <MVCD_SendByte_SPI>
	MVCD_SendByte_SPI((data<<4)&0xf0);  // send the lower nibble
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	011b      	lsls	r3, r3, #4
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff ffa6 	bl	80009c8 <MVCD_SendByte_SPI>
	MVCD_delay_us(10);
 8000a7c:	200a      	movs	r0, #10
 8000a7e:	f7ff ff8b 	bl	8000998 <MVCD_delay_us>
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);  // PUll the CS LOW
 8000a82:	2200      	movs	r2, #0
 8000a84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a88:	4803      	ldr	r0, [pc, #12]	; (8000a98 <MVCD_ST7920_Send+0x60>)
 8000a8a:	f002 fbbf 	bl	800320c <HAL_GPIO_WritePin>
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40021000 	.word	0x40021000

08000a9c <MVCD_ST7920_baseinit>:

void MVCD_ST7920_baseinit(){
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);  // RESET=0
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aa6:	4822      	ldr	r0, [pc, #136]	; (8000b30 <MVCD_ST7920_baseinit+0x94>)
 8000aa8:	f002 fbb0 	bl	800320c <HAL_GPIO_WritePin>
	HAL_Delay(10);   // wait for 10ms
 8000aac:	200a      	movs	r0, #10
 8000aae:	f001 fc27 	bl	8002300 <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);  // RESET=1
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ab8:	481d      	ldr	r0, [pc, #116]	; (8000b30 <MVCD_ST7920_baseinit+0x94>)
 8000aba:	f002 fba7 	bl	800320c <HAL_GPIO_WritePin>

	HAL_Delay(50);   //wait for >40 ms
 8000abe:	2032      	movs	r0, #50	; 0x32
 8000ac0:	f001 fc1e 	bl	8002300 <HAL_Delay>


	MVCD_ST7920_Send(0x30,CMD);  // 8bit mode
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	2030      	movs	r0, #48	; 0x30
 8000ac8:	f7ff ffb6 	bl	8000a38 <MVCD_ST7920_Send>
	MVCD_delay_us(110);  //  >100us delay
 8000acc:	206e      	movs	r0, #110	; 0x6e
 8000ace:	f7ff ff63 	bl	8000998 <MVCD_delay_us>

	MVCD_ST7920_Send(0x30,CMD);  // 8bit mode
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	2030      	movs	r0, #48	; 0x30
 8000ad6:	f7ff ffaf 	bl	8000a38 <MVCD_ST7920_Send>
	MVCD_delay_us(40);  // >37us delay
 8000ada:	2028      	movs	r0, #40	; 0x28
 8000adc:	f7ff ff5c 	bl	8000998 <MVCD_delay_us>

	MVCD_ST7920_Send(0x08,CMD);  // D=0, C=0, B=0
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	2008      	movs	r0, #8
 8000ae4:	f7ff ffa8 	bl	8000a38 <MVCD_ST7920_Send>
	MVCD_delay_us(110);  // >100us delay
 8000ae8:	206e      	movs	r0, #110	; 0x6e
 8000aea:	f7ff ff55 	bl	8000998 <MVCD_delay_us>

	MVCD_ST7920_Send(0x01,CMD);  // clear screen
 8000aee:	2100      	movs	r1, #0
 8000af0:	2001      	movs	r0, #1
 8000af2:	f7ff ffa1 	bl	8000a38 <MVCD_ST7920_Send>
	HAL_Delay(12);  // >10 ms delay
 8000af6:	200c      	movs	r0, #12
 8000af8:	f001 fc02 	bl	8002300 <HAL_Delay>


	MVCD_ST7920_Send(0x06,CMD);  // cursor increment right no shift
 8000afc:	2100      	movs	r1, #0
 8000afe:	2006      	movs	r0, #6
 8000b00:	f7ff ff9a 	bl	8000a38 <MVCD_ST7920_Send>
	HAL_Delay(1);  // 1ms delay
 8000b04:	2001      	movs	r0, #1
 8000b06:	f001 fbfb 	bl	8002300 <HAL_Delay>

	MVCD_ST7920_Send(0x0C,CMD);  // D=1, C=0, B=0
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	200c      	movs	r0, #12
 8000b0e:	f7ff ff93 	bl	8000a38 <MVCD_ST7920_Send>
    HAL_Delay(1);  // 1ms delay
 8000b12:	2001      	movs	r0, #1
 8000b14:	f001 fbf4 	bl	8002300 <HAL_Delay>

    MVCD_ST7920_Send(0x02,CMD);  // return to home
 8000b18:	2100      	movs	r1, #0
 8000b1a:	2002      	movs	r0, #2
 8000b1c:	f7ff ff8c 	bl	8000a38 <MVCD_ST7920_Send>
	HAL_Delay(1);  // 1ms delay
 8000b20:	2001      	movs	r0, #1
 8000b22:	f001 fbed 	bl	8002300 <HAL_Delay>
	HAL_Delay(2);
 8000b26:	2002      	movs	r0, #2
 8000b28:	f001 fbea 	bl	8002300 <HAL_Delay>
}
 8000b2c:	bf00      	nop
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40021400 	.word	0x40021400

08000b34 <MVCD_ST7920_GraphicMode>:

void MVCD_ST7920_GraphicMode (_Bool enable)   // 1-enable, 0-disable
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	71fb      	strb	r3, [r7, #7]
	if (enable == ON)
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d015      	beq.n	8000b70 <MVCD_ST7920_GraphicMode+0x3c>
	{
		MVCD_ST7920_Send(0x30,CMD);  // 8 bit mode
 8000b44:	2100      	movs	r1, #0
 8000b46:	2030      	movs	r0, #48	; 0x30
 8000b48:	f7ff ff76 	bl	8000a38 <MVCD_ST7920_Send>
		HAL_Delay (1);
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	f001 fbd7 	bl	8002300 <HAL_Delay>
		MVCD_ST7920_Send(0x34,CMD);  // switch to Extended instructions
 8000b52:	2100      	movs	r1, #0
 8000b54:	2034      	movs	r0, #52	; 0x34
 8000b56:	f7ff ff6f 	bl	8000a38 <MVCD_ST7920_Send>
		HAL_Delay (1);
 8000b5a:	2001      	movs	r0, #1
 8000b5c:	f001 fbd0 	bl	8002300 <HAL_Delay>
		MVCD_ST7920_Send(0x36,CMD);  // enable graphics
 8000b60:	2100      	movs	r1, #0
 8000b62:	2036      	movs	r0, #54	; 0x36
 8000b64:	f7ff ff68 	bl	8000a38 <MVCD_ST7920_Send>
		HAL_Delay (1);
 8000b68:	2001      	movs	r0, #1
 8000b6a:	f001 fbc9 	bl	8002300 <HAL_Delay>
	else if (enable == OFF)
	{
		MVCD_ST7920_Send(0x30,CMD);  // 8 bit mode
		HAL_Delay (1);
	}
}
 8000b6e:	e00c      	b.n	8000b8a <MVCD_ST7920_GraphicMode+0x56>
	else if (enable == OFF)
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	f083 0301 	eor.w	r3, r3, #1
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d006      	beq.n	8000b8a <MVCD_ST7920_GraphicMode+0x56>
		MVCD_ST7920_Send(0x30,CMD);  // 8 bit mode
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	2030      	movs	r0, #48	; 0x30
 8000b80:	f7ff ff5a 	bl	8000a38 <MVCD_ST7920_Send>
		HAL_Delay (1);
 8000b84:	2001      	movs	r0, #1
 8000b86:	f001 fbbb 	bl	8002300 <HAL_Delay>
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
	...

08000b94 <MVCD_dot_xy>:


void MVCD_dot_xy(int x,int y){
 8000b94:	b5b0      	push	{r4, r5, r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	6039      	str	r1, [r7, #0]
    int flx = (int)floor(x/16);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	da00      	bge.n	8000ba6 <MVCD_dot_xy+0x12>
 8000ba4:	330f      	adds	r3, #15
 8000ba6:	111b      	asrs	r3, r3, #4
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff fcc3 	bl	8000534 <__aeabi_i2d>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	460c      	mov	r4, r1
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	4621      	mov	r1, r4
 8000bb6:	f7ff fd27 	bl	8000608 <__aeabi_d2iz>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	60fb      	str	r3, [r7, #12]
    prv_val[flx][y] |= (0x8000 >> x%16);
 8000bbe:	493a      	ldr	r1, [pc, #232]	; (8000ca8 <MVCD_dot_xy+0x114>)
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	019a      	lsls	r2, r3, #6
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4259      	negs	r1, r3
 8000bd0:	f003 030f 	and.w	r3, r3, #15
 8000bd4:	f001 010f 	and.w	r1, r1, #15
 8000bd8:	bf58      	it	pl
 8000bda:	424b      	negpl	r3, r1
 8000bdc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000be0:	fa41 f303 	asr.w	r3, r1, r3
 8000be4:	431a      	orrs	r2, r3
 8000be6:	4830      	ldr	r0, [pc, #192]	; (8000ca8 <MVCD_dot_xy+0x114>)
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	0199      	lsls	r1, r3, #6
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	440b      	add	r3, r1
 8000bf0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    MVCD_ST7920_Send(0x36, CMD);
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	2036      	movs	r0, #54	; 0x36
 8000bf8:	f7ff ff1e 	bl	8000a38 <MVCD_ST7920_Send>
    MVCD_ST7920_Send(0x80+(y % 32), CMD);
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	425a      	negs	r2, r3
 8000c00:	f003 031f 	and.w	r3, r3, #31
 8000c04:	f002 021f 	and.w	r2, r2, #31
 8000c08:	bf58      	it	pl
 8000c0a:	4253      	negpl	r3, r2
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	3b80      	subs	r3, #128	; 0x80
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	2100      	movs	r1, #0
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff ff0f 	bl	8000a38 <MVCD_ST7920_Send>
    MVCD_ST7920_Send(0x80+ (y / 32) * 8 + floor(x/16), CMD);
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	da00      	bge.n	8000c22 <MVCD_dot_xy+0x8e>
 8000c20:	331f      	adds	r3, #31
 8000c22:	115b      	asrs	r3, r3, #5
 8000c24:	3310      	adds	r3, #16
 8000c26:	00db      	lsls	r3, r3, #3
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff fc83 	bl	8000534 <__aeabi_i2d>
 8000c2e:	4604      	mov	r4, r0
 8000c30:	460d      	mov	r5, r1
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	da00      	bge.n	8000c3a <MVCD_dot_xy+0xa6>
 8000c38:	330f      	adds	r3, #15
 8000c3a:	111b      	asrs	r3, r3, #4
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff fc79 	bl	8000534 <__aeabi_i2d>
 8000c42:	4602      	mov	r2, r0
 8000c44:	460b      	mov	r3, r1
 8000c46:	4620      	mov	r0, r4
 8000c48:	4629      	mov	r1, r5
 8000c4a:	f7ff fb27 	bl	800029c <__adddf3>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	460c      	mov	r4, r1
 8000c52:	4618      	mov	r0, r3
 8000c54:	4621      	mov	r1, r4
 8000c56:	f7ff fcff 	bl	8000658 <__aeabi_d2uiz>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	2100      	movs	r1, #0
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff fee9 	bl	8000a38 <MVCD_ST7920_Send>

    MVCD_ST7920_Send(0x30, CMD);
 8000c66:	2100      	movs	r1, #0
 8000c68:	2030      	movs	r0, #48	; 0x30
 8000c6a:	f7ff fee5 	bl	8000a38 <MVCD_ST7920_Send>
    MVCD_ST7920_Send(((prv_val[flx][y] &0xff00)>>8), DATA);
 8000c6e:	490e      	ldr	r1, [pc, #56]	; (8000ca8 <MVCD_dot_xy+0x114>)
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	019a      	lsls	r2, r3, #6
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	4413      	add	r3, r2
 8000c78:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c7c:	121b      	asrs	r3, r3, #8
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	2101      	movs	r1, #1
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff fed8 	bl	8000a38 <MVCD_ST7920_Send>
    MVCD_ST7920_Send(prv_val[flx][y]&0xff, DATA);
 8000c88:	4907      	ldr	r1, [pc, #28]	; (8000ca8 <MVCD_dot_xy+0x114>)
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	019a      	lsls	r2, r3, #6
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	4413      	add	r3, r2
 8000c92:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	2101      	movs	r1, #1
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff fecc 	bl	8000a38 <MVCD_ST7920_Send>
}
 8000ca0:	bf00      	nop
 8000ca2:	3710      	adds	r7, #16
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bdb0      	pop	{r4, r5, r7, pc}
 8000ca8:	2000022c 	.word	0x2000022c

08000cac <MVCD_deldot_xy>:

void MVCD_deldot_xy(int x,int y){
 8000cac:	b5b0      	push	{r4, r5, r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
    int flx = (int)floor(x/16);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	da00      	bge.n	8000cbe <MVCD_deldot_xy+0x12>
 8000cbc:	330f      	adds	r3, #15
 8000cbe:	111b      	asrs	r3, r3, #4
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fc37 	bl	8000534 <__aeabi_i2d>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	460c      	mov	r4, r1
 8000cca:	4618      	mov	r0, r3
 8000ccc:	4621      	mov	r1, r4
 8000cce:	f7ff fc9b 	bl	8000608 <__aeabi_d2iz>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	60fb      	str	r3, [r7, #12]
    prv_val[flx][y] &= ~(0x8000 >> x%16);
 8000cd6:	493b      	ldr	r1, [pc, #236]	; (8000dc4 <MVCD_deldot_xy+0x118>)
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	019a      	lsls	r2, r3, #6
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	4413      	add	r3, r2
 8000ce0:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4259      	negs	r1, r3
 8000ce8:	f003 030f 	and.w	r3, r3, #15
 8000cec:	f001 010f 	and.w	r1, r1, #15
 8000cf0:	bf58      	it	pl
 8000cf2:	424b      	negpl	r3, r1
 8000cf4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cf8:	fa41 f303 	asr.w	r3, r1, r3
 8000cfc:	43db      	mvns	r3, r3
 8000cfe:	401a      	ands	r2, r3
 8000d00:	4830      	ldr	r0, [pc, #192]	; (8000dc4 <MVCD_deldot_xy+0x118>)
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	0199      	lsls	r1, r3, #6
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	440b      	add	r3, r1
 8000d0a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    MVCD_ST7920_Send(0x36, CMD);
 8000d0e:	2100      	movs	r1, #0
 8000d10:	2036      	movs	r0, #54	; 0x36
 8000d12:	f7ff fe91 	bl	8000a38 <MVCD_ST7920_Send>
    MVCD_ST7920_Send(0x80+(y % 32), CMD);
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	425a      	negs	r2, r3
 8000d1a:	f003 031f 	and.w	r3, r3, #31
 8000d1e:	f002 021f 	and.w	r2, r2, #31
 8000d22:	bf58      	it	pl
 8000d24:	4253      	negpl	r3, r2
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	3b80      	subs	r3, #128	; 0x80
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff fe82 	bl	8000a38 <MVCD_ST7920_Send>
    MVCD_ST7920_Send(0x80+ (y / 32) * 8 + floor(x/16), CMD);
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	da00      	bge.n	8000d3c <MVCD_deldot_xy+0x90>
 8000d3a:	331f      	adds	r3, #31
 8000d3c:	115b      	asrs	r3, r3, #5
 8000d3e:	3310      	adds	r3, #16
 8000d40:	00db      	lsls	r3, r3, #3
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff fbf6 	bl	8000534 <__aeabi_i2d>
 8000d48:	4604      	mov	r4, r0
 8000d4a:	460d      	mov	r5, r1
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	da00      	bge.n	8000d54 <MVCD_deldot_xy+0xa8>
 8000d52:	330f      	adds	r3, #15
 8000d54:	111b      	asrs	r3, r3, #4
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff fbec 	bl	8000534 <__aeabi_i2d>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	460b      	mov	r3, r1
 8000d60:	4620      	mov	r0, r4
 8000d62:	4629      	mov	r1, r5
 8000d64:	f7ff fa9a 	bl	800029c <__adddf3>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	4621      	mov	r1, r4
 8000d70:	f7ff fc72 	bl	8000658 <__aeabi_d2uiz>
 8000d74:	4603      	mov	r3, r0
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff fe5c 	bl	8000a38 <MVCD_ST7920_Send>

    MVCD_ST7920_Send(0x30, CMD);
 8000d80:	2100      	movs	r1, #0
 8000d82:	2030      	movs	r0, #48	; 0x30
 8000d84:	f7ff fe58 	bl	8000a38 <MVCD_ST7920_Send>
    MVCD_ST7920_Send(((prv_val[flx][y] &0xff00)>>8), DATA);
 8000d88:	490e      	ldr	r1, [pc, #56]	; (8000dc4 <MVCD_deldot_xy+0x118>)
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	019a      	lsls	r2, r3, #6
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	4413      	add	r3, r2
 8000d92:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d96:	121b      	asrs	r3, r3, #8
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff fe4b 	bl	8000a38 <MVCD_ST7920_Send>
    MVCD_ST7920_Send(prv_val[flx][y]&0xff, DATA);
 8000da2:	4908      	ldr	r1, [pc, #32]	; (8000dc4 <MVCD_deldot_xy+0x118>)
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	019a      	lsls	r2, r3, #6
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	4413      	add	r3, r2
 8000dac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	2101      	movs	r1, #1
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff fe3f 	bl	8000a38 <MVCD_ST7920_Send>
}
 8000dba:	bf00      	nop
 8000dbc:	3710      	adds	r7, #16
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bdb0      	pop	{r4, r5, r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	2000022c 	.word	0x2000022c

08000dc8 <MVCD_LCDclear>:

void MVCD_LCDclear(){
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
    for(int j=0;j<8;j++){
 8000dce:	2300      	movs	r3, #0
 8000dd0:	607b      	str	r3, [r7, #4]
 8000dd2:	e044      	b.n	8000e5e <MVCD_LCDclear+0x96>
        for(int i=0;i<64;i++){
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	603b      	str	r3, [r7, #0]
 8000dd8:	e03b      	b.n	8000e52 <MVCD_LCDclear+0x8a>
        	MVCD_ST7920_Send(0x36, CMD);
 8000dda:	2100      	movs	r1, #0
 8000ddc:	2036      	movs	r0, #54	; 0x36
 8000dde:	f7ff fe2b 	bl	8000a38 <MVCD_ST7920_Send>
        	MVCD_ST7920_Send(0x80+(i%32), CMD);
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	425a      	negs	r2, r3
 8000de6:	f003 031f 	and.w	r3, r3, #31
 8000dea:	f002 021f 	and.w	r2, r2, #31
 8000dee:	bf58      	it	pl
 8000df0:	4253      	negpl	r3, r2
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	3b80      	subs	r3, #128	; 0x80
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff fe1c 	bl	8000a38 <MVCD_ST7920_Send>
        	MVCD_ST7920_Send(0x80+((i/32)*8+j), CMD);
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	da00      	bge.n	8000e08 <MVCD_LCDclear+0x40>
 8000e06:	331f      	adds	r3, #31
 8000e08:	115b      	asrs	r3, r3, #5
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	00db      	lsls	r3, r3, #3
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	4413      	add	r3, r2
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	3b80      	subs	r3, #128	; 0x80
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff fe0a 	bl	8000a38 <MVCD_ST7920_Send>
        	MVCD_ST7920_Send(0x30, CMD);
 8000e24:	2100      	movs	r1, #0
 8000e26:	2030      	movs	r0, #48	; 0x30
 8000e28:	f7ff fe06 	bl	8000a38 <MVCD_ST7920_Send>
        	MVCD_ST7920_Send(0x00, DATA);
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	2000      	movs	r0, #0
 8000e30:	f7ff fe02 	bl	8000a38 <MVCD_ST7920_Send>
        	MVCD_ST7920_Send(0x00, DATA);
 8000e34:	2101      	movs	r1, #1
 8000e36:	2000      	movs	r0, #0
 8000e38:	f7ff fdfe 	bl	8000a38 <MVCD_ST7920_Send>
        	prv_val[j][i] = 0;
 8000e3c:	490b      	ldr	r1, [pc, #44]	; (8000e6c <MVCD_LCDclear+0xa4>)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	019a      	lsls	r2, r3, #6
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	4413      	add	r3, r2
 8000e46:	2200      	movs	r2, #0
 8000e48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for(int i=0;i<64;i++){
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	603b      	str	r3, [r7, #0]
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	2b3f      	cmp	r3, #63	; 0x3f
 8000e56:	ddc0      	ble.n	8000dda <MVCD_LCDclear+0x12>
    for(int j=0;j<8;j++){
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	607b      	str	r3, [r7, #4]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2b07      	cmp	r3, #7
 8000e62:	ddb7      	ble.n	8000dd4 <MVCD_LCDclear+0xc>
        }
    }

}
 8000e64:	bf00      	nop
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	2000022c 	.word	0x2000022c

08000e70 <LogicAnalyzer>:
int xnext;
int x=0;
int movex=0;


int LogicAnalyzer(GPIO_TypeDef* GPIOx, uint16_t pinnum,int curdelay, int delay, int S, int StartTrigger, int totalbits){
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	607a      	str	r2, [r7, #4]
 8000e7a:	603b      	str	r3, [r7, #0]
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	817b      	strh	r3, [r7, #10]

	if(StartTrigger == 0){
 8000e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d153      	bne.n	8000f2e <LogicAnalyzer+0xbe>
		if(curdelay*10 == delay*S){
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	4413      	add	r3, r2
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	4619      	mov	r1, r3
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	6a3a      	ldr	r2, [r7, #32]
 8000e96:	fb02 f303 	mul.w	r3, r2, r3
 8000e9a:	4299      	cmp	r1, r3
 8000e9c:	f040 80be 	bne.w	800101c <LogicAnalyzer+0x1ac>
			AX++;
 8000ea0:	4b60      	ldr	r3, [pc, #384]	; (8001024 <LogicAnalyzer+0x1b4>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	4a5f      	ldr	r2, [pc, #380]	; (8001024 <LogicAnalyzer+0x1b4>)
 8000ea8:	6013      	str	r3, [r2, #0]
			if(AX == totalbits){
 8000eaa:	4b5e      	ldr	r3, [pc, #376]	; (8001024 <LogicAnalyzer+0x1b4>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d101      	bne.n	8000eb8 <LogicAnalyzer+0x48>
				return 2;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	e0b1      	b.n	800101c <LogicAnalyzer+0x1ac>
			}
			_Bool readpin = HAL_GPIO_ReadPin(GPIOx, pinnum);
 8000eb8:	897b      	ldrh	r3, [r7, #10]
 8000eba:	4619      	mov	r1, r3
 8000ebc:	68f8      	ldr	r0, [r7, #12]
 8000ebe:	f002 f98d 	bl	80031dc <HAL_GPIO_ReadPin>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	bf14      	ite	ne
 8000ec8:	2301      	movne	r3, #1
 8000eca:	2300      	moveq	r3, #0
 8000ecc:	74fb      	strb	r3, [r7, #19]

			if(readpin){
 8000ece:	7cfb      	ldrb	r3, [r7, #19]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d015      	beq.n	8000f00 <LogicAnalyzer+0x90>
				if(Toggles == readpin){
 8000ed4:	4b54      	ldr	r3, [pc, #336]	; (8001028 <LogicAnalyzer+0x1b8>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	7cfa      	ldrb	r2, [r7, #19]
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d106      	bne.n	8000eec <LogicAnalyzer+0x7c>
					logicarr[AX]=1;
 8000ede:	4b51      	ldr	r3, [pc, #324]	; (8001024 <LogicAnalyzer+0x1b4>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a52      	ldr	r2, [pc, #328]	; (800102c <LogicAnalyzer+0x1bc>)
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000eea:	e005      	b.n	8000ef8 <LogicAnalyzer+0x88>
				}
				else{
					logicarr[AX]=3;
 8000eec:	4b4d      	ldr	r3, [pc, #308]	; (8001024 <LogicAnalyzer+0x1b4>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a4e      	ldr	r2, [pc, #312]	; (800102c <LogicAnalyzer+0x1bc>)
 8000ef2:	2103      	movs	r1, #3
 8000ef4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				}
				Toggles = 1;
 8000ef8:	4b4b      	ldr	r3, [pc, #300]	; (8001028 <LogicAnalyzer+0x1b8>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	701a      	strb	r2, [r3, #0]
 8000efe:	e014      	b.n	8000f2a <LogicAnalyzer+0xba>
			}
			else{
				if(Toggles == readpin){
 8000f00:	4b49      	ldr	r3, [pc, #292]	; (8001028 <LogicAnalyzer+0x1b8>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	7cfa      	ldrb	r2, [r7, #19]
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d106      	bne.n	8000f18 <LogicAnalyzer+0xa8>
					logicarr[AX]=0;
 8000f0a:	4b46      	ldr	r3, [pc, #280]	; (8001024 <LogicAnalyzer+0x1b4>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a47      	ldr	r2, [pc, #284]	; (800102c <LogicAnalyzer+0x1bc>)
 8000f10:	2100      	movs	r1, #0
 8000f12:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000f16:	e005      	b.n	8000f24 <LogicAnalyzer+0xb4>
				}
				else{
					logicarr[AX]=2;
 8000f18:	4b42      	ldr	r3, [pc, #264]	; (8001024 <LogicAnalyzer+0x1b4>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a43      	ldr	r2, [pc, #268]	; (800102c <LogicAnalyzer+0x1bc>)
 8000f1e:	2102      	movs	r1, #2
 8000f20:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				}
				Toggles = 0;
 8000f24:	4b40      	ldr	r3, [pc, #256]	; (8001028 <LogicAnalyzer+0x1b8>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	701a      	strb	r2, [r3, #0]
			}
			return 1;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e076      	b.n	800101c <LogicAnalyzer+0x1ac>

		}
	}
	else if(StartTrigger == 2){
 8000f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	d163      	bne.n	8000ffc <LogicAnalyzer+0x18c>
		//printf("%d\n",curdelay);
		if(curdelay == 3125){
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f640 4235 	movw	r2, #3125	; 0xc35
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d15c      	bne.n	8000ff8 <LogicAnalyzer+0x188>
			if(xnext !=0){
 8000f3e:	4b3c      	ldr	r3, [pc, #240]	; (8001030 <LogicAnalyzer+0x1c0>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d031      	beq.n	8000faa <LogicAnalyzer+0x13a>
				if(x < 5){
 8000f46:	4b3b      	ldr	r3, [pc, #236]	; (8001034 <LogicAnalyzer+0x1c4>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2b04      	cmp	r3, #4
 8000f4c:	dc19      	bgt.n	8000f82 <LogicAnalyzer+0x112>
					for(int i=0;i<5;i++){
 8000f4e:	2300      	movs	r3, #0
 8000f50:	617b      	str	r3, [r7, #20]
 8000f52:	e013      	b.n	8000f7c <LogicAnalyzer+0x10c>
						logicdraw(x+i,x+((xnext-1)*64)+i,logicarr, 1);
 8000f54:	4b37      	ldr	r3, [pc, #220]	; (8001034 <LogicAnalyzer+0x1c4>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	18d0      	adds	r0, r2, r3
 8000f5c:	4b34      	ldr	r3, [pc, #208]	; (8001030 <LogicAnalyzer+0x1c0>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	3b01      	subs	r3, #1
 8000f62:	019a      	lsls	r2, r3, #6
 8000f64:	4b33      	ldr	r3, [pc, #204]	; (8001034 <LogicAnalyzer+0x1c4>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	441a      	add	r2, r3
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	18d1      	adds	r1, r2, r3
 8000f6e:	2301      	movs	r3, #1
 8000f70:	4a2e      	ldr	r2, [pc, #184]	; (800102c <LogicAnalyzer+0x1bc>)
 8000f72:	f000 f863 	bl	800103c <logicdraw>
					for(int i=0;i<5;i++){
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	617b      	str	r3, [r7, #20]
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	2b04      	cmp	r3, #4
 8000f80:	dde8      	ble.n	8000f54 <LogicAnalyzer+0xe4>
					}
				}
				if(x+5 < 64) logicdraw(x+5,x+((xnext-1)*64)+5,logicarr, 1);
 8000f82:	4b2c      	ldr	r3, [pc, #176]	; (8001034 <LogicAnalyzer+0x1c4>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	3305      	adds	r3, #5
 8000f88:	2b3f      	cmp	r3, #63	; 0x3f
 8000f8a:	dc0e      	bgt.n	8000faa <LogicAnalyzer+0x13a>
 8000f8c:	4b29      	ldr	r3, [pc, #164]	; (8001034 <LogicAnalyzer+0x1c4>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	1d58      	adds	r0, r3, #5
 8000f92:	4b27      	ldr	r3, [pc, #156]	; (8001030 <LogicAnalyzer+0x1c0>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	019a      	lsls	r2, r3, #6
 8000f9a:	4b26      	ldr	r3, [pc, #152]	; (8001034 <LogicAnalyzer+0x1c4>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	1d59      	adds	r1, r3, #5
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	4a21      	ldr	r2, [pc, #132]	; (800102c <LogicAnalyzer+0x1bc>)
 8000fa6:	f000 f849 	bl	800103c <logicdraw>
			}
			logicdraw(x,x+(xnext*64),logicarr, 0);
 8000faa:	4b22      	ldr	r3, [pc, #136]	; (8001034 <LogicAnalyzer+0x1c4>)
 8000fac:	6818      	ldr	r0, [r3, #0]
 8000fae:	4b20      	ldr	r3, [pc, #128]	; (8001030 <LogicAnalyzer+0x1c0>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	019a      	lsls	r2, r3, #6
 8000fb4:	4b1f      	ldr	r3, [pc, #124]	; (8001034 <LogicAnalyzer+0x1c4>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	18d1      	adds	r1, r2, r3
 8000fba:	2300      	movs	r3, #0
 8000fbc:	4a1b      	ldr	r2, [pc, #108]	; (800102c <LogicAnalyzer+0x1bc>)
 8000fbe:	f000 f83d 	bl	800103c <logicdraw>

			x++;
 8000fc2:	4b1c      	ldr	r3, [pc, #112]	; (8001034 <LogicAnalyzer+0x1c4>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	4a1a      	ldr	r2, [pc, #104]	; (8001034 <LogicAnalyzer+0x1c4>)
 8000fca:	6013      	str	r3, [r2, #0]
			if(x>63){
 8000fcc:	4b19      	ldr	r3, [pc, #100]	; (8001034 <LogicAnalyzer+0x1c4>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b3f      	cmp	r3, #63	; 0x3f
 8000fd2:	dd07      	ble.n	8000fe4 <LogicAnalyzer+0x174>
				xnext++;
 8000fd4:	4b16      	ldr	r3, [pc, #88]	; (8001030 <LogicAnalyzer+0x1c0>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	4a15      	ldr	r2, [pc, #84]	; (8001030 <LogicAnalyzer+0x1c0>)
 8000fdc:	6013      	str	r3, [r2, #0]
				x=0;
 8000fde:	4b15      	ldr	r3, [pc, #84]	; (8001034 <LogicAnalyzer+0x1c4>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
			}
			if(64*xnext>=totalbits){
 8000fe4:	4b12      	ldr	r3, [pc, #72]	; (8001030 <LogicAnalyzer+0x1c0>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	019b      	lsls	r3, r3, #6
 8000fea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000fec:	429a      	cmp	r2, r3
 8000fee:	dc01      	bgt.n	8000ff4 <LogicAnalyzer+0x184>
				return 4;
 8000ff0:	2304      	movs	r3, #4
 8000ff2:	e013      	b.n	800101c <LogicAnalyzer+0x1ac>
			}
			return 3;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	e011      	b.n	800101c <LogicAnalyzer+0x1ac>
		}
		return 5;
 8000ff8:	2305      	movs	r3, #5
 8000ffa:	e00f      	b.n	800101c <LogicAnalyzer+0x1ac>

	}
	else if(StartTrigger == 4){
 8000ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffe:	2b04      	cmp	r3, #4
 8001000:	d10c      	bne.n	800101c <LogicAnalyzer+0x1ac>
		AX=0;
 8001002:	4b08      	ldr	r3, [pc, #32]	; (8001024 <LogicAnalyzer+0x1b4>)
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
		x=0;
 8001008:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <LogicAnalyzer+0x1c4>)
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
		movex=0;
 800100e:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <LogicAnalyzer+0x1c8>)
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
		StartTrigger=0;
 8001014:	2300      	movs	r3, #0
 8001016:	627b      	str	r3, [r7, #36]	; 0x24
		return 0;
 8001018:	2300      	movs	r3, #0
 800101a:	e7ff      	b.n	800101c <LogicAnalyzer+0x1ac>
	}
}
 800101c:	4618      	mov	r0, r3
 800101e:	3718      	adds	r7, #24
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000200 	.word	0x20000200
 8001028:	200001fc 	.word	0x200001fc
 800102c:	20000a2c 	.word	0x20000a2c
 8001030:	20001a2c 	.word	0x20001a2c
 8001034:	20000204 	.word	0x20000204
 8001038:	20000208 	.word	0x20000208

0800103c <logicdraw>:

void logicdraw(int x,int arrx, int logicarr[], _Bool delflag){
 800103c:	b580      	push	{r7, lr}
 800103e:	b088      	sub	sp, #32
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
 8001048:	70fb      	strb	r3, [r7, #3]
	if(!delflag){
 800104a:	78fb      	ldrb	r3, [r7, #3]
 800104c:	f083 0301 	eor.w	r3, r3, #1
 8001050:	b2db      	uxtb	r3, r3
 8001052:	2b00      	cmp	r3, #0
 8001054:	d077      	beq.n	8001146 <logicdraw+0x10a>
		if(logicarr[arrx] == 0){
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	4413      	add	r3, r2
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d10d      	bne.n	8001080 <logicdraw+0x44>
			MVCD_dot_xy(x*2, 40);
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	2128      	movs	r1, #40	; 0x28
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff fd92 	bl	8000b94 <MVCD_dot_xy>
			MVCD_dot_xy(x*2+1, 40);
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	3301      	adds	r3, #1
 8001076:	2128      	movs	r1, #40	; 0x28
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff fd8b 	bl	8000b94 <MVCD_dot_xy>
				MVCD_deldot_xy(x*2, 20+i);
			}
			MVCD_deldot_xy(x*2+1, 20);
		}
	}
}
 800107e:	e0d8      	b.n	8001232 <logicdraw+0x1f6>
		else if(logicarr[arrx] == 1){
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	4413      	add	r3, r2
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2b01      	cmp	r3, #1
 800108c:	d10d      	bne.n	80010aa <logicdraw+0x6e>
			MVCD_dot_xy(x*2, 20);
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	2114      	movs	r1, #20
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff fd7d 	bl	8000b94 <MVCD_dot_xy>
			MVCD_dot_xy(x*2+1, 20);
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	3301      	adds	r3, #1
 80010a0:	2114      	movs	r1, #20
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff fd76 	bl	8000b94 <MVCD_dot_xy>
}
 80010a8:	e0c3      	b.n	8001232 <logicdraw+0x1f6>
		else if(logicarr[arrx] == 2){
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	4413      	add	r3, r2
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d11f      	bne.n	80010f8 <logicdraw+0xbc>
			MVCD_dot_xy(x*2, 40);
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	2128      	movs	r1, #40	; 0x28
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff fd68 	bl	8000b94 <MVCD_dot_xy>
			for(int i=1;i<=20;i++){
 80010c4:	2301      	movs	r3, #1
 80010c6:	61fb      	str	r3, [r7, #28]
 80010c8:	e00b      	b.n	80010e2 <logicdraw+0xa6>
				MVCD_dot_xy(x*2, 40-i);
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	005a      	lsls	r2, r3, #1
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 80010d4:	4619      	mov	r1, r3
 80010d6:	4610      	mov	r0, r2
 80010d8:	f7ff fd5c 	bl	8000b94 <MVCD_dot_xy>
			for(int i=1;i<=20;i++){
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	3301      	adds	r3, #1
 80010e0:	61fb      	str	r3, [r7, #28]
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	2b14      	cmp	r3, #20
 80010e6:	ddf0      	ble.n	80010ca <logicdraw+0x8e>
			MVCD_dot_xy(x*2+1, 40);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	3301      	adds	r3, #1
 80010ee:	2128      	movs	r1, #40	; 0x28
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff fd4f 	bl	8000b94 <MVCD_dot_xy>
}
 80010f6:	e09c      	b.n	8001232 <logicdraw+0x1f6>
		else if(logicarr[arrx] == 3){
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	4413      	add	r3, r2
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2b03      	cmp	r3, #3
 8001104:	f040 8095 	bne.w	8001232 <logicdraw+0x1f6>
			MVCD_dot_xy(x*2, 20);
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	2114      	movs	r1, #20
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff fd40 	bl	8000b94 <MVCD_dot_xy>
			for(int i=1;i<=20;i++){
 8001114:	2301      	movs	r3, #1
 8001116:	61bb      	str	r3, [r7, #24]
 8001118:	e00a      	b.n	8001130 <logicdraw+0xf4>
				MVCD_dot_xy(x*2, 20+i);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	005a      	lsls	r2, r3, #1
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	3314      	adds	r3, #20
 8001122:	4619      	mov	r1, r3
 8001124:	4610      	mov	r0, r2
 8001126:	f7ff fd35 	bl	8000b94 <MVCD_dot_xy>
			for(int i=1;i<=20;i++){
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	3301      	adds	r3, #1
 800112e:	61bb      	str	r3, [r7, #24]
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	2b14      	cmp	r3, #20
 8001134:	ddf1      	ble.n	800111a <logicdraw+0xde>
			MVCD_dot_xy(x*2+1, 20);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	3301      	adds	r3, #1
 800113c:	2114      	movs	r1, #20
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff fd28 	bl	8000b94 <MVCD_dot_xy>
}
 8001144:	e075      	b.n	8001232 <logicdraw+0x1f6>
		if(logicarr[arrx] == 0){
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	4413      	add	r3, r2
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d10d      	bne.n	8001170 <logicdraw+0x134>
			MVCD_deldot_xy(x*2, 40);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	2128      	movs	r1, #40	; 0x28
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff fda6 	bl	8000cac <MVCD_deldot_xy>
			MVCD_deldot_xy(x*2+1, 40);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	3301      	adds	r3, #1
 8001166:	2128      	movs	r1, #40	; 0x28
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff fd9f 	bl	8000cac <MVCD_deldot_xy>
}
 800116e:	e060      	b.n	8001232 <logicdraw+0x1f6>
		else if(logicarr[arrx] == 1){
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	4413      	add	r3, r2
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d10d      	bne.n	800119a <logicdraw+0x15e>
			MVCD_deldot_xy(x*2, 20);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	2114      	movs	r1, #20
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff fd91 	bl	8000cac <MVCD_deldot_xy>
			MVCD_deldot_xy(x*2+1, 20);
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	3301      	adds	r3, #1
 8001190:	2114      	movs	r1, #20
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff fd8a 	bl	8000cac <MVCD_deldot_xy>
}
 8001198:	e04b      	b.n	8001232 <logicdraw+0x1f6>
		else if(logicarr[arrx] == 2){
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	4413      	add	r3, r2
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d11f      	bne.n	80011e8 <logicdraw+0x1ac>
			MVCD_deldot_xy(x*2, 40);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	2128      	movs	r1, #40	; 0x28
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff fd7c 	bl	8000cac <MVCD_deldot_xy>
			for(int i=1;i<=20;i++){
 80011b4:	2301      	movs	r3, #1
 80011b6:	617b      	str	r3, [r7, #20]
 80011b8:	e00b      	b.n	80011d2 <logicdraw+0x196>
				MVCD_deldot_xy(x*2, 40-i);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	005a      	lsls	r2, r3, #1
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 80011c4:	4619      	mov	r1, r3
 80011c6:	4610      	mov	r0, r2
 80011c8:	f7ff fd70 	bl	8000cac <MVCD_deldot_xy>
			for(int i=1;i<=20;i++){
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	3301      	adds	r3, #1
 80011d0:	617b      	str	r3, [r7, #20]
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	2b14      	cmp	r3, #20
 80011d6:	ddf0      	ble.n	80011ba <logicdraw+0x17e>
			MVCD_deldot_xy(x*2+1, 40);
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	3301      	adds	r3, #1
 80011de:	2128      	movs	r1, #40	; 0x28
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff fd63 	bl	8000cac <MVCD_deldot_xy>
}
 80011e6:	e024      	b.n	8001232 <logicdraw+0x1f6>
		else if(logicarr[arrx] == 3){
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	4413      	add	r3, r2
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2b03      	cmp	r3, #3
 80011f4:	d11d      	bne.n	8001232 <logicdraw+0x1f6>
			MVCD_deldot_xy(x*2, 20);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	2114      	movs	r1, #20
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff fd55 	bl	8000cac <MVCD_deldot_xy>
			for(int i=1;i<=20;i++){
 8001202:	2301      	movs	r3, #1
 8001204:	613b      	str	r3, [r7, #16]
 8001206:	e00a      	b.n	800121e <logicdraw+0x1e2>
				MVCD_deldot_xy(x*2, 20+i);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	005a      	lsls	r2, r3, #1
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	3314      	adds	r3, #20
 8001210:	4619      	mov	r1, r3
 8001212:	4610      	mov	r0, r2
 8001214:	f7ff fd4a 	bl	8000cac <MVCD_deldot_xy>
			for(int i=1;i<=20;i++){
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	3301      	adds	r3, #1
 800121c:	613b      	str	r3, [r7, #16]
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	2b14      	cmp	r3, #20
 8001222:	ddf1      	ble.n	8001208 <logicdraw+0x1cc>
			MVCD_deldot_xy(x*2+1, 20);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	3301      	adds	r3, #1
 800122a:	2114      	movs	r1, #20
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff fd3d 	bl	8000cac <MVCD_deldot_xy>
}
 8001232:	bf00      	nop
 8001234:	3720      	adds	r7, #32
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
	...

0800123c <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0

  heth.Instance = ETH;
 8001240:	4b1c      	ldr	r3, [pc, #112]	; (80012b4 <MX_ETH_Init+0x78>)
 8001242:	4a1d      	ldr	r2, [pc, #116]	; (80012b8 <MX_ETH_Init+0x7c>)
 8001244:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8001246:	4b1b      	ldr	r3, [pc, #108]	; (80012b4 <MX_ETH_Init+0x78>)
 8001248:	2201      	movs	r2, #1
 800124a:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800124c:	4b19      	ldr	r3, [pc, #100]	; (80012b4 <MX_ETH_Init+0x78>)
 800124e:	2200      	movs	r2, #0
 8001250:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 8001252:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <MX_ETH_Init+0x78>)
 8001254:	695b      	ldr	r3, [r3, #20]
 8001256:	2200      	movs	r2, #0
 8001258:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 800125a:	4b16      	ldr	r3, [pc, #88]	; (80012b4 <MX_ETH_Init+0x78>)
 800125c:	695b      	ldr	r3, [r3, #20]
 800125e:	3301      	adds	r3, #1
 8001260:	2280      	movs	r2, #128	; 0x80
 8001262:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8001264:	4b13      	ldr	r3, [pc, #76]	; (80012b4 <MX_ETH_Init+0x78>)
 8001266:	695b      	ldr	r3, [r3, #20]
 8001268:	3302      	adds	r3, #2
 800126a:	22e1      	movs	r2, #225	; 0xe1
 800126c:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 800126e:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <MX_ETH_Init+0x78>)
 8001270:	695b      	ldr	r3, [r3, #20]
 8001272:	3303      	adds	r3, #3
 8001274:	2200      	movs	r2, #0
 8001276:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8001278:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <MX_ETH_Init+0x78>)
 800127a:	695b      	ldr	r3, [r3, #20]
 800127c:	3304      	adds	r3, #4
 800127e:	2200      	movs	r2, #0
 8001280:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8001282:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <MX_ETH_Init+0x78>)
 8001284:	695b      	ldr	r3, [r3, #20]
 8001286:	3305      	adds	r3, #5
 8001288:	2200      	movs	r2, #0
 800128a:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800128c:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <MX_ETH_Init+0x78>)
 800128e:	2200      	movs	r2, #0
 8001290:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8001292:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <MX_ETH_Init+0x78>)
 8001294:	2200      	movs	r2, #0
 8001296:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <MX_ETH_Init+0x78>)
 800129a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800129e:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80012a0:	4804      	ldr	r0, [pc, #16]	; (80012b4 <MX_ETH_Init+0x78>)
 80012a2:	f001 f983 	bl	80025ac <HAL_ETH_Init>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 80012ac:	f000 fb8a 	bl	80019c4 <Error_Handler>
  }

}
 80012b0:	bf00      	nop
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20001a30 	.word	0x20001a30
 80012b8:	40028000 	.word	0x40028000

080012bc <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08e      	sub	sp, #56	; 0x38
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a55      	ldr	r2, [pc, #340]	; (8001430 <HAL_ETH_MspInit+0x174>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	f040 80a4 	bne.w	8001428 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80012e0:	2300      	movs	r3, #0
 80012e2:	623b      	str	r3, [r7, #32]
 80012e4:	4b53      	ldr	r3, [pc, #332]	; (8001434 <HAL_ETH_MspInit+0x178>)
 80012e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e8:	4a52      	ldr	r2, [pc, #328]	; (8001434 <HAL_ETH_MspInit+0x178>)
 80012ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012ee:	6313      	str	r3, [r2, #48]	; 0x30
 80012f0:	4b50      	ldr	r3, [pc, #320]	; (8001434 <HAL_ETH_MspInit+0x178>)
 80012f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012f8:	623b      	str	r3, [r7, #32]
 80012fa:	6a3b      	ldr	r3, [r7, #32]
 80012fc:	2300      	movs	r3, #0
 80012fe:	61fb      	str	r3, [r7, #28]
 8001300:	4b4c      	ldr	r3, [pc, #304]	; (8001434 <HAL_ETH_MspInit+0x178>)
 8001302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001304:	4a4b      	ldr	r2, [pc, #300]	; (8001434 <HAL_ETH_MspInit+0x178>)
 8001306:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800130a:	6313      	str	r3, [r2, #48]	; 0x30
 800130c:	4b49      	ldr	r3, [pc, #292]	; (8001434 <HAL_ETH_MspInit+0x178>)
 800130e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001310:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001314:	61fb      	str	r3, [r7, #28]
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	2300      	movs	r3, #0
 800131a:	61bb      	str	r3, [r7, #24]
 800131c:	4b45      	ldr	r3, [pc, #276]	; (8001434 <HAL_ETH_MspInit+0x178>)
 800131e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001320:	4a44      	ldr	r2, [pc, #272]	; (8001434 <HAL_ETH_MspInit+0x178>)
 8001322:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001326:	6313      	str	r3, [r2, #48]	; 0x30
 8001328:	4b42      	ldr	r3, [pc, #264]	; (8001434 <HAL_ETH_MspInit+0x178>)
 800132a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001330:	61bb      	str	r3, [r7, #24]
 8001332:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]
 8001338:	4b3e      	ldr	r3, [pc, #248]	; (8001434 <HAL_ETH_MspInit+0x178>)
 800133a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133c:	4a3d      	ldr	r2, [pc, #244]	; (8001434 <HAL_ETH_MspInit+0x178>)
 800133e:	f043 0304 	orr.w	r3, r3, #4
 8001342:	6313      	str	r3, [r2, #48]	; 0x30
 8001344:	4b3b      	ldr	r3, [pc, #236]	; (8001434 <HAL_ETH_MspInit+0x178>)
 8001346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001348:	f003 0304 	and.w	r3, r3, #4
 800134c:	617b      	str	r3, [r7, #20]
 800134e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001350:	2300      	movs	r3, #0
 8001352:	613b      	str	r3, [r7, #16]
 8001354:	4b37      	ldr	r3, [pc, #220]	; (8001434 <HAL_ETH_MspInit+0x178>)
 8001356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001358:	4a36      	ldr	r2, [pc, #216]	; (8001434 <HAL_ETH_MspInit+0x178>)
 800135a:	f043 0301 	orr.w	r3, r3, #1
 800135e:	6313      	str	r3, [r2, #48]	; 0x30
 8001360:	4b34      	ldr	r3, [pc, #208]	; (8001434 <HAL_ETH_MspInit+0x178>)
 8001362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	613b      	str	r3, [r7, #16]
 800136a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800136c:	2300      	movs	r3, #0
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	4b30      	ldr	r3, [pc, #192]	; (8001434 <HAL_ETH_MspInit+0x178>)
 8001372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001374:	4a2f      	ldr	r2, [pc, #188]	; (8001434 <HAL_ETH_MspInit+0x178>)
 8001376:	f043 0302 	orr.w	r3, r3, #2
 800137a:	6313      	str	r3, [r2, #48]	; 0x30
 800137c:	4b2d      	ldr	r3, [pc, #180]	; (8001434 <HAL_ETH_MspInit+0x178>)
 800137e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001388:	2300      	movs	r3, #0
 800138a:	60bb      	str	r3, [r7, #8]
 800138c:	4b29      	ldr	r3, [pc, #164]	; (8001434 <HAL_ETH_MspInit+0x178>)
 800138e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001390:	4a28      	ldr	r2, [pc, #160]	; (8001434 <HAL_ETH_MspInit+0x178>)
 8001392:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001396:	6313      	str	r3, [r2, #48]	; 0x30
 8001398:	4b26      	ldr	r3, [pc, #152]	; (8001434 <HAL_ETH_MspInit+0x178>)
 800139a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013a0:	60bb      	str	r3, [r7, #8]
 80013a2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80013a4:	2332      	movs	r3, #50	; 0x32
 80013a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a8:	2302      	movs	r3, #2
 80013aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b0:	2303      	movs	r3, #3
 80013b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013b4:	230b      	movs	r3, #11
 80013b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013bc:	4619      	mov	r1, r3
 80013be:	481e      	ldr	r0, [pc, #120]	; (8001438 <HAL_ETH_MspInit+0x17c>)
 80013c0:	f001 fd62 	bl	8002e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80013c4:	2386      	movs	r3, #134	; 0x86
 80013c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c8:	2302      	movs	r3, #2
 80013ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d0:	2303      	movs	r3, #3
 80013d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013d4:	230b      	movs	r3, #11
 80013d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013dc:	4619      	mov	r1, r3
 80013de:	4817      	ldr	r0, [pc, #92]	; (800143c <HAL_ETH_MspInit+0x180>)
 80013e0:	f001 fd52 	bl	8002e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80013e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ea:	2302      	movs	r3, #2
 80013ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f2:	2303      	movs	r3, #3
 80013f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013f6:	230b      	movs	r3, #11
 80013f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80013fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013fe:	4619      	mov	r1, r3
 8001400:	480f      	ldr	r0, [pc, #60]	; (8001440 <HAL_ETH_MspInit+0x184>)
 8001402:	f001 fd41 	bl	8002e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001406:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800140a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140c:	2302      	movs	r3, #2
 800140e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001414:	2303      	movs	r3, #3
 8001416:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001418:	230b      	movs	r3, #11
 800141a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800141c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001420:	4619      	mov	r1, r3
 8001422:	4808      	ldr	r0, [pc, #32]	; (8001444 <HAL_ETH_MspInit+0x188>)
 8001424:	f001 fd30 	bl	8002e88 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8001428:	bf00      	nop
 800142a:	3738      	adds	r7, #56	; 0x38
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40028000 	.word	0x40028000
 8001434:	40023800 	.word	0x40023800
 8001438:	40020800 	.word	0x40020800
 800143c:	40020000 	.word	0x40020000
 8001440:	40020400 	.word	0x40020400
 8001444:	40021800 	.word	0x40021800

08001448 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08e      	sub	sp, #56	; 0x38
 800144c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	605a      	str	r2, [r3, #4]
 8001458:	609a      	str	r2, [r3, #8]
 800145a:	60da      	str	r2, [r3, #12]
 800145c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	623b      	str	r3, [r7, #32]
 8001462:	4b6e      	ldr	r3, [pc, #440]	; (800161c <MX_GPIO_Init+0x1d4>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a6d      	ldr	r2, [pc, #436]	; (800161c <MX_GPIO_Init+0x1d4>)
 8001468:	f043 0310 	orr.w	r3, r3, #16
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b6b      	ldr	r3, [pc, #428]	; (800161c <MX_GPIO_Init+0x1d4>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0310 	and.w	r3, r3, #16
 8001476:	623b      	str	r3, [r7, #32]
 8001478:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	61fb      	str	r3, [r7, #28]
 800147e:	4b67      	ldr	r3, [pc, #412]	; (800161c <MX_GPIO_Init+0x1d4>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a66      	ldr	r2, [pc, #408]	; (800161c <MX_GPIO_Init+0x1d4>)
 8001484:	f043 0304 	orr.w	r3, r3, #4
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b64      	ldr	r3, [pc, #400]	; (800161c <MX_GPIO_Init+0x1d4>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0304 	and.w	r3, r3, #4
 8001492:	61fb      	str	r3, [r7, #28]
 8001494:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	61bb      	str	r3, [r7, #24]
 800149a:	4b60      	ldr	r3, [pc, #384]	; (800161c <MX_GPIO_Init+0x1d4>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a5f      	ldr	r2, [pc, #380]	; (800161c <MX_GPIO_Init+0x1d4>)
 80014a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b5d      	ldr	r3, [pc, #372]	; (800161c <MX_GPIO_Init+0x1d4>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ae:	61bb      	str	r3, [r7, #24]
 80014b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	617b      	str	r3, [r7, #20]
 80014b6:	4b59      	ldr	r3, [pc, #356]	; (800161c <MX_GPIO_Init+0x1d4>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a58      	ldr	r2, [pc, #352]	; (800161c <MX_GPIO_Init+0x1d4>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b56      	ldr	r3, [pc, #344]	; (800161c <MX_GPIO_Init+0x1d4>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	617b      	str	r3, [r7, #20]
 80014cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	613b      	str	r3, [r7, #16]
 80014d2:	4b52      	ldr	r3, [pc, #328]	; (800161c <MX_GPIO_Init+0x1d4>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a51      	ldr	r2, [pc, #324]	; (800161c <MX_GPIO_Init+0x1d4>)
 80014d8:	f043 0302 	orr.w	r3, r3, #2
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b4f      	ldr	r3, [pc, #316]	; (800161c <MX_GPIO_Init+0x1d4>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	613b      	str	r3, [r7, #16]
 80014e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	4b4b      	ldr	r3, [pc, #300]	; (800161c <MX_GPIO_Init+0x1d4>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4a4a      	ldr	r2, [pc, #296]	; (800161c <MX_GPIO_Init+0x1d4>)
 80014f4:	f043 0320 	orr.w	r3, r3, #32
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4b48      	ldr	r3, [pc, #288]	; (800161c <MX_GPIO_Init+0x1d4>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f003 0320 	and.w	r3, r3, #32
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	4b44      	ldr	r3, [pc, #272]	; (800161c <MX_GPIO_Init+0x1d4>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	4a43      	ldr	r2, [pc, #268]	; (800161c <MX_GPIO_Init+0x1d4>)
 8001510:	f043 0308 	orr.w	r3, r3, #8
 8001514:	6313      	str	r3, [r2, #48]	; 0x30
 8001516:	4b41      	ldr	r3, [pc, #260]	; (800161c <MX_GPIO_Init+0x1d4>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	f003 0308 	and.w	r3, r3, #8
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	607b      	str	r3, [r7, #4]
 8001526:	4b3d      	ldr	r3, [pc, #244]	; (800161c <MX_GPIO_Init+0x1d4>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	4a3c      	ldr	r2, [pc, #240]	; (800161c <MX_GPIO_Init+0x1d4>)
 800152c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001530:	6313      	str	r3, [r2, #48]	; 0x30
 8001532:	4b3a      	ldr	r3, [pc, #232]	; (800161c <MX_GPIO_Init+0x1d4>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6|GPIO_PIN_9|GPIO_PIN_11, GPIO_PIN_RESET);
 800153e:	2200      	movs	r2, #0
 8001540:	f44f 6124 	mov.w	r1, #2624	; 0xa40
 8001544:	4836      	ldr	r0, [pc, #216]	; (8001620 <MX_GPIO_Init+0x1d8>)
 8001546:	f001 fe61 	bl	800320c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800154a:	2200      	movs	r2, #0
 800154c:	f244 0181 	movw	r1, #16513	; 0x4081
 8001550:	4834      	ldr	r0, [pc, #208]	; (8001624 <MX_GPIO_Init+0x1dc>)
 8001552:	f001 fe5b 	bl	800320c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001556:	2200      	movs	r2, #0
 8001558:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800155c:	4832      	ldr	r0, [pc, #200]	; (8001628 <MX_GPIO_Init+0x1e0>)
 800155e:	f001 fe55 	bl	800320c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001562:	2200      	movs	r2, #0
 8001564:	2140      	movs	r1, #64	; 0x40
 8001566:	4831      	ldr	r0, [pc, #196]	; (800162c <MX_GPIO_Init+0x1e4>)
 8001568:	f001 fe50 	bl	800320c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE6 PE9 PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9|GPIO_PIN_11;
 800156c:	f44f 6324 	mov.w	r3, #2624	; 0xa40
 8001570:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001572:	2301      	movs	r3, #1
 8001574:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157a:	2300      	movs	r3, #0
 800157c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800157e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001582:	4619      	mov	r1, r3
 8001584:	4826      	ldr	r0, [pc, #152]	; (8001620 <MX_GPIO_Init+0x1d8>)
 8001586:	f001 fc7f 	bl	8002e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800158a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800158e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001590:	4b27      	ldr	r3, [pc, #156]	; (8001630 <MX_GPIO_Init+0x1e8>)
 8001592:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001598:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800159c:	4619      	mov	r1, r3
 800159e:	4825      	ldr	r0, [pc, #148]	; (8001634 <MX_GPIO_Init+0x1ec>)
 80015a0:	f001 fc72 	bl	8002e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80015a4:	f244 0381 	movw	r3, #16513	; 0x4081
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015aa:	2301      	movs	r3, #1
 80015ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b2:	2300      	movs	r3, #0
 80015b4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ba:	4619      	mov	r1, r3
 80015bc:	4819      	ldr	r0, [pc, #100]	; (8001624 <MX_GPIO_Init+0x1dc>)
 80015be:	f001 fc63 	bl	8002e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF13 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80015c2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80015c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c8:	2301      	movs	r3, #1
 80015ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d0:	2300      	movs	r3, #0
 80015d2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d8:	4619      	mov	r1, r3
 80015da:	4813      	ldr	r0, [pc, #76]	; (8001628 <MX_GPIO_Init+0x1e0>)
 80015dc:	f001 fc54 	bl	8002e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80015e0:	2340      	movs	r3, #64	; 0x40
 80015e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e4:	2301      	movs	r3, #1
 80015e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ec:	2300      	movs	r3, #0
 80015ee:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80015f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f4:	4619      	mov	r1, r3
 80015f6:	480d      	ldr	r0, [pc, #52]	; (800162c <MX_GPIO_Init+0x1e4>)
 80015f8:	f001 fc46 	bl	8002e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80015fc:	2380      	movs	r3, #128	; 0x80
 80015fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001600:	2300      	movs	r3, #0
 8001602:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001608:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800160c:	4619      	mov	r1, r3
 800160e:	4807      	ldr	r0, [pc, #28]	; (800162c <MX_GPIO_Init+0x1e4>)
 8001610:	f001 fc3a 	bl	8002e88 <HAL_GPIO_Init>

}
 8001614:	bf00      	nop
 8001616:	3738      	adds	r7, #56	; 0x38
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40023800 	.word	0x40023800
 8001620:	40021000 	.word	0x40021000
 8001624:	40020400 	.word	0x40020400
 8001628:	40021400 	.word	0x40021400
 800162c:	40021800 	.word	0x40021800
 8001630:	10110000 	.word	0x10110000
 8001634:	40020800 	.word	0x40020800

08001638 <_write>:
#include <stdlib.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file, char *p, int len){
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, p, len, 10);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	b29a      	uxth	r2, r3
 8001648:	230a      	movs	r3, #10
 800164a:	68b9      	ldr	r1, [r7, #8]
 800164c:	4803      	ldr	r0, [pc, #12]	; (800165c <_write+0x24>)
 800164e:	f003 f802 	bl	8004656 <HAL_UART_Transmit>
}
 8001652:	bf00      	nop
 8001654:	4618      	mov	r0, r3
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20001b54 	.word	0x20001b54

08001660 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001664:	f000 fdda 	bl	800221c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001668:	f000 f834 	bl	80016d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800166c:	f7ff feec 	bl	8001448 <MX_GPIO_Init>
  MX_ETH_Init();
 8001670:	f7ff fde4 	bl	800123c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001674:	f000 fcae 	bl	8001fd4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001678:	f000 fd1e 	bl	80020b8 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 800167c:	f000 fab2 	bl	8001be4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001680:	f000 fafc 	bl	8001c7c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001684:	f000 fb46 	bl	8001d14 <MX_TIM4_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001688:	f000 f890 	bl	80017ac <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 800168c:	480c      	ldr	r0, [pc, #48]	; (80016c0 <main+0x60>)
 800168e:	f002 fb9c 	bl	8003dca <HAL_TIM_Base_Start>
  MVCD_ST7920_baseinit();
 8001692:	f7ff fa03 	bl	8000a9c <MVCD_ST7920_baseinit>
  MVCD_ST7920_GraphicMode(ON);
 8001696:	2001      	movs	r0, #1
 8001698:	f7ff fa4c 	bl	8000b34 <MVCD_ST7920_GraphicMode>
  MVCD_LCDclear();
 800169c:	f7ff fb94 	bl	8000dc8 <MVCD_LCDclear>
  HAL_Delay(1);
 80016a0:	2001      	movs	r0, #1
 80016a2:	f000 fe2d 	bl	8002300 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim3);
 80016a6:	4807      	ldr	r0, [pc, #28]	; (80016c4 <main+0x64>)
 80016a8:	f002 fbb3 	bl	8003e12 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 80016ac:	4806      	ldr	r0, [pc, #24]	; (80016c8 <main+0x68>)
 80016ae:	f002 fbb0 	bl	8003e12 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart3, &rx3_data, 1);
 80016b2:	2201      	movs	r2, #1
 80016b4:	4905      	ldr	r1, [pc, #20]	; (80016cc <main+0x6c>)
 80016b6:	4806      	ldr	r0, [pc, #24]	; (80016d0 <main+0x70>)
 80016b8:	f003 f866 	bl	8004788 <HAL_UART_Receive_IT>
//  while(1);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016bc:	e7fe      	b.n	80016bc <main+0x5c>
 80016be:	bf00      	nop
 80016c0:	20001b14 	.word	0x20001b14
 80016c4:	20001ad4 	.word	0x20001ad4
 80016c8:	20001a94 	.word	0x20001a94
 80016cc:	20001a7d 	.word	0x20001a7d
 80016d0:	20001b54 	.word	0x20001b54

080016d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b094      	sub	sp, #80	; 0x50
 80016d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016da:	f107 0320 	add.w	r3, r7, #32
 80016de:	2230      	movs	r2, #48	; 0x30
 80016e0:	2100      	movs	r1, #0
 80016e2:	4618      	mov	r0, r3
 80016e4:	f004 f98c 	bl	8005a00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016e8:	f107 030c 	add.w	r3, r7, #12
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016f8:	2300      	movs	r3, #0
 80016fa:	60bb      	str	r3, [r7, #8]
 80016fc:	4b29      	ldr	r3, [pc, #164]	; (80017a4 <SystemClock_Config+0xd0>)
 80016fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001700:	4a28      	ldr	r2, [pc, #160]	; (80017a4 <SystemClock_Config+0xd0>)
 8001702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001706:	6413      	str	r3, [r2, #64]	; 0x40
 8001708:	4b26      	ldr	r3, [pc, #152]	; (80017a4 <SystemClock_Config+0xd0>)
 800170a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001710:	60bb      	str	r3, [r7, #8]
 8001712:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001714:	2300      	movs	r3, #0
 8001716:	607b      	str	r3, [r7, #4]
 8001718:	4b23      	ldr	r3, [pc, #140]	; (80017a8 <SystemClock_Config+0xd4>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001720:	4a21      	ldr	r2, [pc, #132]	; (80017a8 <SystemClock_Config+0xd4>)
 8001722:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001726:	6013      	str	r3, [r2, #0]
 8001728:	4b1f      	ldr	r3, [pc, #124]	; (80017a8 <SystemClock_Config+0xd4>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001730:	607b      	str	r3, [r7, #4]
 8001732:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001734:	2301      	movs	r3, #1
 8001736:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001738:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800173c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800173e:	2302      	movs	r3, #2
 8001740:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001742:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001746:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001748:	2304      	movs	r3, #4
 800174a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800174c:	2348      	movs	r3, #72	; 0x48
 800174e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001750:	2302      	movs	r3, #2
 8001752:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001754:	2303      	movs	r3, #3
 8001756:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001758:	f107 0320 	add.w	r3, r7, #32
 800175c:	4618      	mov	r0, r3
 800175e:	f001 fea7 	bl	80034b0 <HAL_RCC_OscConfig>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001768:	f000 f92c 	bl	80019c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800176c:	230f      	movs	r3, #15
 800176e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001770:	2302      	movs	r3, #2
 8001772:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001774:	2300      	movs	r3, #0
 8001776:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001778:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800177c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800177e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001782:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001784:	f107 030c 	add.w	r3, r7, #12
 8001788:	2102      	movs	r1, #2
 800178a:	4618      	mov	r0, r3
 800178c:	f002 f900 	bl	8003990 <HAL_RCC_ClockConfig>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001796:	f000 f915 	bl	80019c4 <Error_Handler>
  }
}
 800179a:	bf00      	nop
 800179c:	3750      	adds	r7, #80	; 0x50
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40023800 	.word	0x40023800
 80017a8:	40007000 	.word	0x40007000

080017ac <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80017b0:	2200      	movs	r2, #0
 80017b2:	2100      	movs	r1, #0
 80017b4:	2027      	movs	r0, #39	; 0x27
 80017b6:	f000 fea0 	bl	80024fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 80017ba:	2027      	movs	r0, #39	; 0x27
 80017bc:	f000 feb9 	bl	8002532 <HAL_NVIC_EnableIRQ>
}
 80017c0:	bf00      	nop
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af02      	add	r7, sp, #8
 80017ca:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3){
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a68      	ldr	r2, [pc, #416]	; (8001974 <HAL_UART_RxCpltCallback+0x1b0>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	f040 80c9 	bne.w	800196a <HAL_UART_RxCpltCallback+0x1a6>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80017d8:	2201      	movs	r2, #1
 80017da:	2180      	movs	r1, #128	; 0x80
 80017dc:	4866      	ldr	r0, [pc, #408]	; (8001978 <HAL_UART_RxCpltCallback+0x1b4>)
 80017de:	f001 fd15 	bl	800320c <HAL_GPIO_WritePin>
		HAL_UART_Receive_IT(&huart3, &rx3_data, 1);
 80017e2:	2201      	movs	r2, #1
 80017e4:	4965      	ldr	r1, [pc, #404]	; (800197c <HAL_UART_RxCpltCallback+0x1b8>)
 80017e6:	4866      	ldr	r0, [pc, #408]	; (8001980 <HAL_UART_RxCpltCallback+0x1bc>)
 80017e8:	f002 ffce 	bl	8004788 <HAL_UART_Receive_IT>
		if(rx3_data == 'X'){
 80017ec:	4b63      	ldr	r3, [pc, #396]	; (800197c <HAL_UART_RxCpltCallback+0x1b8>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b58      	cmp	r3, #88	; 0x58
 80017f2:	d105      	bne.n	8001800 <HAL_UART_RxCpltCallback+0x3c>
			HAL_UART_Transmit(&huart3, &rx3_data, 1, 10);
 80017f4:	230a      	movs	r3, #10
 80017f6:	2201      	movs	r2, #1
 80017f8:	4960      	ldr	r1, [pc, #384]	; (800197c <HAL_UART_RxCpltCallback+0x1b8>)
 80017fa:	4861      	ldr	r0, [pc, #388]	; (8001980 <HAL_UART_RxCpltCallback+0x1bc>)
 80017fc:	f002 ff2b 	bl	8004656 <HAL_UART_Transmit>
		}
		if(rx3_data == 'S'){
 8001800:	4b5e      	ldr	r3, [pc, #376]	; (800197c <HAL_UART_RxCpltCallback+0x1b8>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	2b53      	cmp	r3, #83	; 0x53
 8001806:	d116      	bne.n	8001836 <HAL_UART_RxCpltCallback+0x72>
			portname=0;
 8001808:	4b5e      	ldr	r3, [pc, #376]	; (8001984 <HAL_UART_RxCpltCallback+0x1c0>)
 800180a:	2200      	movs	r2, #0
 800180c:	701a      	strb	r2, [r3, #0]
			portnum=0;
 800180e:	4b5e      	ldr	r3, [pc, #376]	; (8001988 <HAL_UART_RxCpltCallback+0x1c4>)
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
			portnumcount=0;
 8001814:	4b5d      	ldr	r3, [pc, #372]	; (800198c <HAL_UART_RxCpltCallback+0x1c8>)
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
			bits=0;
 800181a:	4b5d      	ldr	r3, [pc, #372]	; (8001990 <HAL_UART_RxCpltCallback+0x1cc>)
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
			cycle=0;
 8001820:	4b5c      	ldr	r3, [pc, #368]	; (8001994 <HAL_UART_RxCpltCallback+0x1d0>)
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]
			rxlevel=0;
 8001826:	4b5c      	ldr	r3, [pc, #368]	; (8001998 <HAL_UART_RxCpltCallback+0x1d4>)
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
			rxlevel++;
 800182c:	4b5a      	ldr	r3, [pc, #360]	; (8001998 <HAL_UART_RxCpltCallback+0x1d4>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	3301      	adds	r3, #1
 8001832:	4a59      	ldr	r2, [pc, #356]	; (8001998 <HAL_UART_RxCpltCallback+0x1d4>)
 8001834:	6013      	str	r3, [r2, #0]
		}

		if(rxlevel==1){
 8001836:	4b58      	ldr	r3, [pc, #352]	; (8001998 <HAL_UART_RxCpltCallback+0x1d4>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d141      	bne.n	80018c2 <HAL_UART_RxCpltCallback+0xfe>
			if(rx3_data == 'N'){
 800183e:	4b4f      	ldr	r3, [pc, #316]	; (800197c <HAL_UART_RxCpltCallback+0x1b8>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b4e      	cmp	r3, #78	; 0x4e
 8001844:	d105      	bne.n	8001852 <HAL_UART_RxCpltCallback+0x8e>
				rxlevel++;
 8001846:	4b54      	ldr	r3, [pc, #336]	; (8001998 <HAL_UART_RxCpltCallback+0x1d4>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	3301      	adds	r3, #1
 800184c:	4a52      	ldr	r2, [pc, #328]	; (8001998 <HAL_UART_RxCpltCallback+0x1d4>)
 800184e:	6013      	str	r3, [r2, #0]
			}
			else cycle = rx3_data - '0';
		}

	}
}
 8001850:	e08b      	b.n	800196a <HAL_UART_RxCpltCallback+0x1a6>
				portname = rx3_data;
 8001852:	4b4a      	ldr	r3, [pc, #296]	; (800197c <HAL_UART_RxCpltCallback+0x1b8>)
 8001854:	781a      	ldrb	r2, [r3, #0]
 8001856:	4b4b      	ldr	r3, [pc, #300]	; (8001984 <HAL_UART_RxCpltCallback+0x1c0>)
 8001858:	701a      	strb	r2, [r3, #0]
				switch(portname){
 800185a:	4b4a      	ldr	r3, [pc, #296]	; (8001984 <HAL_UART_RxCpltCallback+0x1c0>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	3b61      	subs	r3, #97	; 0x61
 8001860:	2b06      	cmp	r3, #6
 8001862:	f200 8082 	bhi.w	800196a <HAL_UART_RxCpltCallback+0x1a6>
 8001866:	a201      	add	r2, pc, #4	; (adr r2, 800186c <HAL_UART_RxCpltCallback+0xa8>)
 8001868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800186c:	08001889 	.word	0x08001889
 8001870:	08001891 	.word	0x08001891
 8001874:	08001899 	.word	0x08001899
 8001878:	080018a1 	.word	0x080018a1
 800187c:	080018a9 	.word	0x080018a9
 8001880:	080018b1 	.word	0x080018b1
 8001884:	080018b9 	.word	0x080018b9
					case 'a' : portnameT = GPIOA; break;
 8001888:	4b44      	ldr	r3, [pc, #272]	; (800199c <HAL_UART_RxCpltCallback+0x1d8>)
 800188a:	4a45      	ldr	r2, [pc, #276]	; (80019a0 <HAL_UART_RxCpltCallback+0x1dc>)
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	e06c      	b.n	800196a <HAL_UART_RxCpltCallback+0x1a6>
					case 'b' : portnameT = GPIOB; break;
 8001890:	4b42      	ldr	r3, [pc, #264]	; (800199c <HAL_UART_RxCpltCallback+0x1d8>)
 8001892:	4a39      	ldr	r2, [pc, #228]	; (8001978 <HAL_UART_RxCpltCallback+0x1b4>)
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	e068      	b.n	800196a <HAL_UART_RxCpltCallback+0x1a6>
					case 'c' : portnameT = GPIOC; break;
 8001898:	4b40      	ldr	r3, [pc, #256]	; (800199c <HAL_UART_RxCpltCallback+0x1d8>)
 800189a:	4a42      	ldr	r2, [pc, #264]	; (80019a4 <HAL_UART_RxCpltCallback+0x1e0>)
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	e064      	b.n	800196a <HAL_UART_RxCpltCallback+0x1a6>
					case 'd' : portnameT = GPIOD; break;
 80018a0:	4b3e      	ldr	r3, [pc, #248]	; (800199c <HAL_UART_RxCpltCallback+0x1d8>)
 80018a2:	4a41      	ldr	r2, [pc, #260]	; (80019a8 <HAL_UART_RxCpltCallback+0x1e4>)
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	e060      	b.n	800196a <HAL_UART_RxCpltCallback+0x1a6>
					case 'e' : portnameT = GPIOE; break;
 80018a8:	4b3c      	ldr	r3, [pc, #240]	; (800199c <HAL_UART_RxCpltCallback+0x1d8>)
 80018aa:	4a40      	ldr	r2, [pc, #256]	; (80019ac <HAL_UART_RxCpltCallback+0x1e8>)
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	e05c      	b.n	800196a <HAL_UART_RxCpltCallback+0x1a6>
					case 'f' : portnameT = GPIOF; break;
 80018b0:	4b3a      	ldr	r3, [pc, #232]	; (800199c <HAL_UART_RxCpltCallback+0x1d8>)
 80018b2:	4a3f      	ldr	r2, [pc, #252]	; (80019b0 <HAL_UART_RxCpltCallback+0x1ec>)
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	e058      	b.n	800196a <HAL_UART_RxCpltCallback+0x1a6>
					case 'g' : portnameT = GPIOG; break;
 80018b8:	4b38      	ldr	r3, [pc, #224]	; (800199c <HAL_UART_RxCpltCallback+0x1d8>)
 80018ba:	4a3e      	ldr	r2, [pc, #248]	; (80019b4 <HAL_UART_RxCpltCallback+0x1f0>)
 80018bc:	601a      	str	r2, [r3, #0]
 80018be:	bf00      	nop
 80018c0:	e053      	b.n	800196a <HAL_UART_RxCpltCallback+0x1a6>
		else if(rxlevel==2){
 80018c2:	4b35      	ldr	r3, [pc, #212]	; (8001998 <HAL_UART_RxCpltCallback+0x1d4>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d11a      	bne.n	8001900 <HAL_UART_RxCpltCallback+0x13c>
			if(rx3_data == 'B'){
 80018ca:	4b2c      	ldr	r3, [pc, #176]	; (800197c <HAL_UART_RxCpltCallback+0x1b8>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	2b42      	cmp	r3, #66	; 0x42
 80018d0:	d10a      	bne.n	80018e8 <HAL_UART_RxCpltCallback+0x124>
				portnum = atoi(portnums);
 80018d2:	4839      	ldr	r0, [pc, #228]	; (80019b8 <HAL_UART_RxCpltCallback+0x1f4>)
 80018d4:	f004 f866 	bl	80059a4 <atoi>
 80018d8:	4602      	mov	r2, r0
 80018da:	4b2b      	ldr	r3, [pc, #172]	; (8001988 <HAL_UART_RxCpltCallback+0x1c4>)
 80018dc:	601a      	str	r2, [r3, #0]
				rxlevel++;
 80018de:	4b2e      	ldr	r3, [pc, #184]	; (8001998 <HAL_UART_RxCpltCallback+0x1d4>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	3301      	adds	r3, #1
 80018e4:	4a2c      	ldr	r2, [pc, #176]	; (8001998 <HAL_UART_RxCpltCallback+0x1d4>)
 80018e6:	6013      	str	r3, [r2, #0]
			portnums[portnumcount] = rx3_data;
 80018e8:	4b28      	ldr	r3, [pc, #160]	; (800198c <HAL_UART_RxCpltCallback+0x1c8>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a23      	ldr	r2, [pc, #140]	; (800197c <HAL_UART_RxCpltCallback+0x1b8>)
 80018ee:	7811      	ldrb	r1, [r2, #0]
 80018f0:	4a31      	ldr	r2, [pc, #196]	; (80019b8 <HAL_UART_RxCpltCallback+0x1f4>)
 80018f2:	54d1      	strb	r1, [r2, r3]
			portnumcount++;
 80018f4:	4b25      	ldr	r3, [pc, #148]	; (800198c <HAL_UART_RxCpltCallback+0x1c8>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	3301      	adds	r3, #1
 80018fa:	4a24      	ldr	r2, [pc, #144]	; (800198c <HAL_UART_RxCpltCallback+0x1c8>)
 80018fc:	6013      	str	r3, [r2, #0]
}
 80018fe:	e034      	b.n	800196a <HAL_UART_RxCpltCallback+0x1a6>
		else if(rxlevel==3){
 8001900:	4b25      	ldr	r3, [pc, #148]	; (8001998 <HAL_UART_RxCpltCallback+0x1d4>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2b03      	cmp	r3, #3
 8001906:	d10f      	bne.n	8001928 <HAL_UART_RxCpltCallback+0x164>
			if(rx3_data == 'C'){
 8001908:	4b1c      	ldr	r3, [pc, #112]	; (800197c <HAL_UART_RxCpltCallback+0x1b8>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b43      	cmp	r3, #67	; 0x43
 800190e:	d105      	bne.n	800191c <HAL_UART_RxCpltCallback+0x158>
				rxlevel++;
 8001910:	4b21      	ldr	r3, [pc, #132]	; (8001998 <HAL_UART_RxCpltCallback+0x1d4>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	3301      	adds	r3, #1
 8001916:	4a20      	ldr	r2, [pc, #128]	; (8001998 <HAL_UART_RxCpltCallback+0x1d4>)
 8001918:	6013      	str	r3, [r2, #0]
}
 800191a:	e026      	b.n	800196a <HAL_UART_RxCpltCallback+0x1a6>
			else bits = rx3_data - '0';
 800191c:	4b17      	ldr	r3, [pc, #92]	; (800197c <HAL_UART_RxCpltCallback+0x1b8>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	3b30      	subs	r3, #48	; 0x30
 8001922:	4a1b      	ldr	r2, [pc, #108]	; (8001990 <HAL_UART_RxCpltCallback+0x1cc>)
 8001924:	6013      	str	r3, [r2, #0]
}
 8001926:	e020      	b.n	800196a <HAL_UART_RxCpltCallback+0x1a6>
		else if(rxlevel==4){
 8001928:	4b1b      	ldr	r3, [pc, #108]	; (8001998 <HAL_UART_RxCpltCallback+0x1d4>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2b04      	cmp	r3, #4
 800192e:	d11c      	bne.n	800196a <HAL_UART_RxCpltCallback+0x1a6>
			if(rx3_data == 'E'){
 8001930:	4b12      	ldr	r3, [pc, #72]	; (800197c <HAL_UART_RxCpltCallback+0x1b8>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2b45      	cmp	r3, #69	; 0x45
 8001936:	d112      	bne.n	800195e <HAL_UART_RxCpltCallback+0x19a>
				printf(" name : %c num : %d bit :%d cycle :%d \n",portname,portnum,bits,cycle);
 8001938:	4b12      	ldr	r3, [pc, #72]	; (8001984 <HAL_UART_RxCpltCallback+0x1c0>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	4618      	mov	r0, r3
 800193e:	4b12      	ldr	r3, [pc, #72]	; (8001988 <HAL_UART_RxCpltCallback+0x1c4>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	4b13      	ldr	r3, [pc, #76]	; (8001990 <HAL_UART_RxCpltCallback+0x1cc>)
 8001944:	6819      	ldr	r1, [r3, #0]
 8001946:	4b13      	ldr	r3, [pc, #76]	; (8001994 <HAL_UART_RxCpltCallback+0x1d0>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	9300      	str	r3, [sp, #0]
 800194c:	460b      	mov	r3, r1
 800194e:	4601      	mov	r1, r0
 8001950:	481a      	ldr	r0, [pc, #104]	; (80019bc <HAL_UART_RxCpltCallback+0x1f8>)
 8001952:	f004 f85d 	bl	8005a10 <iprintf>
				SFlag = 1;
 8001956:	4b1a      	ldr	r3, [pc, #104]	; (80019c0 <HAL_UART_RxCpltCallback+0x1fc>)
 8001958:	2201      	movs	r2, #1
 800195a:	701a      	strb	r2, [r3, #0]
}
 800195c:	e005      	b.n	800196a <HAL_UART_RxCpltCallback+0x1a6>
			else cycle = rx3_data - '0';
 800195e:	4b07      	ldr	r3, [pc, #28]	; (800197c <HAL_UART_RxCpltCallback+0x1b8>)
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	3b30      	subs	r3, #48	; 0x30
 8001964:	4a0b      	ldr	r2, [pc, #44]	; (8001994 <HAL_UART_RxCpltCallback+0x1d0>)
 8001966:	6013      	str	r3, [r2, #0]
}
 8001968:	e7ff      	b.n	800196a <HAL_UART_RxCpltCallback+0x1a6>
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40004800 	.word	0x40004800
 8001978:	40020400 	.word	0x40020400
 800197c:	20001a7d 	.word	0x20001a7d
 8001980:	20001b54 	.word	0x20001b54
 8001984:	20001a7c 	.word	0x20001a7c
 8001988:	20001a8c 	.word	0x20001a8c
 800198c:	20001a88 	.word	0x20001a88
 8001990:	20001a84 	.word	0x20001a84
 8001994:	20001a78 	.word	0x20001a78
 8001998:	2000020c 	.word	0x2000020c
 800199c:	20001a80 	.word	0x20001a80
 80019a0:	40020000 	.word	0x40020000
 80019a4:	40020800 	.word	0x40020800
 80019a8:	40020c00 	.word	0x40020c00
 80019ac:	40021000 	.word	0x40021000
 80019b0:	40021400 	.word	0x40021400
 80019b4:	40021800 	.word	0x40021800
 80019b8:	20000000 	.word	0x20000000
 80019bc:	0800695c 	.word	0x0800695c
 80019c0:	20001a90 	.word	0x20001a90

080019c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
	...

080019d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	607b      	str	r3, [r7, #4]
 80019de:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <HAL_MspInit+0x4c>)
 80019e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e2:	4a0f      	ldr	r2, [pc, #60]	; (8001a20 <HAL_MspInit+0x4c>)
 80019e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019e8:	6453      	str	r3, [r2, #68]	; 0x44
 80019ea:	4b0d      	ldr	r3, [pc, #52]	; (8001a20 <HAL_MspInit+0x4c>)
 80019ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019f2:	607b      	str	r3, [r7, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	603b      	str	r3, [r7, #0]
 80019fa:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <HAL_MspInit+0x4c>)
 80019fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fe:	4a08      	ldr	r2, [pc, #32]	; (8001a20 <HAL_MspInit+0x4c>)
 8001a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a04:	6413      	str	r3, [r2, #64]	; 0x40
 8001a06:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <HAL_MspInit+0x4c>)
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0e:	603b      	str	r3, [r7, #0]
 8001a10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	40023800 	.word	0x40023800

08001a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a32:	b480      	push	{r7}
 8001a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a36:	e7fe      	b.n	8001a36 <HardFault_Handler+0x4>

08001a38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a3c:	e7fe      	b.n	8001a3c <MemManage_Handler+0x4>

08001a3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a42:	e7fe      	b.n	8001a42 <BusFault_Handler+0x4>

08001a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a48:	e7fe      	b.n	8001a48 <UsageFault_Handler+0x4>

08001a4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a78:	f000 fc22 	bl	80022c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a7c:	bf00      	nop
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a84:	4802      	ldr	r0, [pc, #8]	; (8001a90 <TIM3_IRQHandler+0x10>)
 8001a86:	f002 f9e8 	bl	8003e5a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	20001ad4 	.word	0x20001ad4

08001a94 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001a98:	4802      	ldr	r0, [pc, #8]	; (8001aa4 <TIM4_IRQHandler+0x10>)
 8001a9a:	f002 f9de 	bl	8003e5a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20001a94 	.word	0x20001a94

08001aa8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001aac:	4802      	ldr	r0, [pc, #8]	; (8001ab8 <USART3_IRQHandler+0x10>)
 8001aae:	f002 fec1 	bl	8004834 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20001b54 	.word	0x20001b54

08001abc <_read>:
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]
 8001acc:	e00a      	b.n	8001ae4 <_read+0x28>
 8001ace:	f3af 8000 	nop.w
 8001ad2:	4601      	mov	r1, r0
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	1c5a      	adds	r2, r3, #1
 8001ad8:	60ba      	str	r2, [r7, #8]
 8001ada:	b2ca      	uxtb	r2, r1
 8001adc:	701a      	strb	r2, [r3, #0]
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	617b      	str	r3, [r7, #20]
 8001ae4:	697a      	ldr	r2, [r7, #20]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	dbf0      	blt.n	8001ace <_read+0x12>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4618      	mov	r0, r3
 8001af0:	3718      	adds	r7, #24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <_close>:
 8001af6:	b480      	push	{r7}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
 8001afe:	f04f 33ff 	mov.w	r3, #4294967295
 8001b02:	4618      	mov	r0, r3
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <_fstat>:
 8001b0e:	b480      	push	{r7}
 8001b10:	b083      	sub	sp, #12
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
 8001b16:	6039      	str	r1, [r7, #0]
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b1e:	605a      	str	r2, [r3, #4]
 8001b20:	2300      	movs	r3, #0
 8001b22:	4618      	mov	r0, r3
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <_isatty>:
 8001b2e:	b480      	push	{r7}
 8001b30:	b083      	sub	sp, #12
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
 8001b36:	2301      	movs	r3, #1
 8001b38:	4618      	mov	r0, r3
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <_lseek>:
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
 8001b50:	2300      	movs	r3, #0
 8001b52:	4618      	mov	r0, r3
 8001b54:	3714      	adds	r7, #20
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
	...

08001b60 <_sbrk>:
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	4b11      	ldr	r3, [pc, #68]	; (8001bb0 <_sbrk+0x50>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d102      	bne.n	8001b76 <_sbrk+0x16>
 8001b70:	4b0f      	ldr	r3, [pc, #60]	; (8001bb0 <_sbrk+0x50>)
 8001b72:	4a10      	ldr	r2, [pc, #64]	; (8001bb4 <_sbrk+0x54>)
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	4b0e      	ldr	r3, [pc, #56]	; (8001bb0 <_sbrk+0x50>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	4b0c      	ldr	r3, [pc, #48]	; (8001bb0 <_sbrk+0x50>)
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	4413      	add	r3, r2
 8001b84:	466a      	mov	r2, sp
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d907      	bls.n	8001b9a <_sbrk+0x3a>
 8001b8a:	f003 ff0f 	bl	80059ac <__errno>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	230c      	movs	r3, #12
 8001b92:	6013      	str	r3, [r2, #0]
 8001b94:	f04f 33ff 	mov.w	r3, #4294967295
 8001b98:	e006      	b.n	8001ba8 <_sbrk+0x48>
 8001b9a:	4b05      	ldr	r3, [pc, #20]	; (8001bb0 <_sbrk+0x50>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	4a03      	ldr	r2, [pc, #12]	; (8001bb0 <_sbrk+0x50>)
 8001ba4:	6013      	str	r3, [r2, #0]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3710      	adds	r7, #16
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20000210 	.word	0x20000210
 8001bb4:	20001fa8 	.word	0x20001fa8

08001bb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bbc:	4b08      	ldr	r3, [pc, #32]	; (8001be0 <SystemInit+0x28>)
 8001bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bc2:	4a07      	ldr	r2, [pc, #28]	; (8001be0 <SystemInit+0x28>)
 8001bc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001bcc:	4b04      	ldr	r3, [pc, #16]	; (8001be0 <SystemInit+0x28>)
 8001bce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bd2:	609a      	str	r2, [r3, #8]
#endif
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	e000ed00 	.word	0xe000ed00

08001be4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bea:	f107 0308 	add.w	r3, r7, #8
 8001bee:	2200      	movs	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	605a      	str	r2, [r3, #4]
 8001bf4:	609a      	str	r2, [r3, #8]
 8001bf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bf8:	463b      	mov	r3, r7
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8001c00:	4b1d      	ldr	r3, [pc, #116]	; (8001c78 <MX_TIM2_Init+0x94>)
 8001c02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c06:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 8001c08:	4b1b      	ldr	r3, [pc, #108]	; (8001c78 <MX_TIM2_Init+0x94>)
 8001c0a:	2248      	movs	r2, #72	; 0x48
 8001c0c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c0e:	4b1a      	ldr	r3, [pc, #104]	; (8001c78 <MX_TIM2_Init+0x94>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff;
 8001c14:	4b18      	ldr	r3, [pc, #96]	; (8001c78 <MX_TIM2_Init+0x94>)
 8001c16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c1a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c1c:	4b16      	ldr	r3, [pc, #88]	; (8001c78 <MX_TIM2_Init+0x94>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c22:	4b15      	ldr	r3, [pc, #84]	; (8001c78 <MX_TIM2_Init+0x94>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c28:	4813      	ldr	r0, [pc, #76]	; (8001c78 <MX_TIM2_Init+0x94>)
 8001c2a:	f002 f8a3 	bl	8003d74 <HAL_TIM_Base_Init>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001c34:	f7ff fec6 	bl	80019c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c3e:	f107 0308 	add.w	r3, r7, #8
 8001c42:	4619      	mov	r1, r3
 8001c44:	480c      	ldr	r0, [pc, #48]	; (8001c78 <MX_TIM2_Init+0x94>)
 8001c46:	f002 fa10 	bl	800406a <HAL_TIM_ConfigClockSource>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001c50:	f7ff feb8 	bl	80019c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c54:	2300      	movs	r3, #0
 8001c56:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c5c:	463b      	mov	r3, r7
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4805      	ldr	r0, [pc, #20]	; (8001c78 <MX_TIM2_Init+0x94>)
 8001c62:	f002 fc1b 	bl	800449c <HAL_TIMEx_MasterConfigSynchronization>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001c6c:	f7ff feaa 	bl	80019c4 <Error_Handler>
  }

}
 8001c70:	bf00      	nop
 8001c72:	3718      	adds	r7, #24
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20001b14 	.word	0x20001b14

08001c7c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c82:	f107 0308 	add.w	r3, r7, #8
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	605a      	str	r2, [r3, #4]
 8001c8c:	609a      	str	r2, [r3, #8]
 8001c8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c90:	463b      	mov	r3, r7
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8001c98:	4b1c      	ldr	r3, [pc, #112]	; (8001d0c <MX_TIM3_Init+0x90>)
 8001c9a:	4a1d      	ldr	r2, [pc, #116]	; (8001d10 <MX_TIM3_Init+0x94>)
 8001c9c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 8001c9e:	4b1b      	ldr	r3, [pc, #108]	; (8001d0c <MX_TIM3_Init+0x90>)
 8001ca0:	2248      	movs	r2, #72	; 0x48
 8001ca2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca4:	4b19      	ldr	r3, [pc, #100]	; (8001d0c <MX_TIM3_Init+0x90>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10-1;
 8001caa:	4b18      	ldr	r3, [pc, #96]	; (8001d0c <MX_TIM3_Init+0x90>)
 8001cac:	2209      	movs	r2, #9
 8001cae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cb0:	4b16      	ldr	r3, [pc, #88]	; (8001d0c <MX_TIM3_Init+0x90>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cb6:	4b15      	ldr	r3, [pc, #84]	; (8001d0c <MX_TIM3_Init+0x90>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001cbc:	4813      	ldr	r0, [pc, #76]	; (8001d0c <MX_TIM3_Init+0x90>)
 8001cbe:	f002 f859 	bl	8003d74 <HAL_TIM_Base_Init>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8001cc8:	f7ff fe7c 	bl	80019c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ccc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cd0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001cd2:	f107 0308 	add.w	r3, r7, #8
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	480c      	ldr	r0, [pc, #48]	; (8001d0c <MX_TIM3_Init+0x90>)
 8001cda:	f002 f9c6 	bl	800406a <HAL_TIM_ConfigClockSource>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8001ce4:	f7ff fe6e 	bl	80019c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cec:	2300      	movs	r3, #0
 8001cee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cf0:	463b      	mov	r3, r7
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4805      	ldr	r0, [pc, #20]	; (8001d0c <MX_TIM3_Init+0x90>)
 8001cf6:	f002 fbd1 	bl	800449c <HAL_TIMEx_MasterConfigSynchronization>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8001d00:	f7ff fe60 	bl	80019c4 <Error_Handler>
  }

}
 8001d04:	bf00      	nop
 8001d06:	3718      	adds	r7, #24
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	20001ad4 	.word	0x20001ad4
 8001d10:	40000400 	.word	0x40000400

08001d14 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d1a:	f107 0308 	add.w	r3, r7, #8
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	605a      	str	r2, [r3, #4]
 8001d24:	609a      	str	r2, [r3, #8]
 8001d26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d28:	463b      	mov	r3, r7
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 8001d30:	4b1c      	ldr	r3, [pc, #112]	; (8001da4 <MX_TIM4_Init+0x90>)
 8001d32:	4a1d      	ldr	r2, [pc, #116]	; (8001da8 <MX_TIM4_Init+0x94>)
 8001d34:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72;
 8001d36:	4b1b      	ldr	r3, [pc, #108]	; (8001da4 <MX_TIM4_Init+0x90>)
 8001d38:	2248      	movs	r2, #72	; 0x48
 8001d3a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d3c:	4b19      	ldr	r3, [pc, #100]	; (8001da4 <MX_TIM4_Init+0x90>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8001d42:	4b18      	ldr	r3, [pc, #96]	; (8001da4 <MX_TIM4_Init+0x90>)
 8001d44:	2263      	movs	r2, #99	; 0x63
 8001d46:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d48:	4b16      	ldr	r3, [pc, #88]	; (8001da4 <MX_TIM4_Init+0x90>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d4e:	4b15      	ldr	r3, [pc, #84]	; (8001da4 <MX_TIM4_Init+0x90>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001d54:	4813      	ldr	r0, [pc, #76]	; (8001da4 <MX_TIM4_Init+0x90>)
 8001d56:	f002 f80d 	bl	8003d74 <HAL_TIM_Base_Init>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8001d60:	f7ff fe30 	bl	80019c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001d6a:	f107 0308 	add.w	r3, r7, #8
 8001d6e:	4619      	mov	r1, r3
 8001d70:	480c      	ldr	r0, [pc, #48]	; (8001da4 <MX_TIM4_Init+0x90>)
 8001d72:	f002 f97a 	bl	800406a <HAL_TIM_ConfigClockSource>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8001d7c:	f7ff fe22 	bl	80019c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d80:	2300      	movs	r3, #0
 8001d82:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d84:	2300      	movs	r3, #0
 8001d86:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d88:	463b      	mov	r3, r7
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4805      	ldr	r0, [pc, #20]	; (8001da4 <MX_TIM4_Init+0x90>)
 8001d8e:	f002 fb85 	bl	800449c <HAL_TIMEx_MasterConfigSynchronization>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8001d98:	f7ff fe14 	bl	80019c4 <Error_Handler>
  }

}
 8001d9c:	bf00      	nop
 8001d9e:	3718      	adds	r7, #24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20001a94 	.word	0x20001a94
 8001da8:	40000800 	.word	0x40000800

08001dac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dbc:	d10e      	bne.n	8001ddc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	617b      	str	r3, [r7, #20]
 8001dc2:	4b24      	ldr	r3, [pc, #144]	; (8001e54 <HAL_TIM_Base_MspInit+0xa8>)
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	4a23      	ldr	r2, [pc, #140]	; (8001e54 <HAL_TIM_Base_MspInit+0xa8>)
 8001dc8:	f043 0301 	orr.w	r3, r3, #1
 8001dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dce:	4b21      	ldr	r3, [pc, #132]	; (8001e54 <HAL_TIM_Base_MspInit+0xa8>)
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	617b      	str	r3, [r7, #20]
 8001dd8:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001dda:	e036      	b.n	8001e4a <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM3)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a1d      	ldr	r2, [pc, #116]	; (8001e58 <HAL_TIM_Base_MspInit+0xac>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d116      	bne.n	8001e14 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	613b      	str	r3, [r7, #16]
 8001dea:	4b1a      	ldr	r3, [pc, #104]	; (8001e54 <HAL_TIM_Base_MspInit+0xa8>)
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	4a19      	ldr	r2, [pc, #100]	; (8001e54 <HAL_TIM_Base_MspInit+0xa8>)
 8001df0:	f043 0302 	orr.w	r3, r3, #2
 8001df4:	6413      	str	r3, [r2, #64]	; 0x40
 8001df6:	4b17      	ldr	r3, [pc, #92]	; (8001e54 <HAL_TIM_Base_MspInit+0xa8>)
 8001df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	613b      	str	r3, [r7, #16]
 8001e00:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001e02:	2200      	movs	r2, #0
 8001e04:	2100      	movs	r1, #0
 8001e06:	201d      	movs	r0, #29
 8001e08:	f000 fb77 	bl	80024fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e0c:	201d      	movs	r0, #29
 8001e0e:	f000 fb90 	bl	8002532 <HAL_NVIC_EnableIRQ>
}
 8001e12:	e01a      	b.n	8001e4a <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM4)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a10      	ldr	r2, [pc, #64]	; (8001e5c <HAL_TIM_Base_MspInit+0xb0>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d115      	bne.n	8001e4a <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	4b0c      	ldr	r3, [pc, #48]	; (8001e54 <HAL_TIM_Base_MspInit+0xa8>)
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	4a0b      	ldr	r2, [pc, #44]	; (8001e54 <HAL_TIM_Base_MspInit+0xa8>)
 8001e28:	f043 0304 	orr.w	r3, r3, #4
 8001e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e2e:	4b09      	ldr	r3, [pc, #36]	; (8001e54 <HAL_TIM_Base_MspInit+0xa8>)
 8001e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e32:	f003 0304 	and.w	r3, r3, #4
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	201e      	movs	r0, #30
 8001e40:	f000 fb5b 	bl	80024fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001e44:	201e      	movs	r0, #30
 8001e46:	f000 fb74 	bl	8002532 <HAL_NVIC_EnableIRQ>
}
 8001e4a:	bf00      	nop
 8001e4c:	3718      	adds	r7, #24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40023800 	.word	0x40023800
 8001e58:	40000400 	.word	0x40000400
 8001e5c:	40000800 	.word	0x40000800

08001e60 <pow>:
  }
} 

/* USER CODE BEGIN 1 */
int pow(int a, int b)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
	int i, pow = 1;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < b; i++) pow *= a;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60fb      	str	r3, [r7, #12]
 8001e72:	e007      	b.n	8001e84 <pow+0x24>
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	fb02 f303 	mul.w	r3, r2, r3
 8001e7c:	60bb      	str	r3, [r7, #8]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	3301      	adds	r3, #1
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	68fa      	ldr	r2, [r7, #12]
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	dbf3      	blt.n	8001e74 <pow+0x14>
	return pow;
 8001e8c:	68bb      	ldr	r3, [r7, #8]
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3714      	adds	r7, #20
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
	...

08001e9c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ea0:	b086      	sub	sp, #24
 8001ea2:	af04      	add	r7, sp, #16
 8001ea4:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a3e      	ldr	r2, [pc, #248]	; (8001fa4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d15f      	bne.n	8001f70 <HAL_TIM_PeriodElapsedCallback+0xd4>

		if(SFlag){
 8001eb0:	4b3d      	ldr	r3, [pc, #244]	; (8001fa8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d05b      	beq.n	8001f70 <HAL_TIM_PeriodElapsedCallback+0xd4>
			i++;
 8001eb8:	4b3c      	ldr	r3, [pc, #240]	; (8001fac <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	4a3b      	ldr	r2, [pc, #236]	; (8001fac <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001ec0:	6013      	str	r3, [r2, #0]
			sel = LogicAnalyzer(portnameT, (uint16_t)0x0001<<(portnum) , i, pow(10,cycle+1), US,startTrigger,16*pow(2,bits+1));
 8001ec2:	4b3b      	ldr	r3, [pc, #236]	; (8001fb0 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001ec4:	681d      	ldr	r5, [r3, #0]
 8001ec6:	4b3b      	ldr	r3, [pc, #236]	; (8001fb4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	fa02 f603 	lsl.w	r6, r2, r3
 8001ed0:	4b36      	ldr	r3, [pc, #216]	; (8001fac <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	603b      	str	r3, [r7, #0]
 8001ed6:	4b38      	ldr	r3, [pc, #224]	; (8001fb8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	3301      	adds	r3, #1
 8001edc:	4619      	mov	r1, r3
 8001ede:	200a      	movs	r0, #10
 8001ee0:	f7ff ffbe 	bl	8001e60 <pow>
 8001ee4:	4680      	mov	r8, r0
 8001ee6:	4b35      	ldr	r3, [pc, #212]	; (8001fbc <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001ee8:	681c      	ldr	r4, [r3, #0]
 8001eea:	4b35      	ldr	r3, [pc, #212]	; (8001fc0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	2002      	movs	r0, #2
 8001ef4:	f7ff ffb4 	bl	8001e60 <pow>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	011b      	lsls	r3, r3, #4
 8001efc:	9302      	str	r3, [sp, #8]
 8001efe:	9401      	str	r4, [sp, #4]
 8001f00:	2301      	movs	r3, #1
 8001f02:	9300      	str	r3, [sp, #0]
 8001f04:	4643      	mov	r3, r8
 8001f06:	683a      	ldr	r2, [r7, #0]
 8001f08:	4631      	mov	r1, r6
 8001f0a:	4628      	mov	r0, r5
 8001f0c:	f7fe ffb0 	bl	8000e70 <LogicAnalyzer>
 8001f10:	4602      	mov	r2, r0
 8001f12:	4b2c      	ldr	r3, [pc, #176]	; (8001fc4 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001f14:	601a      	str	r2, [r3, #0]
			//sel = LogicAnalyzer(GPIOB, GPIO_PIN_0 , i,1000, US,startTrigger,1024);
			if(sel == 1) i=0;
 8001f16:	4b2b      	ldr	r3, [pc, #172]	; (8001fc4 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d103      	bne.n	8001f26 <HAL_TIM_PeriodElapsedCallback+0x8a>
 8001f1e:	4b23      	ldr	r3, [pc, #140]	; (8001fac <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	e024      	b.n	8001f70 <HAL_TIM_PeriodElapsedCallback+0xd4>
			else if(sel == 2) {
 8001f26:	4b27      	ldr	r3, [pc, #156]	; (8001fc4 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d106      	bne.n	8001f3c <HAL_TIM_PeriodElapsedCallback+0xa0>

				startTrigger = 2;
 8001f2e:	4b23      	ldr	r3, [pc, #140]	; (8001fbc <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001f30:	2202      	movs	r2, #2
 8001f32:	601a      	str	r2, [r3, #0]
				i=0;
 8001f34:	4b1d      	ldr	r3, [pc, #116]	; (8001fac <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	601a      	str	r2, [r3, #0]
 8001f3a:	e019      	b.n	8001f70 <HAL_TIM_PeriodElapsedCallback+0xd4>
			}
			else if(sel == 3) {
 8001f3c:	4b21      	ldr	r3, [pc, #132]	; (8001fc4 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2b03      	cmp	r3, #3
 8001f42:	d103      	bne.n	8001f4c <HAL_TIM_PeriodElapsedCallback+0xb0>
				i=0;
 8001f44:	4b19      	ldr	r3, [pc, #100]	; (8001fac <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	e011      	b.n	8001f70 <HAL_TIM_PeriodElapsedCallback+0xd4>
			}
			else if(sel == 4){
 8001f4c:	4b1d      	ldr	r3, [pc, #116]	; (8001fc4 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2b04      	cmp	r3, #4
 8001f52:	d106      	bne.n	8001f62 <HAL_TIM_PeriodElapsedCallback+0xc6>
				startTrigger = 4;
 8001f54:	4b19      	ldr	r3, [pc, #100]	; (8001fbc <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001f56:	2204      	movs	r2, #4
 8001f58:	601a      	str	r2, [r3, #0]
				SFlag=0;
 8001f5a:	4b13      	ldr	r3, [pc, #76]	; (8001fa8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	701a      	strb	r2, [r3, #0]
 8001f60:	e006      	b.n	8001f70 <HAL_TIM_PeriodElapsedCallback+0xd4>
			}
			else if(sel == 0){
 8001f62:	4b18      	ldr	r3, [pc, #96]	; (8001fc4 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d102      	bne.n	8001f70 <HAL_TIM_PeriodElapsedCallback+0xd4>
				startTrigger = 0;
 8001f6a:	4b14      	ldr	r3, [pc, #80]	; (8001fbc <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
			}
		}
	}

	if(htim->Instance == TIM4){
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a14      	ldr	r2, [pc, #80]	; (8001fc8 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d10f      	bne.n	8001f9a <HAL_TIM_PeriodElapsedCallback+0xfe>
		ledcount++;
 8001f7a:	4b14      	ldr	r3, [pc, #80]	; (8001fcc <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	3301      	adds	r3, #1
 8001f80:	4a12      	ldr	r2, [pc, #72]	; (8001fcc <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001f82:	6013      	str	r3, [r2, #0]
		if(ledcount==10){
 8001f84:	4b11      	ldr	r3, [pc, #68]	; (8001fcc <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2b0a      	cmp	r3, #10
 8001f8a:	d106      	bne.n	8001f9a <HAL_TIM_PeriodElapsedCallback+0xfe>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001f8c:	2101      	movs	r1, #1
 8001f8e:	4810      	ldr	r0, [pc, #64]	; (8001fd0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001f90:	f001 f955 	bl	800323e <HAL_GPIO_TogglePin>
			ledcount=0;
 8001f94:	4b0d      	ldr	r3, [pc, #52]	; (8001fcc <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]
//		}
//		if(ledcount == leduty){
//			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
//		}
	}
}
 8001f9a:	bf00      	nop
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001fa4:	40000400 	.word	0x40000400
 8001fa8:	20001a90 	.word	0x20001a90
 8001fac:	20000214 	.word	0x20000214
 8001fb0:	20001a80 	.word	0x20001a80
 8001fb4:	20001a8c 	.word	0x20001a8c
 8001fb8:	20001a78 	.word	0x20001a78
 8001fbc:	20000218 	.word	0x20000218
 8001fc0:	20001a84 	.word	0x20001a84
 8001fc4:	2000021c 	.word	0x2000021c
 8001fc8:	40000800 	.word	0x40000800
 8001fcc:	20000220 	.word	0x20000220
 8001fd0:	40020400 	.word	0x40020400

08001fd4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001fd8:	4b11      	ldr	r3, [pc, #68]	; (8002020 <MX_USART3_UART_Init+0x4c>)
 8001fda:	4a12      	ldr	r2, [pc, #72]	; (8002024 <MX_USART3_UART_Init+0x50>)
 8001fdc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001fde:	4b10      	ldr	r3, [pc, #64]	; (8002020 <MX_USART3_UART_Init+0x4c>)
 8001fe0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fe4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001fe6:	4b0e      	ldr	r3, [pc, #56]	; (8002020 <MX_USART3_UART_Init+0x4c>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001fec:	4b0c      	ldr	r3, [pc, #48]	; (8002020 <MX_USART3_UART_Init+0x4c>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ff2:	4b0b      	ldr	r3, [pc, #44]	; (8002020 <MX_USART3_UART_Init+0x4c>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ff8:	4b09      	ldr	r3, [pc, #36]	; (8002020 <MX_USART3_UART_Init+0x4c>)
 8001ffa:	220c      	movs	r2, #12
 8001ffc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ffe:	4b08      	ldr	r3, [pc, #32]	; (8002020 <MX_USART3_UART_Init+0x4c>)
 8002000:	2200      	movs	r2, #0
 8002002:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002004:	4b06      	ldr	r3, [pc, #24]	; (8002020 <MX_USART3_UART_Init+0x4c>)
 8002006:	2200      	movs	r2, #0
 8002008:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800200a:	4805      	ldr	r0, [pc, #20]	; (8002020 <MX_USART3_UART_Init+0x4c>)
 800200c:	f002 fad6 	bl	80045bc <HAL_UART_Init>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002016:	f7ff fcd5 	bl	80019c4 <Error_Handler>
  }

}
 800201a:	bf00      	nop
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	20001b54 	.word	0x20001b54
 8002024:	40004800 	.word	0x40004800

08002028 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b08a      	sub	sp, #40	; 0x28
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002030:	f107 0314 	add.w	r3, r7, #20
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	605a      	str	r2, [r3, #4]
 800203a:	609a      	str	r2, [r3, #8]
 800203c:	60da      	str	r2, [r3, #12]
 800203e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a19      	ldr	r2, [pc, #100]	; (80020ac <HAL_UART_MspInit+0x84>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d12c      	bne.n	80020a4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	613b      	str	r3, [r7, #16]
 800204e:	4b18      	ldr	r3, [pc, #96]	; (80020b0 <HAL_UART_MspInit+0x88>)
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	4a17      	ldr	r2, [pc, #92]	; (80020b0 <HAL_UART_MspInit+0x88>)
 8002054:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002058:	6413      	str	r3, [r2, #64]	; 0x40
 800205a:	4b15      	ldr	r3, [pc, #84]	; (80020b0 <HAL_UART_MspInit+0x88>)
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002062:	613b      	str	r3, [r7, #16]
 8002064:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	4b11      	ldr	r3, [pc, #68]	; (80020b0 <HAL_UART_MspInit+0x88>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	4a10      	ldr	r2, [pc, #64]	; (80020b0 <HAL_UART_MspInit+0x88>)
 8002070:	f043 0308 	orr.w	r3, r3, #8
 8002074:	6313      	str	r3, [r2, #48]	; 0x30
 8002076:	4b0e      	ldr	r3, [pc, #56]	; (80020b0 <HAL_UART_MspInit+0x88>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	f003 0308 	and.w	r3, r3, #8
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002082:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002086:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002088:	2302      	movs	r3, #2
 800208a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800208c:	2301      	movs	r3, #1
 800208e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002090:	2303      	movs	r3, #3
 8002092:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002094:	2307      	movs	r3, #7
 8002096:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002098:	f107 0314 	add.w	r3, r7, #20
 800209c:	4619      	mov	r1, r3
 800209e:	4805      	ldr	r0, [pc, #20]	; (80020b4 <HAL_UART_MspInit+0x8c>)
 80020a0:	f000 fef2 	bl	8002e88 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80020a4:	bf00      	nop
 80020a6:	3728      	adds	r7, #40	; 0x28
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40004800 	.word	0x40004800
 80020b0:	40023800 	.word	0x40023800
 80020b4:	40020c00 	.word	0x40020c00

080020b8 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80020bc:	4b14      	ldr	r3, [pc, #80]	; (8002110 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020be:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80020c2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80020c4:	4b12      	ldr	r3, [pc, #72]	; (8002110 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020c6:	2204      	movs	r2, #4
 80020c8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80020ca:	4b11      	ldr	r3, [pc, #68]	; (8002110 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020cc:	2202      	movs	r2, #2
 80020ce:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80020d0:	4b0f      	ldr	r3, [pc, #60]	; (8002110 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80020d6:	4b0e      	ldr	r3, [pc, #56]	; (8002110 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020d8:	2202      	movs	r2, #2
 80020da:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80020dc:	4b0c      	ldr	r3, [pc, #48]	; (8002110 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020de:	2201      	movs	r2, #1
 80020e0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80020e2:	4b0b      	ldr	r3, [pc, #44]	; (8002110 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80020e8:	4b09      	ldr	r3, [pc, #36]	; (8002110 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80020ee:	4b08      	ldr	r3, [pc, #32]	; (8002110 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020f0:	2201      	movs	r2, #1
 80020f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80020f4:	4b06      	ldr	r3, [pc, #24]	; (8002110 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80020fa:	4805      	ldr	r0, [pc, #20]	; (8002110 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80020fc:	f001 f8ba 	bl	8003274 <HAL_PCD_Init>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002106:	f7ff fc5d 	bl	80019c4 <Error_Handler>
  }

}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	20001b94 	.word	0x20001b94

08002114 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b08a      	sub	sp, #40	; 0x28
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800211c:	f107 0314 	add.w	r3, r7, #20
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	605a      	str	r2, [r3, #4]
 8002126:	609a      	str	r2, [r3, #8]
 8002128:	60da      	str	r2, [r3, #12]
 800212a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002134:	d13f      	bne.n	80021b6 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	613b      	str	r3, [r7, #16]
 800213a:	4b21      	ldr	r3, [pc, #132]	; (80021c0 <HAL_PCD_MspInit+0xac>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	4a20      	ldr	r2, [pc, #128]	; (80021c0 <HAL_PCD_MspInit+0xac>)
 8002140:	f043 0301 	orr.w	r3, r3, #1
 8002144:	6313      	str	r3, [r2, #48]	; 0x30
 8002146:	4b1e      	ldr	r3, [pc, #120]	; (80021c0 <HAL_PCD_MspInit+0xac>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	613b      	str	r3, [r7, #16]
 8002150:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002152:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002156:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002158:	2302      	movs	r3, #2
 800215a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215c:	2300      	movs	r3, #0
 800215e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002160:	2303      	movs	r3, #3
 8002162:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002164:	230a      	movs	r3, #10
 8002166:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002168:	f107 0314 	add.w	r3, r7, #20
 800216c:	4619      	mov	r1, r3
 800216e:	4815      	ldr	r0, [pc, #84]	; (80021c4 <HAL_PCD_MspInit+0xb0>)
 8002170:	f000 fe8a 	bl	8002e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002174:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002178:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800217a:	2300      	movs	r3, #0
 800217c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217e:	2300      	movs	r3, #0
 8002180:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002182:	f107 0314 	add.w	r3, r7, #20
 8002186:	4619      	mov	r1, r3
 8002188:	480e      	ldr	r0, [pc, #56]	; (80021c4 <HAL_PCD_MspInit+0xb0>)
 800218a:	f000 fe7d 	bl	8002e88 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800218e:	4b0c      	ldr	r3, [pc, #48]	; (80021c0 <HAL_PCD_MspInit+0xac>)
 8002190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002192:	4a0b      	ldr	r2, [pc, #44]	; (80021c0 <HAL_PCD_MspInit+0xac>)
 8002194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002198:	6353      	str	r3, [r2, #52]	; 0x34
 800219a:	2300      	movs	r3, #0
 800219c:	60fb      	str	r3, [r7, #12]
 800219e:	4b08      	ldr	r3, [pc, #32]	; (80021c0 <HAL_PCD_MspInit+0xac>)
 80021a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a2:	4a07      	ldr	r2, [pc, #28]	; (80021c0 <HAL_PCD_MspInit+0xac>)
 80021a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021a8:	6453      	str	r3, [r2, #68]	; 0x44
 80021aa:	4b05      	ldr	r3, [pc, #20]	; (80021c0 <HAL_PCD_MspInit+0xac>)
 80021ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80021b6:	bf00      	nop
 80021b8:	3728      	adds	r7, #40	; 0x28
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	40023800 	.word	0x40023800
 80021c4:	40020000 	.word	0x40020000

080021c8 <Reset_Handler>:
 80021c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002200 <LoopFillZerobss+0x14>
 80021cc:	2100      	movs	r1, #0
 80021ce:	e003      	b.n	80021d8 <LoopCopyDataInit>

080021d0 <CopyDataInit>:
 80021d0:	4b0c      	ldr	r3, [pc, #48]	; (8002204 <LoopFillZerobss+0x18>)
 80021d2:	585b      	ldr	r3, [r3, r1]
 80021d4:	5043      	str	r3, [r0, r1]
 80021d6:	3104      	adds	r1, #4

080021d8 <LoopCopyDataInit>:
 80021d8:	480b      	ldr	r0, [pc, #44]	; (8002208 <LoopFillZerobss+0x1c>)
 80021da:	4b0c      	ldr	r3, [pc, #48]	; (800220c <LoopFillZerobss+0x20>)
 80021dc:	1842      	adds	r2, r0, r1
 80021de:	429a      	cmp	r2, r3
 80021e0:	d3f6      	bcc.n	80021d0 <CopyDataInit>
 80021e2:	4a0b      	ldr	r2, [pc, #44]	; (8002210 <LoopFillZerobss+0x24>)
 80021e4:	e002      	b.n	80021ec <LoopFillZerobss>

080021e6 <FillZerobss>:
 80021e6:	2300      	movs	r3, #0
 80021e8:	f842 3b04 	str.w	r3, [r2], #4

080021ec <LoopFillZerobss>:
 80021ec:	4b09      	ldr	r3, [pc, #36]	; (8002214 <LoopFillZerobss+0x28>)
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d3f9      	bcc.n	80021e6 <FillZerobss>
 80021f2:	f7ff fce1 	bl	8001bb8 <SystemInit>
 80021f6:	f003 fbdf 	bl	80059b8 <__libc_init_array>
 80021fa:	f7ff fa31 	bl	8001660 <main>
 80021fe:	4770      	bx	lr
 8002200:	20030000 	.word	0x20030000
 8002204:	08006b50 	.word	0x08006b50
 8002208:	20000000 	.word	0x20000000
 800220c:	200001e0 	.word	0x200001e0
 8002210:	200001e0 	.word	0x200001e0
 8002214:	20001fa4 	.word	0x20001fa4

08002218 <ADC_IRQHandler>:
 8002218:	e7fe      	b.n	8002218 <ADC_IRQHandler>
	...

0800221c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002220:	4b0e      	ldr	r3, [pc, #56]	; (800225c <HAL_Init+0x40>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a0d      	ldr	r2, [pc, #52]	; (800225c <HAL_Init+0x40>)
 8002226:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800222a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800222c:	4b0b      	ldr	r3, [pc, #44]	; (800225c <HAL_Init+0x40>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a0a      	ldr	r2, [pc, #40]	; (800225c <HAL_Init+0x40>)
 8002232:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002236:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002238:	4b08      	ldr	r3, [pc, #32]	; (800225c <HAL_Init+0x40>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a07      	ldr	r2, [pc, #28]	; (800225c <HAL_Init+0x40>)
 800223e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002242:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002244:	2003      	movs	r0, #3
 8002246:	f000 f94d 	bl	80024e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800224a:	2000      	movs	r0, #0
 800224c:	f000 f808 	bl	8002260 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002250:	f7ff fbc0 	bl	80019d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40023c00 	.word	0x40023c00

08002260 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002268:	4b12      	ldr	r3, [pc, #72]	; (80022b4 <HAL_InitTick+0x54>)
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	4b12      	ldr	r3, [pc, #72]	; (80022b8 <HAL_InitTick+0x58>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	4619      	mov	r1, r3
 8002272:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002276:	fbb3 f3f1 	udiv	r3, r3, r1
 800227a:	fbb2 f3f3 	udiv	r3, r2, r3
 800227e:	4618      	mov	r0, r3
 8002280:	f000 f965 	bl	800254e <HAL_SYSTICK_Config>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e00e      	b.n	80022ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2b0f      	cmp	r3, #15
 8002292:	d80a      	bhi.n	80022aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002294:	2200      	movs	r2, #0
 8002296:	6879      	ldr	r1, [r7, #4]
 8002298:	f04f 30ff 	mov.w	r0, #4294967295
 800229c:	f000 f92d 	bl	80024fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022a0:	4a06      	ldr	r2, [pc, #24]	; (80022bc <HAL_InitTick+0x5c>)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
 80022a8:	e000      	b.n	80022ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3708      	adds	r7, #8
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	20000004 	.word	0x20000004
 80022b8:	2000000c 	.word	0x2000000c
 80022bc:	20000008 	.word	0x20000008

080022c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022c4:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <HAL_IncTick+0x20>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	461a      	mov	r2, r3
 80022ca:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <HAL_IncTick+0x24>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4413      	add	r3, r2
 80022d0:	4a04      	ldr	r2, [pc, #16]	; (80022e4 <HAL_IncTick+0x24>)
 80022d2:	6013      	str	r3, [r2, #0]
}
 80022d4:	bf00      	nop
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	2000000c 	.word	0x2000000c
 80022e4:	20001f9c 	.word	0x20001f9c

080022e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  return uwTick;
 80022ec:	4b03      	ldr	r3, [pc, #12]	; (80022fc <HAL_GetTick+0x14>)
 80022ee:	681b      	ldr	r3, [r3, #0]
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	20001f9c 	.word	0x20001f9c

08002300 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002308:	f7ff ffee 	bl	80022e8 <HAL_GetTick>
 800230c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002318:	d005      	beq.n	8002326 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800231a:	4b09      	ldr	r3, [pc, #36]	; (8002340 <HAL_Delay+0x40>)
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	461a      	mov	r2, r3
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	4413      	add	r3, r2
 8002324:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002326:	bf00      	nop
 8002328:	f7ff ffde 	bl	80022e8 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	429a      	cmp	r2, r3
 8002336:	d8f7      	bhi.n	8002328 <HAL_Delay+0x28>
  {
  }
}
 8002338:	bf00      	nop
 800233a:	3710      	adds	r7, #16
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	2000000c 	.word	0x2000000c

08002344 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f003 0307 	and.w	r3, r3, #7
 8002352:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002354:	4b0c      	ldr	r3, [pc, #48]	; (8002388 <__NVIC_SetPriorityGrouping+0x44>)
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800235a:	68ba      	ldr	r2, [r7, #8]
 800235c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002360:	4013      	ands	r3, r2
 8002362:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800236c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002370:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002374:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002376:	4a04      	ldr	r2, [pc, #16]	; (8002388 <__NVIC_SetPriorityGrouping+0x44>)
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	60d3      	str	r3, [r2, #12]
}
 800237c:	bf00      	nop
 800237e:	3714      	adds	r7, #20
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	e000ed00 	.word	0xe000ed00

0800238c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002390:	4b04      	ldr	r3, [pc, #16]	; (80023a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	0a1b      	lsrs	r3, r3, #8
 8002396:	f003 0307 	and.w	r3, r3, #7
}
 800239a:	4618      	mov	r0, r3
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	e000ed00 	.word	0xe000ed00

080023a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	4603      	mov	r3, r0
 80023b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	db0b      	blt.n	80023d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ba:	79fb      	ldrb	r3, [r7, #7]
 80023bc:	f003 021f 	and.w	r2, r3, #31
 80023c0:	4907      	ldr	r1, [pc, #28]	; (80023e0 <__NVIC_EnableIRQ+0x38>)
 80023c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c6:	095b      	lsrs	r3, r3, #5
 80023c8:	2001      	movs	r0, #1
 80023ca:	fa00 f202 	lsl.w	r2, r0, r2
 80023ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023d2:	bf00      	nop
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	e000e100 	.word	0xe000e100

080023e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4603      	mov	r3, r0
 80023ec:	6039      	str	r1, [r7, #0]
 80023ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	db0a      	blt.n	800240e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	b2da      	uxtb	r2, r3
 80023fc:	490c      	ldr	r1, [pc, #48]	; (8002430 <__NVIC_SetPriority+0x4c>)
 80023fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002402:	0112      	lsls	r2, r2, #4
 8002404:	b2d2      	uxtb	r2, r2
 8002406:	440b      	add	r3, r1
 8002408:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800240c:	e00a      	b.n	8002424 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	b2da      	uxtb	r2, r3
 8002412:	4908      	ldr	r1, [pc, #32]	; (8002434 <__NVIC_SetPriority+0x50>)
 8002414:	79fb      	ldrb	r3, [r7, #7]
 8002416:	f003 030f 	and.w	r3, r3, #15
 800241a:	3b04      	subs	r3, #4
 800241c:	0112      	lsls	r2, r2, #4
 800241e:	b2d2      	uxtb	r2, r2
 8002420:	440b      	add	r3, r1
 8002422:	761a      	strb	r2, [r3, #24]
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr
 8002430:	e000e100 	.word	0xe000e100
 8002434:	e000ed00 	.word	0xe000ed00

08002438 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002438:	b480      	push	{r7}
 800243a:	b089      	sub	sp, #36	; 0x24
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f003 0307 	and.w	r3, r3, #7
 800244a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	f1c3 0307 	rsb	r3, r3, #7
 8002452:	2b04      	cmp	r3, #4
 8002454:	bf28      	it	cs
 8002456:	2304      	movcs	r3, #4
 8002458:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	3304      	adds	r3, #4
 800245e:	2b06      	cmp	r3, #6
 8002460:	d902      	bls.n	8002468 <NVIC_EncodePriority+0x30>
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	3b03      	subs	r3, #3
 8002466:	e000      	b.n	800246a <NVIC_EncodePriority+0x32>
 8002468:	2300      	movs	r3, #0
 800246a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800246c:	f04f 32ff 	mov.w	r2, #4294967295
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	43da      	mvns	r2, r3
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	401a      	ands	r2, r3
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002480:	f04f 31ff 	mov.w	r1, #4294967295
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	fa01 f303 	lsl.w	r3, r1, r3
 800248a:	43d9      	mvns	r1, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002490:	4313      	orrs	r3, r2
         );
}
 8002492:	4618      	mov	r0, r3
 8002494:	3724      	adds	r7, #36	; 0x24
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
	...

080024a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3b01      	subs	r3, #1
 80024ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024b0:	d301      	bcc.n	80024b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024b2:	2301      	movs	r3, #1
 80024b4:	e00f      	b.n	80024d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024b6:	4a0a      	ldr	r2, [pc, #40]	; (80024e0 <SysTick_Config+0x40>)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	3b01      	subs	r3, #1
 80024bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024be:	210f      	movs	r1, #15
 80024c0:	f04f 30ff 	mov.w	r0, #4294967295
 80024c4:	f7ff ff8e 	bl	80023e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024c8:	4b05      	ldr	r3, [pc, #20]	; (80024e0 <SysTick_Config+0x40>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ce:	4b04      	ldr	r3, [pc, #16]	; (80024e0 <SysTick_Config+0x40>)
 80024d0:	2207      	movs	r2, #7
 80024d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	e000e010 	.word	0xe000e010

080024e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f7ff ff29 	bl	8002344 <__NVIC_SetPriorityGrouping>
}
 80024f2:	bf00      	nop
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b086      	sub	sp, #24
 80024fe:	af00      	add	r7, sp, #0
 8002500:	4603      	mov	r3, r0
 8002502:	60b9      	str	r1, [r7, #8]
 8002504:	607a      	str	r2, [r7, #4]
 8002506:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002508:	2300      	movs	r3, #0
 800250a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800250c:	f7ff ff3e 	bl	800238c <__NVIC_GetPriorityGrouping>
 8002510:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	68b9      	ldr	r1, [r7, #8]
 8002516:	6978      	ldr	r0, [r7, #20]
 8002518:	f7ff ff8e 	bl	8002438 <NVIC_EncodePriority>
 800251c:	4602      	mov	r2, r0
 800251e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002522:	4611      	mov	r1, r2
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff ff5d 	bl	80023e4 <__NVIC_SetPriority>
}
 800252a:	bf00      	nop
 800252c:	3718      	adds	r7, #24
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b082      	sub	sp, #8
 8002536:	af00      	add	r7, sp, #0
 8002538:	4603      	mov	r3, r0
 800253a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800253c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff ff31 	bl	80023a8 <__NVIC_EnableIRQ>
}
 8002546:	bf00      	nop
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b082      	sub	sp, #8
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f7ff ffa2 	bl	80024a0 <SysTick_Config>
 800255c:	4603      	mov	r3, r0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d004      	beq.n	8002584 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2280      	movs	r2, #128	; 0x80
 800257e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e00c      	b.n	800259e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2205      	movs	r2, #5
 8002588:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f022 0201 	bic.w	r2, r2, #1
 800259a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
	...

080025ac <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b088      	sub	sp, #32
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80025b4:	2300      	movs	r3, #0
 80025b6:	61fb      	str	r3, [r7, #28]
 80025b8:	2300      	movs	r3, #0
 80025ba:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80025bc:	4baa      	ldr	r3, [pc, #680]	; (8002868 <HAL_ETH_Init+0x2bc>)
 80025be:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80025c0:	2300      	movs	r3, #0
 80025c2:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80025c4:	2300      	movs	r3, #0
 80025c6:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e185      	b.n	80028de <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d106      	bne.n	80025ec <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f7fe fe68 	bl	80012bc <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ec:	2300      	movs	r3, #0
 80025ee:	60bb      	str	r3, [r7, #8]
 80025f0:	4b9e      	ldr	r3, [pc, #632]	; (800286c <HAL_ETH_Init+0x2c0>)
 80025f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f4:	4a9d      	ldr	r2, [pc, #628]	; (800286c <HAL_ETH_Init+0x2c0>)
 80025f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025fa:	6453      	str	r3, [r2, #68]	; 0x44
 80025fc:	4b9b      	ldr	r3, [pc, #620]	; (800286c <HAL_ETH_Init+0x2c0>)
 80025fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002600:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002604:	60bb      	str	r3, [r7, #8]
 8002606:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002608:	4b99      	ldr	r3, [pc, #612]	; (8002870 <HAL_ETH_Init+0x2c4>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	4a98      	ldr	r2, [pc, #608]	; (8002870 <HAL_ETH_Init+0x2c4>)
 800260e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002612:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002614:	4b96      	ldr	r3, [pc, #600]	; (8002870 <HAL_ETH_Init+0x2c4>)
 8002616:	685a      	ldr	r2, [r3, #4]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	4994      	ldr	r1, [pc, #592]	; (8002870 <HAL_ETH_Init+0x2c4>)
 800261e:	4313      	orrs	r3, r2
 8002620:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f042 0201 	orr.w	r2, r2, #1
 8002634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002638:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800263a:	f7ff fe55 	bl	80022e8 <HAL_GetTick>
 800263e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002640:	e011      	b.n	8002666 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8002642:	f7ff fe51 	bl	80022e8 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002650:	d909      	bls.n	8002666 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2203      	movs	r2, #3
 8002656:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e13b      	b.n	80028de <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0301 	and.w	r3, r3, #1
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1e4      	bne.n	8002642 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	f023 031c 	bic.w	r3, r3, #28
 8002686:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002688:	f001 fb40 	bl	8003d0c <HAL_RCC_GetHCLKFreq>
 800268c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	4a78      	ldr	r2, [pc, #480]	; (8002874 <HAL_ETH_Init+0x2c8>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d908      	bls.n	80026a8 <HAL_ETH_Init+0xfc>
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	4a77      	ldr	r2, [pc, #476]	; (8002878 <HAL_ETH_Init+0x2cc>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d804      	bhi.n	80026a8 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	f043 0308 	orr.w	r3, r3, #8
 80026a4:	61fb      	str	r3, [r7, #28]
 80026a6:	e027      	b.n	80026f8 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	4a73      	ldr	r2, [pc, #460]	; (8002878 <HAL_ETH_Init+0x2cc>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d908      	bls.n	80026c2 <HAL_ETH_Init+0x116>
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	4a72      	ldr	r2, [pc, #456]	; (800287c <HAL_ETH_Init+0x2d0>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d804      	bhi.n	80026c2 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	f043 030c 	orr.w	r3, r3, #12
 80026be:	61fb      	str	r3, [r7, #28]
 80026c0:	e01a      	b.n	80026f8 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	4a6d      	ldr	r2, [pc, #436]	; (800287c <HAL_ETH_Init+0x2d0>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d903      	bls.n	80026d2 <HAL_ETH_Init+0x126>
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	4a6c      	ldr	r2, [pc, #432]	; (8002880 <HAL_ETH_Init+0x2d4>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d911      	bls.n	80026f6 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	4a6a      	ldr	r2, [pc, #424]	; (8002880 <HAL_ETH_Init+0x2d4>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d908      	bls.n	80026ec <HAL_ETH_Init+0x140>
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	4a69      	ldr	r2, [pc, #420]	; (8002884 <HAL_ETH_Init+0x2d8>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d804      	bhi.n	80026ec <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	f043 0304 	orr.w	r3, r3, #4
 80026e8:	61fb      	str	r3, [r7, #28]
 80026ea:	e005      	b.n	80026f8 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	f043 0310 	orr.w	r3, r3, #16
 80026f2:	61fb      	str	r3, [r7, #28]
 80026f4:	e000      	b.n	80026f8 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80026f6:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	69fa      	ldr	r2, [r7, #28]
 80026fe:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8002700:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002704:	2100      	movs	r1, #0
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 f956 	bl	80029b8 <HAL_ETH_WritePHYRegister>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00b      	beq.n	800272a <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8002716:	6939      	ldr	r1, [r7, #16]
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f000 f9b3 	bl	8002a84 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e0d9      	b.n	80028de <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800272a:	20ff      	movs	r0, #255	; 0xff
 800272c:	f7ff fde8 	bl	8002300 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	2b00      	cmp	r3, #0
 8002736:	f000 80a7 	beq.w	8002888 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800273a:	f7ff fdd5 	bl	80022e8 <HAL_GetTick>
 800273e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002740:	f107 030c 	add.w	r3, r7, #12
 8002744:	461a      	mov	r2, r3
 8002746:	2101      	movs	r1, #1
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f000 f8cd 	bl	80028e8 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800274e:	f7ff fdcb 	bl	80022e8 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	f241 3288 	movw	r2, #5000	; 0x1388
 800275c:	4293      	cmp	r3, r2
 800275e:	d90f      	bls.n	8002780 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002764:	6939      	ldr	r1, [r7, #16]
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 f98c 	bl	8002a84 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e0ae      	b.n	80028de <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f003 0304 	and.w	r3, r3, #4
 8002786:	2b00      	cmp	r3, #0
 8002788:	d0da      	beq.n	8002740 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800278a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800278e:	2100      	movs	r1, #0
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f000 f911 	bl	80029b8 <HAL_ETH_WritePHYRegister>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d00b      	beq.n	80027b4 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80027a0:	6939      	ldr	r1, [r7, #16]
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 f96e 	bl	8002a84 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80027b0:	2301      	movs	r3, #1
 80027b2:	e094      	b.n	80028de <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80027b4:	f7ff fd98 	bl	80022e8 <HAL_GetTick>
 80027b8:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80027ba:	f107 030c 	add.w	r3, r7, #12
 80027be:	461a      	mov	r2, r3
 80027c0:	2101      	movs	r1, #1
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 f890 	bl	80028e8 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80027c8:	f7ff fd8e 	bl	80022e8 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d90f      	bls.n	80027fa <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80027de:	6939      	ldr	r1, [r7, #16]
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f000 f94f 	bl	8002a84 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2201      	movs	r2, #1
 80027ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e071      	b.n	80028de <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f003 0320 	and.w	r3, r3, #32
 8002800:	2b00      	cmp	r3, #0
 8002802:	d0da      	beq.n	80027ba <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8002804:	f107 030c 	add.w	r3, r7, #12
 8002808:	461a      	mov	r2, r3
 800280a:	211f      	movs	r1, #31
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f000 f86b 	bl	80028e8 <HAL_ETH_ReadPHYRegister>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00b      	beq.n	8002830 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800281c:	6939      	ldr	r1, [r7, #16]
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 f930 	bl	8002a84 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800282c:	2301      	movs	r3, #1
 800282e:	e056      	b.n	80028de <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f003 0310 	and.w	r3, r3, #16
 8002836:	2b00      	cmp	r3, #0
 8002838:	d004      	beq.n	8002844 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002840:	60da      	str	r2, [r3, #12]
 8002842:	e002      	b.n	800284a <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f003 0304 	and.w	r3, r3, #4
 8002850:	2b00      	cmp	r3, #0
 8002852:	d003      	beq.n	800285c <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	609a      	str	r2, [r3, #8]
 800285a:	e037      	b.n	80028cc <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002862:	609a      	str	r2, [r3, #8]
 8002864:	e032      	b.n	80028cc <HAL_ETH_Init+0x320>
 8002866:	bf00      	nop
 8002868:	03938700 	.word	0x03938700
 800286c:	40023800 	.word	0x40023800
 8002870:	40013800 	.word	0x40013800
 8002874:	01312cff 	.word	0x01312cff
 8002878:	02160ebf 	.word	0x02160ebf
 800287c:	039386ff 	.word	0x039386ff
 8002880:	05f5e0ff 	.word	0x05f5e0ff
 8002884:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	08db      	lsrs	r3, r3, #3
 800288e:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	085b      	lsrs	r3, r3, #1
 8002896:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002898:	4313      	orrs	r3, r2
 800289a:	b29b      	uxth	r3, r3
 800289c:	461a      	mov	r2, r3
 800289e:	2100      	movs	r1, #0
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 f889 	bl	80029b8 <HAL_ETH_WritePHYRegister>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d00b      	beq.n	80028c4 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80028b0:	6939      	ldr	r1, [r7, #16]
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 f8e6 	bl	8002a84 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e00c      	b.n	80028de <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80028c4:	f640 70ff 	movw	r0, #4095	; 0xfff
 80028c8:	f7ff fd1a 	bl	8002300 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80028cc:	6939      	ldr	r1, [r7, #16]
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 f8d8 	bl	8002a84 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3720      	adds	r7, #32
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop

080028e8 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	460b      	mov	r3, r1
 80028f2:	607a      	str	r2, [r7, #4]
 80028f4:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80028f6:	2300      	movs	r3, #0
 80028f8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80028fa:	2300      	movs	r3, #0
 80028fc:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b82      	cmp	r3, #130	; 0x82
 8002908:	d101      	bne.n	800290e <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800290a:	2302      	movs	r3, #2
 800290c:	e050      	b.n	80029b0 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2282      	movs	r2, #130	; 0x82
 8002912:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	f003 031c 	and.w	r3, r3, #28
 8002924:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	8a1b      	ldrh	r3, [r3, #16]
 800292a:	02db      	lsls	r3, r3, #11
 800292c:	b29b      	uxth	r3, r3
 800292e:	697a      	ldr	r2, [r7, #20]
 8002930:	4313      	orrs	r3, r2
 8002932:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8002934:	897b      	ldrh	r3, [r7, #10]
 8002936:	019b      	lsls	r3, r3, #6
 8002938:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800293c:	697a      	ldr	r2, [r7, #20]
 800293e:	4313      	orrs	r3, r2
 8002940:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	f023 0302 	bic.w	r3, r3, #2
 8002948:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	f043 0301 	orr.w	r3, r3, #1
 8002950:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800295a:	f7ff fcc5 	bl	80022e8 <HAL_GetTick>
 800295e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002960:	e015      	b.n	800298e <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8002962:	f7ff fcc1 	bl	80022e8 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002970:	d309      	bcc.n	8002986 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2201      	movs	r2, #1
 8002976:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e014      	b.n	80029b0 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	691b      	ldr	r3, [r3, #16]
 800298c:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	f003 0301 	and.w	r3, r3, #1
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1e4      	bne.n	8002962 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	b29b      	uxth	r3, r3
 80029a0:	461a      	mov	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2201      	movs	r2, #1
 80029aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3718      	adds	r7, #24
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	460b      	mov	r3, r1
 80029c2:	607a      	str	r2, [r7, #4]
 80029c4:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80029c6:	2300      	movs	r3, #0
 80029c8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80029ca:	2300      	movs	r3, #0
 80029cc:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b42      	cmp	r3, #66	; 0x42
 80029d8:	d101      	bne.n	80029de <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80029da:	2302      	movs	r3, #2
 80029dc:	e04e      	b.n	8002a7c <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2242      	movs	r2, #66	; 0x42
 80029e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	f003 031c 	and.w	r3, r3, #28
 80029f4:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	8a1b      	ldrh	r3, [r3, #16]
 80029fa:	02db      	lsls	r3, r3, #11
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002a04:	897b      	ldrh	r3, [r7, #10]
 8002a06:	019b      	lsls	r3, r3, #6
 8002a08:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002a0c:	697a      	ldr	r2, [r7, #20]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	f043 0302 	orr.w	r3, r3, #2
 8002a18:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	f043 0301 	orr.w	r3, r3, #1
 8002a20:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	b29a      	uxth	r2, r3
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	697a      	ldr	r2, [r7, #20]
 8002a32:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002a34:	f7ff fc58 	bl	80022e8 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002a3a:	e015      	b.n	8002a68 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002a3c:	f7ff fc54 	bl	80022e8 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a4a:	d309      	bcc.n	8002a60 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e00d      	b.n	8002a7c <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1e4      	bne.n	8002a3c <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2201      	movs	r2, #1
 8002a76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3718      	adds	r7, #24
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b0b0      	sub	sp, #192	; 0xc0
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d007      	beq.n	8002aaa <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002aa0:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002aa8:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002aba:	2300      	movs	r3, #0
 8002abc:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	69db      	ldr	r3, [r3, #28]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d103      	bne.n	8002ad2 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002aca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ace:	663b      	str	r3, [r7, #96]	; 0x60
 8002ad0:	e001      	b.n	8002ad6 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002ad6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ada:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002adc:	2300      	movs	r3, #0
 8002ade:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002aec:	2300      	movs	r3, #0
 8002aee:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002af0:	2340      	movs	r3, #64	; 0x40
 8002af2:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002af4:	2300      	movs	r3, #0
 8002af6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002afa:	2300      	movs	r3, #0
 8002afc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002b00:	2300      	movs	r3, #0
 8002b02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002b06:	2300      	movs	r3, #0
 8002b08:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8002b12:	2300      	movs	r3, #0
 8002b14:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002b24:	2380      	movs	r3, #128	; 0x80
 8002b26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002b30:	2300      	movs	r3, #0
 8002b32:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002b36:	2300      	movs	r3, #0
 8002b38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002b42:	2300      	movs	r3, #0
 8002b44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002b58:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002b5c:	4bac      	ldr	r3, [pc, #688]	; (8002e10 <ETH_MACDMAConfig+0x38c>)
 8002b5e:	4013      	ands	r3, r2
 8002b60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002b64:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002b66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002b68:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002b6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002b6c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002b6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002b70:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002b76:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002b78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002b7a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002b7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002b7e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002b84:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002b86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002b88:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002b8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002b8c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002b8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002b90:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002b92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002b94:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002b96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002b98:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002b9a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002bac:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bb8:	2001      	movs	r0, #1
 8002bba:	f7ff fba1 	bl	8002300 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002bc6:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002bc8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002bca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002bcc:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002bce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002bd0:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002bd2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002bd6:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002bd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002bdc:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002bde:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002be2:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002be4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002be8:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002bec:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002bf4:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002bf6:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c02:	2001      	movs	r0, #1
 8002c04:	f7ff fb7c 	bl	8002300 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c10:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002c1a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002c24:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002c30:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c34:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002c38:	4013      	ands	r3, r2
 8002c3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002c3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c42:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002c44:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002c48:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002c4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002c4e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002c50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002c54:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002c56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002c5a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002c5c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002c60:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002c62:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c66:	4313      	orrs	r3, r2
 8002c68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c74:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c80:	2001      	movs	r0, #1
 8002c82:	f7ff fb3d 	bl	8002300 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c8e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002c90:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002c94:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	69db      	ldr	r3, [r3, #28]
 8002ca6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002caa:	2001      	movs	r0, #1
 8002cac:	f7ff fb28 	bl	8002300 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002cb8:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002cbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cc2:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002cc8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ccc:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002cde:	2304      	movs	r3, #4
 8002ce0:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002ce2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002ce8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002cec:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002cee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002cf2:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002cf4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cf8:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002cfa:	2380      	movs	r3, #128	; 0x80
 8002cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002d02:	2300      	movs	r3, #0
 8002d04:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d0e:	3318      	adds	r3, #24
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002d16:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d1a:	4b3e      	ldr	r3, [pc, #248]	; (8002e14 <ETH_MACDMAConfig+0x390>)
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002d22:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002d24:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002d26:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002d28:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002d2a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002d2c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002d2e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002d30:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002d32:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002d34:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002d36:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002d38:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002d3a:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002d3e:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002d42:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002d44:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d56:	3318      	adds	r3, #24
 8002d58:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d5c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d66:	3318      	adds	r3, #24
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d6e:	2001      	movs	r0, #1
 8002d70:	f7ff fac6 	bl	8002300 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d7c:	3318      	adds	r3, #24
 8002d7e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d82:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002d84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002d88:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002d8c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002d90:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002d92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002d94:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002d96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d98:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002d9a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002d9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002d9e:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002da8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dac:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002dbc:	2001      	movs	r0, #1
 8002dbe:	f7ff fa9f 	bl	8002300 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dca:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002dce:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d10f      	bne.n	8002df8 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002de0:	331c      	adds	r3, #28
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002dec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002df0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002df4:	331c      	adds	r3, #28
 8002df6:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	695b      	ldr	r3, [r3, #20]
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	2100      	movs	r1, #0
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 f809 	bl	8002e18 <ETH_MACAddressConfig>
}
 8002e06:	bf00      	nop
 8002e08:	37c0      	adds	r7, #192	; 0xc0
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	ff20810f 	.word	0xff20810f
 8002e14:	f8de3f23 	.word	0xf8de3f23

08002e18 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b087      	sub	sp, #28
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	3305      	adds	r3, #5
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	021b      	lsls	r3, r3, #8
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	3204      	adds	r2, #4
 8002e30:	7812      	ldrb	r2, [r2, #0]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002e36:	68ba      	ldr	r2, [r7, #8]
 8002e38:	4b11      	ldr	r3, [pc, #68]	; (8002e80 <ETH_MACAddressConfig+0x68>)
 8002e3a:	4413      	add	r3, r2
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	3303      	adds	r3, #3
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	061a      	lsls	r2, r3, #24
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	3302      	adds	r3, #2
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	041b      	lsls	r3, r3, #16
 8002e52:	431a      	orrs	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	3301      	adds	r3, #1
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	021b      	lsls	r3, r3, #8
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	7812      	ldrb	r2, [r2, #0]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002e66:	68ba      	ldr	r2, [r7, #8]
 8002e68:	4b06      	ldr	r3, [pc, #24]	; (8002e84 <ETH_MACAddressConfig+0x6c>)
 8002e6a:	4413      	add	r3, r2
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	6013      	str	r3, [r2, #0]
}
 8002e72:	bf00      	nop
 8002e74:	371c      	adds	r7, #28
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	40028040 	.word	0x40028040
 8002e84:	40028044 	.word	0x40028044

08002e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b089      	sub	sp, #36	; 0x24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e92:	2300      	movs	r3, #0
 8002e94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e96:	2300      	movs	r3, #0
 8002e98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	61fb      	str	r3, [r7, #28]
 8002ea2:	e177      	b.n	8003194 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002eb8:	693a      	ldr	r2, [r7, #16]
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	f040 8166 	bne.w	800318e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d00b      	beq.n	8002ee2 <HAL_GPIO_Init+0x5a>
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d007      	beq.n	8002ee2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ed6:	2b11      	cmp	r3, #17
 8002ed8:	d003      	beq.n	8002ee2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	2b12      	cmp	r3, #18
 8002ee0:	d130      	bne.n	8002f44 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	2203      	movs	r2, #3
 8002eee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef2:	43db      	mvns	r3, r3
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	68da      	ldr	r2, [r3, #12]
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	fa02 f303 	lsl.w	r3, r2, r3
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f18:	2201      	movs	r2, #1
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	43db      	mvns	r3, r3
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	4013      	ands	r3, r2
 8002f26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	091b      	lsrs	r3, r3, #4
 8002f2e:	f003 0201 	and.w	r2, r3, #1
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	fa02 f303 	lsl.w	r3, r2, r3
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	2203      	movs	r2, #3
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	43db      	mvns	r3, r3
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	005b      	lsls	r3, r3, #1
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d003      	beq.n	8002f84 <HAL_GPIO_Init+0xfc>
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	2b12      	cmp	r3, #18
 8002f82:	d123      	bne.n	8002fcc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	08da      	lsrs	r2, r3, #3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	3208      	adds	r2, #8
 8002f8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	f003 0307 	and.w	r3, r3, #7
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	220f      	movs	r2, #15
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	43db      	mvns	r3, r3
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	691a      	ldr	r2, [r3, #16]
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	f003 0307 	and.w	r3, r3, #7
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	08da      	lsrs	r2, r3, #3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	3208      	adds	r2, #8
 8002fc6:	69b9      	ldr	r1, [r7, #24]
 8002fc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	2203      	movs	r2, #3
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f003 0203 	and.w	r2, r3, #3
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003008:	2b00      	cmp	r3, #0
 800300a:	f000 80c0 	beq.w	800318e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800300e:	2300      	movs	r3, #0
 8003010:	60fb      	str	r3, [r7, #12]
 8003012:	4b65      	ldr	r3, [pc, #404]	; (80031a8 <HAL_GPIO_Init+0x320>)
 8003014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003016:	4a64      	ldr	r2, [pc, #400]	; (80031a8 <HAL_GPIO_Init+0x320>)
 8003018:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800301c:	6453      	str	r3, [r2, #68]	; 0x44
 800301e:	4b62      	ldr	r3, [pc, #392]	; (80031a8 <HAL_GPIO_Init+0x320>)
 8003020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003022:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003026:	60fb      	str	r3, [r7, #12]
 8003028:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800302a:	4a60      	ldr	r2, [pc, #384]	; (80031ac <HAL_GPIO_Init+0x324>)
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	089b      	lsrs	r3, r3, #2
 8003030:	3302      	adds	r3, #2
 8003032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003036:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	f003 0303 	and.w	r3, r3, #3
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	220f      	movs	r2, #15
 8003042:	fa02 f303 	lsl.w	r3, r2, r3
 8003046:	43db      	mvns	r3, r3
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	4013      	ands	r3, r2
 800304c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a57      	ldr	r2, [pc, #348]	; (80031b0 <HAL_GPIO_Init+0x328>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d037      	beq.n	80030c6 <HAL_GPIO_Init+0x23e>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a56      	ldr	r2, [pc, #344]	; (80031b4 <HAL_GPIO_Init+0x32c>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d031      	beq.n	80030c2 <HAL_GPIO_Init+0x23a>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a55      	ldr	r2, [pc, #340]	; (80031b8 <HAL_GPIO_Init+0x330>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d02b      	beq.n	80030be <HAL_GPIO_Init+0x236>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a54      	ldr	r2, [pc, #336]	; (80031bc <HAL_GPIO_Init+0x334>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d025      	beq.n	80030ba <HAL_GPIO_Init+0x232>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a53      	ldr	r2, [pc, #332]	; (80031c0 <HAL_GPIO_Init+0x338>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d01f      	beq.n	80030b6 <HAL_GPIO_Init+0x22e>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a52      	ldr	r2, [pc, #328]	; (80031c4 <HAL_GPIO_Init+0x33c>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d019      	beq.n	80030b2 <HAL_GPIO_Init+0x22a>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a51      	ldr	r2, [pc, #324]	; (80031c8 <HAL_GPIO_Init+0x340>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d013      	beq.n	80030ae <HAL_GPIO_Init+0x226>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a50      	ldr	r2, [pc, #320]	; (80031cc <HAL_GPIO_Init+0x344>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d00d      	beq.n	80030aa <HAL_GPIO_Init+0x222>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a4f      	ldr	r2, [pc, #316]	; (80031d0 <HAL_GPIO_Init+0x348>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d007      	beq.n	80030a6 <HAL_GPIO_Init+0x21e>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a4e      	ldr	r2, [pc, #312]	; (80031d4 <HAL_GPIO_Init+0x34c>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d101      	bne.n	80030a2 <HAL_GPIO_Init+0x21a>
 800309e:	2309      	movs	r3, #9
 80030a0:	e012      	b.n	80030c8 <HAL_GPIO_Init+0x240>
 80030a2:	230a      	movs	r3, #10
 80030a4:	e010      	b.n	80030c8 <HAL_GPIO_Init+0x240>
 80030a6:	2308      	movs	r3, #8
 80030a8:	e00e      	b.n	80030c8 <HAL_GPIO_Init+0x240>
 80030aa:	2307      	movs	r3, #7
 80030ac:	e00c      	b.n	80030c8 <HAL_GPIO_Init+0x240>
 80030ae:	2306      	movs	r3, #6
 80030b0:	e00a      	b.n	80030c8 <HAL_GPIO_Init+0x240>
 80030b2:	2305      	movs	r3, #5
 80030b4:	e008      	b.n	80030c8 <HAL_GPIO_Init+0x240>
 80030b6:	2304      	movs	r3, #4
 80030b8:	e006      	b.n	80030c8 <HAL_GPIO_Init+0x240>
 80030ba:	2303      	movs	r3, #3
 80030bc:	e004      	b.n	80030c8 <HAL_GPIO_Init+0x240>
 80030be:	2302      	movs	r3, #2
 80030c0:	e002      	b.n	80030c8 <HAL_GPIO_Init+0x240>
 80030c2:	2301      	movs	r3, #1
 80030c4:	e000      	b.n	80030c8 <HAL_GPIO_Init+0x240>
 80030c6:	2300      	movs	r3, #0
 80030c8:	69fa      	ldr	r2, [r7, #28]
 80030ca:	f002 0203 	and.w	r2, r2, #3
 80030ce:	0092      	lsls	r2, r2, #2
 80030d0:	4093      	lsls	r3, r2
 80030d2:	69ba      	ldr	r2, [r7, #24]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030d8:	4934      	ldr	r1, [pc, #208]	; (80031ac <HAL_GPIO_Init+0x324>)
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	089b      	lsrs	r3, r3, #2
 80030de:	3302      	adds	r3, #2
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030e6:	4b3c      	ldr	r3, [pc, #240]	; (80031d8 <HAL_GPIO_Init+0x350>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	43db      	mvns	r3, r3
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	4013      	ands	r3, r2
 80030f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d003      	beq.n	800310a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003102:	69ba      	ldr	r2, [r7, #24]
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	4313      	orrs	r3, r2
 8003108:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800310a:	4a33      	ldr	r2, [pc, #204]	; (80031d8 <HAL_GPIO_Init+0x350>)
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003110:	4b31      	ldr	r3, [pc, #196]	; (80031d8 <HAL_GPIO_Init+0x350>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	43db      	mvns	r3, r3
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	4013      	ands	r3, r2
 800311e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d003      	beq.n	8003134 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	4313      	orrs	r3, r2
 8003132:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003134:	4a28      	ldr	r2, [pc, #160]	; (80031d8 <HAL_GPIO_Init+0x350>)
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800313a:	4b27      	ldr	r3, [pc, #156]	; (80031d8 <HAL_GPIO_Init+0x350>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	43db      	mvns	r3, r3
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	4013      	ands	r3, r2
 8003148:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d003      	beq.n	800315e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	4313      	orrs	r3, r2
 800315c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800315e:	4a1e      	ldr	r2, [pc, #120]	; (80031d8 <HAL_GPIO_Init+0x350>)
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003164:	4b1c      	ldr	r3, [pc, #112]	; (80031d8 <HAL_GPIO_Init+0x350>)
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	43db      	mvns	r3, r3
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	4013      	ands	r3, r2
 8003172:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d003      	beq.n	8003188 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	4313      	orrs	r3, r2
 8003186:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003188:	4a13      	ldr	r2, [pc, #76]	; (80031d8 <HAL_GPIO_Init+0x350>)
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	3301      	adds	r3, #1
 8003192:	61fb      	str	r3, [r7, #28]
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	2b0f      	cmp	r3, #15
 8003198:	f67f ae84 	bls.w	8002ea4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800319c:	bf00      	nop
 800319e:	3724      	adds	r7, #36	; 0x24
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr
 80031a8:	40023800 	.word	0x40023800
 80031ac:	40013800 	.word	0x40013800
 80031b0:	40020000 	.word	0x40020000
 80031b4:	40020400 	.word	0x40020400
 80031b8:	40020800 	.word	0x40020800
 80031bc:	40020c00 	.word	0x40020c00
 80031c0:	40021000 	.word	0x40021000
 80031c4:	40021400 	.word	0x40021400
 80031c8:	40021800 	.word	0x40021800
 80031cc:	40021c00 	.word	0x40021c00
 80031d0:	40022000 	.word	0x40022000
 80031d4:	40022400 	.word	0x40022400
 80031d8:	40013c00 	.word	0x40013c00

080031dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	460b      	mov	r3, r1
 80031e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	691a      	ldr	r2, [r3, #16]
 80031ec:	887b      	ldrh	r3, [r7, #2]
 80031ee:	4013      	ands	r3, r2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d002      	beq.n	80031fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80031f4:	2301      	movs	r3, #1
 80031f6:	73fb      	strb	r3, [r7, #15]
 80031f8:	e001      	b.n	80031fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031fa:	2300      	movs	r3, #0
 80031fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80031fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003200:	4618      	mov	r0, r3
 8003202:	3714      	adds	r7, #20
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	460b      	mov	r3, r1
 8003216:	807b      	strh	r3, [r7, #2]
 8003218:	4613      	mov	r3, r2
 800321a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800321c:	787b      	ldrb	r3, [r7, #1]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d003      	beq.n	800322a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003222:	887a      	ldrh	r2, [r7, #2]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003228:	e003      	b.n	8003232 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800322a:	887b      	ldrh	r3, [r7, #2]
 800322c:	041a      	lsls	r2, r3, #16
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	619a      	str	r2, [r3, #24]
}
 8003232:	bf00      	nop
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr

0800323e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800323e:	b480      	push	{r7}
 8003240:	b083      	sub	sp, #12
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
 8003246:	460b      	mov	r3, r1
 8003248:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	695a      	ldr	r2, [r3, #20]
 800324e:	887b      	ldrh	r3, [r7, #2]
 8003250:	401a      	ands	r2, r3
 8003252:	887b      	ldrh	r3, [r7, #2]
 8003254:	429a      	cmp	r2, r3
 8003256:	d104      	bne.n	8003262 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003258:	887b      	ldrh	r3, [r7, #2]
 800325a:	041a      	lsls	r2, r3, #16
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003260:	e002      	b.n	8003268 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003262:	887a      	ldrh	r2, [r7, #2]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	619a      	str	r2, [r3, #24]
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003276:	b08f      	sub	sp, #60	; 0x3c
 8003278:	af0a      	add	r7, sp, #40	; 0x28
 800327a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e10f      	b.n	80034a6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003292:	b2db      	uxtb	r3, r3
 8003294:	2b00      	cmp	r3, #0
 8003296:	d106      	bne.n	80032a6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f7fe ff37 	bl	8002114 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2203      	movs	r2, #3
 80032aa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d102      	bne.n	80032c0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f002 f912 	bl	80054ee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	603b      	str	r3, [r7, #0]
 80032d0:	687e      	ldr	r6, [r7, #4]
 80032d2:	466d      	mov	r5, sp
 80032d4:	f106 0410 	add.w	r4, r6, #16
 80032d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80032e4:	e885 0003 	stmia.w	r5, {r0, r1}
 80032e8:	1d33      	adds	r3, r6, #4
 80032ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032ec:	6838      	ldr	r0, [r7, #0]
 80032ee:	f002 f89d 	bl	800542c <USB_CoreInit>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d005      	beq.n	8003304 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2202      	movs	r2, #2
 80032fc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e0d0      	b.n	80034a6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2100      	movs	r1, #0
 800330a:	4618      	mov	r0, r3
 800330c:	f002 f900 	bl	8005510 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003310:	2300      	movs	r3, #0
 8003312:	73fb      	strb	r3, [r7, #15]
 8003314:	e04a      	b.n	80033ac <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003316:	7bfa      	ldrb	r2, [r7, #15]
 8003318:	6879      	ldr	r1, [r7, #4]
 800331a:	4613      	mov	r3, r2
 800331c:	00db      	lsls	r3, r3, #3
 800331e:	1a9b      	subs	r3, r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	440b      	add	r3, r1
 8003324:	333d      	adds	r3, #61	; 0x3d
 8003326:	2201      	movs	r2, #1
 8003328:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800332a:	7bfa      	ldrb	r2, [r7, #15]
 800332c:	6879      	ldr	r1, [r7, #4]
 800332e:	4613      	mov	r3, r2
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	1a9b      	subs	r3, r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	440b      	add	r3, r1
 8003338:	333c      	adds	r3, #60	; 0x3c
 800333a:	7bfa      	ldrb	r2, [r7, #15]
 800333c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800333e:	7bfa      	ldrb	r2, [r7, #15]
 8003340:	7bfb      	ldrb	r3, [r7, #15]
 8003342:	b298      	uxth	r0, r3
 8003344:	6879      	ldr	r1, [r7, #4]
 8003346:	4613      	mov	r3, r2
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	1a9b      	subs	r3, r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	440b      	add	r3, r1
 8003350:	3342      	adds	r3, #66	; 0x42
 8003352:	4602      	mov	r2, r0
 8003354:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003356:	7bfa      	ldrb	r2, [r7, #15]
 8003358:	6879      	ldr	r1, [r7, #4]
 800335a:	4613      	mov	r3, r2
 800335c:	00db      	lsls	r3, r3, #3
 800335e:	1a9b      	subs	r3, r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	440b      	add	r3, r1
 8003364:	333f      	adds	r3, #63	; 0x3f
 8003366:	2200      	movs	r2, #0
 8003368:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800336a:	7bfa      	ldrb	r2, [r7, #15]
 800336c:	6879      	ldr	r1, [r7, #4]
 800336e:	4613      	mov	r3, r2
 8003370:	00db      	lsls	r3, r3, #3
 8003372:	1a9b      	subs	r3, r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	440b      	add	r3, r1
 8003378:	3344      	adds	r3, #68	; 0x44
 800337a:	2200      	movs	r2, #0
 800337c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800337e:	7bfa      	ldrb	r2, [r7, #15]
 8003380:	6879      	ldr	r1, [r7, #4]
 8003382:	4613      	mov	r3, r2
 8003384:	00db      	lsls	r3, r3, #3
 8003386:	1a9b      	subs	r3, r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	440b      	add	r3, r1
 800338c:	3348      	adds	r3, #72	; 0x48
 800338e:	2200      	movs	r2, #0
 8003390:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003392:	7bfa      	ldrb	r2, [r7, #15]
 8003394:	6879      	ldr	r1, [r7, #4]
 8003396:	4613      	mov	r3, r2
 8003398:	00db      	lsls	r3, r3, #3
 800339a:	1a9b      	subs	r3, r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	440b      	add	r3, r1
 80033a0:	3350      	adds	r3, #80	; 0x50
 80033a2:	2200      	movs	r2, #0
 80033a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033a6:	7bfb      	ldrb	r3, [r7, #15]
 80033a8:	3301      	adds	r3, #1
 80033aa:	73fb      	strb	r3, [r7, #15]
 80033ac:	7bfa      	ldrb	r2, [r7, #15]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d3af      	bcc.n	8003316 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033b6:	2300      	movs	r3, #0
 80033b8:	73fb      	strb	r3, [r7, #15]
 80033ba:	e044      	b.n	8003446 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80033bc:	7bfa      	ldrb	r2, [r7, #15]
 80033be:	6879      	ldr	r1, [r7, #4]
 80033c0:	4613      	mov	r3, r2
 80033c2:	00db      	lsls	r3, r3, #3
 80033c4:	1a9b      	subs	r3, r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	440b      	add	r3, r1
 80033ca:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80033ce:	2200      	movs	r2, #0
 80033d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80033d2:	7bfa      	ldrb	r2, [r7, #15]
 80033d4:	6879      	ldr	r1, [r7, #4]
 80033d6:	4613      	mov	r3, r2
 80033d8:	00db      	lsls	r3, r3, #3
 80033da:	1a9b      	subs	r3, r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	440b      	add	r3, r1
 80033e0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80033e4:	7bfa      	ldrb	r2, [r7, #15]
 80033e6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80033e8:	7bfa      	ldrb	r2, [r7, #15]
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	4613      	mov	r3, r2
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	1a9b      	subs	r3, r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	440b      	add	r3, r1
 80033f6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80033fa:	2200      	movs	r2, #0
 80033fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80033fe:	7bfa      	ldrb	r2, [r7, #15]
 8003400:	6879      	ldr	r1, [r7, #4]
 8003402:	4613      	mov	r3, r2
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	1a9b      	subs	r3, r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	440b      	add	r3, r1
 800340c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003410:	2200      	movs	r2, #0
 8003412:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003414:	7bfa      	ldrb	r2, [r7, #15]
 8003416:	6879      	ldr	r1, [r7, #4]
 8003418:	4613      	mov	r3, r2
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	1a9b      	subs	r3, r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	440b      	add	r3, r1
 8003422:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003426:	2200      	movs	r2, #0
 8003428:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800342a:	7bfa      	ldrb	r2, [r7, #15]
 800342c:	6879      	ldr	r1, [r7, #4]
 800342e:	4613      	mov	r3, r2
 8003430:	00db      	lsls	r3, r3, #3
 8003432:	1a9b      	subs	r3, r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	440b      	add	r3, r1
 8003438:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800343c:	2200      	movs	r2, #0
 800343e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003440:	7bfb      	ldrb	r3, [r7, #15]
 8003442:	3301      	adds	r3, #1
 8003444:	73fb      	strb	r3, [r7, #15]
 8003446:	7bfa      	ldrb	r2, [r7, #15]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	429a      	cmp	r2, r3
 800344e:	d3b5      	bcc.n	80033bc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	603b      	str	r3, [r7, #0]
 8003456:	687e      	ldr	r6, [r7, #4]
 8003458:	466d      	mov	r5, sp
 800345a:	f106 0410 	add.w	r4, r6, #16
 800345e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003460:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003462:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003464:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003466:	e894 0003 	ldmia.w	r4, {r0, r1}
 800346a:	e885 0003 	stmia.w	r5, {r0, r1}
 800346e:	1d33      	adds	r3, r6, #4
 8003470:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003472:	6838      	ldr	r0, [r7, #0]
 8003474:	f002 f876 	bl	8005564 <USB_DevInit>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d005      	beq.n	800348a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2202      	movs	r2, #2
 8003482:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e00d      	b.n	80034a6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4618      	mov	r0, r3
 80034a0:	f002 fa33 	bl	800590a <USB_DevDisconnect>

  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3714      	adds	r7, #20
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080034b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e25b      	b.n	800397a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d075      	beq.n	80035ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034ce:	4ba3      	ldr	r3, [pc, #652]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f003 030c 	and.w	r3, r3, #12
 80034d6:	2b04      	cmp	r3, #4
 80034d8:	d00c      	beq.n	80034f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034da:	4ba0      	ldr	r3, [pc, #640]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034e2:	2b08      	cmp	r3, #8
 80034e4:	d112      	bne.n	800350c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034e6:	4b9d      	ldr	r3, [pc, #628]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034f2:	d10b      	bne.n	800350c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034f4:	4b99      	ldr	r3, [pc, #612]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d05b      	beq.n	80035b8 <HAL_RCC_OscConfig+0x108>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d157      	bne.n	80035b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e236      	b.n	800397a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003514:	d106      	bne.n	8003524 <HAL_RCC_OscConfig+0x74>
 8003516:	4b91      	ldr	r3, [pc, #580]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a90      	ldr	r2, [pc, #576]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 800351c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003520:	6013      	str	r3, [r2, #0]
 8003522:	e01d      	b.n	8003560 <HAL_RCC_OscConfig+0xb0>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800352c:	d10c      	bne.n	8003548 <HAL_RCC_OscConfig+0x98>
 800352e:	4b8b      	ldr	r3, [pc, #556]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a8a      	ldr	r2, [pc, #552]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 8003534:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003538:	6013      	str	r3, [r2, #0]
 800353a:	4b88      	ldr	r3, [pc, #544]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a87      	ldr	r2, [pc, #540]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 8003540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003544:	6013      	str	r3, [r2, #0]
 8003546:	e00b      	b.n	8003560 <HAL_RCC_OscConfig+0xb0>
 8003548:	4b84      	ldr	r3, [pc, #528]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a83      	ldr	r2, [pc, #524]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 800354e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003552:	6013      	str	r3, [r2, #0]
 8003554:	4b81      	ldr	r3, [pc, #516]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a80      	ldr	r2, [pc, #512]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 800355a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800355e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d013      	beq.n	8003590 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003568:	f7fe febe 	bl	80022e8 <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800356e:	e008      	b.n	8003582 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003570:	f7fe feba 	bl	80022e8 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b64      	cmp	r3, #100	; 0x64
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e1fb      	b.n	800397a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003582:	4b76      	ldr	r3, [pc, #472]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d0f0      	beq.n	8003570 <HAL_RCC_OscConfig+0xc0>
 800358e:	e014      	b.n	80035ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003590:	f7fe feaa 	bl	80022e8 <HAL_GetTick>
 8003594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003596:	e008      	b.n	80035aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003598:	f7fe fea6 	bl	80022e8 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b64      	cmp	r3, #100	; 0x64
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e1e7      	b.n	800397a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035aa:	4b6c      	ldr	r3, [pc, #432]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1f0      	bne.n	8003598 <HAL_RCC_OscConfig+0xe8>
 80035b6:	e000      	b.n	80035ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d063      	beq.n	800368e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035c6:	4b65      	ldr	r3, [pc, #404]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f003 030c 	and.w	r3, r3, #12
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00b      	beq.n	80035ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035d2:	4b62      	ldr	r3, [pc, #392]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035da:	2b08      	cmp	r3, #8
 80035dc:	d11c      	bne.n	8003618 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035de:	4b5f      	ldr	r3, [pc, #380]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d116      	bne.n	8003618 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ea:	4b5c      	ldr	r3, [pc, #368]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d005      	beq.n	8003602 <HAL_RCC_OscConfig+0x152>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d001      	beq.n	8003602 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e1bb      	b.n	800397a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003602:	4b56      	ldr	r3, [pc, #344]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	4952      	ldr	r1, [pc, #328]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 8003612:	4313      	orrs	r3, r2
 8003614:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003616:	e03a      	b.n	800368e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d020      	beq.n	8003662 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003620:	4b4f      	ldr	r3, [pc, #316]	; (8003760 <HAL_RCC_OscConfig+0x2b0>)
 8003622:	2201      	movs	r2, #1
 8003624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003626:	f7fe fe5f 	bl	80022e8 <HAL_GetTick>
 800362a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800362c:	e008      	b.n	8003640 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800362e:	f7fe fe5b 	bl	80022e8 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b02      	cmp	r3, #2
 800363a:	d901      	bls.n	8003640 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e19c      	b.n	800397a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003640:	4b46      	ldr	r3, [pc, #280]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d0f0      	beq.n	800362e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800364c:	4b43      	ldr	r3, [pc, #268]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	00db      	lsls	r3, r3, #3
 800365a:	4940      	ldr	r1, [pc, #256]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 800365c:	4313      	orrs	r3, r2
 800365e:	600b      	str	r3, [r1, #0]
 8003660:	e015      	b.n	800368e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003662:	4b3f      	ldr	r3, [pc, #252]	; (8003760 <HAL_RCC_OscConfig+0x2b0>)
 8003664:	2200      	movs	r2, #0
 8003666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003668:	f7fe fe3e 	bl	80022e8 <HAL_GetTick>
 800366c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800366e:	e008      	b.n	8003682 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003670:	f7fe fe3a 	bl	80022e8 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e17b      	b.n	800397a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003682:	4b36      	ldr	r3, [pc, #216]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1f0      	bne.n	8003670 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0308 	and.w	r3, r3, #8
 8003696:	2b00      	cmp	r3, #0
 8003698:	d030      	beq.n	80036fc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d016      	beq.n	80036d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036a2:	4b30      	ldr	r3, [pc, #192]	; (8003764 <HAL_RCC_OscConfig+0x2b4>)
 80036a4:	2201      	movs	r2, #1
 80036a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a8:	f7fe fe1e 	bl	80022e8 <HAL_GetTick>
 80036ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ae:	e008      	b.n	80036c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036b0:	f7fe fe1a 	bl	80022e8 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e15b      	b.n	800397a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036c2:	4b26      	ldr	r3, [pc, #152]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 80036c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d0f0      	beq.n	80036b0 <HAL_RCC_OscConfig+0x200>
 80036ce:	e015      	b.n	80036fc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036d0:	4b24      	ldr	r3, [pc, #144]	; (8003764 <HAL_RCC_OscConfig+0x2b4>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036d6:	f7fe fe07 	bl	80022e8 <HAL_GetTick>
 80036da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036dc:	e008      	b.n	80036f0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036de:	f7fe fe03 	bl	80022e8 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d901      	bls.n	80036f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e144      	b.n	800397a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036f0:	4b1a      	ldr	r3, [pc, #104]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 80036f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1f0      	bne.n	80036de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0304 	and.w	r3, r3, #4
 8003704:	2b00      	cmp	r3, #0
 8003706:	f000 80a0 	beq.w	800384a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800370a:	2300      	movs	r3, #0
 800370c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800370e:	4b13      	ldr	r3, [pc, #76]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 8003710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d10f      	bne.n	800373a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800371a:	2300      	movs	r3, #0
 800371c:	60bb      	str	r3, [r7, #8]
 800371e:	4b0f      	ldr	r3, [pc, #60]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	4a0e      	ldr	r2, [pc, #56]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 8003724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003728:	6413      	str	r3, [r2, #64]	; 0x40
 800372a:	4b0c      	ldr	r3, [pc, #48]	; (800375c <HAL_RCC_OscConfig+0x2ac>)
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003732:	60bb      	str	r3, [r7, #8]
 8003734:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003736:	2301      	movs	r3, #1
 8003738:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800373a:	4b0b      	ldr	r3, [pc, #44]	; (8003768 <HAL_RCC_OscConfig+0x2b8>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003742:	2b00      	cmp	r3, #0
 8003744:	d121      	bne.n	800378a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003746:	4b08      	ldr	r3, [pc, #32]	; (8003768 <HAL_RCC_OscConfig+0x2b8>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a07      	ldr	r2, [pc, #28]	; (8003768 <HAL_RCC_OscConfig+0x2b8>)
 800374c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003750:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003752:	f7fe fdc9 	bl	80022e8 <HAL_GetTick>
 8003756:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003758:	e011      	b.n	800377e <HAL_RCC_OscConfig+0x2ce>
 800375a:	bf00      	nop
 800375c:	40023800 	.word	0x40023800
 8003760:	42470000 	.word	0x42470000
 8003764:	42470e80 	.word	0x42470e80
 8003768:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800376c:	f7fe fdbc 	bl	80022e8 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e0fd      	b.n	800397a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800377e:	4b81      	ldr	r3, [pc, #516]	; (8003984 <HAL_RCC_OscConfig+0x4d4>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003786:	2b00      	cmp	r3, #0
 8003788:	d0f0      	beq.n	800376c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d106      	bne.n	80037a0 <HAL_RCC_OscConfig+0x2f0>
 8003792:	4b7d      	ldr	r3, [pc, #500]	; (8003988 <HAL_RCC_OscConfig+0x4d8>)
 8003794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003796:	4a7c      	ldr	r2, [pc, #496]	; (8003988 <HAL_RCC_OscConfig+0x4d8>)
 8003798:	f043 0301 	orr.w	r3, r3, #1
 800379c:	6713      	str	r3, [r2, #112]	; 0x70
 800379e:	e01c      	b.n	80037da <HAL_RCC_OscConfig+0x32a>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	2b05      	cmp	r3, #5
 80037a6:	d10c      	bne.n	80037c2 <HAL_RCC_OscConfig+0x312>
 80037a8:	4b77      	ldr	r3, [pc, #476]	; (8003988 <HAL_RCC_OscConfig+0x4d8>)
 80037aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ac:	4a76      	ldr	r2, [pc, #472]	; (8003988 <HAL_RCC_OscConfig+0x4d8>)
 80037ae:	f043 0304 	orr.w	r3, r3, #4
 80037b2:	6713      	str	r3, [r2, #112]	; 0x70
 80037b4:	4b74      	ldr	r3, [pc, #464]	; (8003988 <HAL_RCC_OscConfig+0x4d8>)
 80037b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b8:	4a73      	ldr	r2, [pc, #460]	; (8003988 <HAL_RCC_OscConfig+0x4d8>)
 80037ba:	f043 0301 	orr.w	r3, r3, #1
 80037be:	6713      	str	r3, [r2, #112]	; 0x70
 80037c0:	e00b      	b.n	80037da <HAL_RCC_OscConfig+0x32a>
 80037c2:	4b71      	ldr	r3, [pc, #452]	; (8003988 <HAL_RCC_OscConfig+0x4d8>)
 80037c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c6:	4a70      	ldr	r2, [pc, #448]	; (8003988 <HAL_RCC_OscConfig+0x4d8>)
 80037c8:	f023 0301 	bic.w	r3, r3, #1
 80037cc:	6713      	str	r3, [r2, #112]	; 0x70
 80037ce:	4b6e      	ldr	r3, [pc, #440]	; (8003988 <HAL_RCC_OscConfig+0x4d8>)
 80037d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d2:	4a6d      	ldr	r2, [pc, #436]	; (8003988 <HAL_RCC_OscConfig+0x4d8>)
 80037d4:	f023 0304 	bic.w	r3, r3, #4
 80037d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d015      	beq.n	800380e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037e2:	f7fe fd81 	bl	80022e8 <HAL_GetTick>
 80037e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037e8:	e00a      	b.n	8003800 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037ea:	f7fe fd7d 	bl	80022e8 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d901      	bls.n	8003800 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e0bc      	b.n	800397a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003800:	4b61      	ldr	r3, [pc, #388]	; (8003988 <HAL_RCC_OscConfig+0x4d8>)
 8003802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003804:	f003 0302 	and.w	r3, r3, #2
 8003808:	2b00      	cmp	r3, #0
 800380a:	d0ee      	beq.n	80037ea <HAL_RCC_OscConfig+0x33a>
 800380c:	e014      	b.n	8003838 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800380e:	f7fe fd6b 	bl	80022e8 <HAL_GetTick>
 8003812:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003814:	e00a      	b.n	800382c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003816:	f7fe fd67 	bl	80022e8 <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	f241 3288 	movw	r2, #5000	; 0x1388
 8003824:	4293      	cmp	r3, r2
 8003826:	d901      	bls.n	800382c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e0a6      	b.n	800397a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800382c:	4b56      	ldr	r3, [pc, #344]	; (8003988 <HAL_RCC_OscConfig+0x4d8>)
 800382e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d1ee      	bne.n	8003816 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003838:	7dfb      	ldrb	r3, [r7, #23]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d105      	bne.n	800384a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800383e:	4b52      	ldr	r3, [pc, #328]	; (8003988 <HAL_RCC_OscConfig+0x4d8>)
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	4a51      	ldr	r2, [pc, #324]	; (8003988 <HAL_RCC_OscConfig+0x4d8>)
 8003844:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003848:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	2b00      	cmp	r3, #0
 8003850:	f000 8092 	beq.w	8003978 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003854:	4b4c      	ldr	r3, [pc, #304]	; (8003988 <HAL_RCC_OscConfig+0x4d8>)
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f003 030c 	and.w	r3, r3, #12
 800385c:	2b08      	cmp	r3, #8
 800385e:	d05c      	beq.n	800391a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	2b02      	cmp	r3, #2
 8003866:	d141      	bne.n	80038ec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003868:	4b48      	ldr	r3, [pc, #288]	; (800398c <HAL_RCC_OscConfig+0x4dc>)
 800386a:	2200      	movs	r2, #0
 800386c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800386e:	f7fe fd3b 	bl	80022e8 <HAL_GetTick>
 8003872:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003874:	e008      	b.n	8003888 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003876:	f7fe fd37 	bl	80022e8 <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	2b02      	cmp	r3, #2
 8003882:	d901      	bls.n	8003888 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e078      	b.n	800397a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003888:	4b3f      	ldr	r3, [pc, #252]	; (8003988 <HAL_RCC_OscConfig+0x4d8>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1f0      	bne.n	8003876 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	69da      	ldr	r2, [r3, #28]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a1b      	ldr	r3, [r3, #32]
 800389c:	431a      	orrs	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a2:	019b      	lsls	r3, r3, #6
 80038a4:	431a      	orrs	r2, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038aa:	085b      	lsrs	r3, r3, #1
 80038ac:	3b01      	subs	r3, #1
 80038ae:	041b      	lsls	r3, r3, #16
 80038b0:	431a      	orrs	r2, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b6:	061b      	lsls	r3, r3, #24
 80038b8:	4933      	ldr	r1, [pc, #204]	; (8003988 <HAL_RCC_OscConfig+0x4d8>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038be:	4b33      	ldr	r3, [pc, #204]	; (800398c <HAL_RCC_OscConfig+0x4dc>)
 80038c0:	2201      	movs	r2, #1
 80038c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c4:	f7fe fd10 	bl	80022e8 <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ca:	e008      	b.n	80038de <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038cc:	f7fe fd0c 	bl	80022e8 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e04d      	b.n	800397a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038de:	4b2a      	ldr	r3, [pc, #168]	; (8003988 <HAL_RCC_OscConfig+0x4d8>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d0f0      	beq.n	80038cc <HAL_RCC_OscConfig+0x41c>
 80038ea:	e045      	b.n	8003978 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ec:	4b27      	ldr	r3, [pc, #156]	; (800398c <HAL_RCC_OscConfig+0x4dc>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f2:	f7fe fcf9 	bl	80022e8 <HAL_GetTick>
 80038f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038f8:	e008      	b.n	800390c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038fa:	f7fe fcf5 	bl	80022e8 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b02      	cmp	r3, #2
 8003906:	d901      	bls.n	800390c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e036      	b.n	800397a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800390c:	4b1e      	ldr	r3, [pc, #120]	; (8003988 <HAL_RCC_OscConfig+0x4d8>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1f0      	bne.n	80038fa <HAL_RCC_OscConfig+0x44a>
 8003918:	e02e      	b.n	8003978 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d101      	bne.n	8003926 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e029      	b.n	800397a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003926:	4b18      	ldr	r3, [pc, #96]	; (8003988 <HAL_RCC_OscConfig+0x4d8>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	69db      	ldr	r3, [r3, #28]
 8003936:	429a      	cmp	r2, r3
 8003938:	d11c      	bne.n	8003974 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003944:	429a      	cmp	r2, r3
 8003946:	d115      	bne.n	8003974 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800394e:	4013      	ands	r3, r2
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003954:	4293      	cmp	r3, r2
 8003956:	d10d      	bne.n	8003974 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003962:	429a      	cmp	r2, r3
 8003964:	d106      	bne.n	8003974 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003970:	429a      	cmp	r2, r3
 8003972:	d001      	beq.n	8003978 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e000      	b.n	800397a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3718      	adds	r7, #24
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	40007000 	.word	0x40007000
 8003988:	40023800 	.word	0x40023800
 800398c:	42470060 	.word	0x42470060

08003990 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d101      	bne.n	80039a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e0cc      	b.n	8003b3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039a4:	4b68      	ldr	r3, [pc, #416]	; (8003b48 <HAL_RCC_ClockConfig+0x1b8>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 030f 	and.w	r3, r3, #15
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d90c      	bls.n	80039cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039b2:	4b65      	ldr	r3, [pc, #404]	; (8003b48 <HAL_RCC_ClockConfig+0x1b8>)
 80039b4:	683a      	ldr	r2, [r7, #0]
 80039b6:	b2d2      	uxtb	r2, r2
 80039b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ba:	4b63      	ldr	r3, [pc, #396]	; (8003b48 <HAL_RCC_ClockConfig+0x1b8>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 030f 	and.w	r3, r3, #15
 80039c2:	683a      	ldr	r2, [r7, #0]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d001      	beq.n	80039cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e0b8      	b.n	8003b3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d020      	beq.n	8003a1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0304 	and.w	r3, r3, #4
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d005      	beq.n	80039f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039e4:	4b59      	ldr	r3, [pc, #356]	; (8003b4c <HAL_RCC_ClockConfig+0x1bc>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	4a58      	ldr	r2, [pc, #352]	; (8003b4c <HAL_RCC_ClockConfig+0x1bc>)
 80039ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0308 	and.w	r3, r3, #8
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d005      	beq.n	8003a08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039fc:	4b53      	ldr	r3, [pc, #332]	; (8003b4c <HAL_RCC_ClockConfig+0x1bc>)
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	4a52      	ldr	r2, [pc, #328]	; (8003b4c <HAL_RCC_ClockConfig+0x1bc>)
 8003a02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a08:	4b50      	ldr	r3, [pc, #320]	; (8003b4c <HAL_RCC_ClockConfig+0x1bc>)
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	494d      	ldr	r1, [pc, #308]	; (8003b4c <HAL_RCC_ClockConfig+0x1bc>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d044      	beq.n	8003ab0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d107      	bne.n	8003a3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a2e:	4b47      	ldr	r3, [pc, #284]	; (8003b4c <HAL_RCC_ClockConfig+0x1bc>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d119      	bne.n	8003a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e07f      	b.n	8003b3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d003      	beq.n	8003a4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a4a:	2b03      	cmp	r3, #3
 8003a4c:	d107      	bne.n	8003a5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a4e:	4b3f      	ldr	r3, [pc, #252]	; (8003b4c <HAL_RCC_ClockConfig+0x1bc>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d109      	bne.n	8003a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e06f      	b.n	8003b3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a5e:	4b3b      	ldr	r3, [pc, #236]	; (8003b4c <HAL_RCC_ClockConfig+0x1bc>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d101      	bne.n	8003a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e067      	b.n	8003b3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a6e:	4b37      	ldr	r3, [pc, #220]	; (8003b4c <HAL_RCC_ClockConfig+0x1bc>)
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f023 0203 	bic.w	r2, r3, #3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	4934      	ldr	r1, [pc, #208]	; (8003b4c <HAL_RCC_ClockConfig+0x1bc>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a80:	f7fe fc32 	bl	80022e8 <HAL_GetTick>
 8003a84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a86:	e00a      	b.n	8003a9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a88:	f7fe fc2e 	bl	80022e8 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e04f      	b.n	8003b3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a9e:	4b2b      	ldr	r3, [pc, #172]	; (8003b4c <HAL_RCC_ClockConfig+0x1bc>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f003 020c 	and.w	r2, r3, #12
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d1eb      	bne.n	8003a88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ab0:	4b25      	ldr	r3, [pc, #148]	; (8003b48 <HAL_RCC_ClockConfig+0x1b8>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 030f 	and.w	r3, r3, #15
 8003ab8:	683a      	ldr	r2, [r7, #0]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d20c      	bcs.n	8003ad8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003abe:	4b22      	ldr	r3, [pc, #136]	; (8003b48 <HAL_RCC_ClockConfig+0x1b8>)
 8003ac0:	683a      	ldr	r2, [r7, #0]
 8003ac2:	b2d2      	uxtb	r2, r2
 8003ac4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ac6:	4b20      	ldr	r3, [pc, #128]	; (8003b48 <HAL_RCC_ClockConfig+0x1b8>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 030f 	and.w	r3, r3, #15
 8003ace:	683a      	ldr	r2, [r7, #0]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d001      	beq.n	8003ad8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e032      	b.n	8003b3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0304 	and.w	r3, r3, #4
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d008      	beq.n	8003af6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ae4:	4b19      	ldr	r3, [pc, #100]	; (8003b4c <HAL_RCC_ClockConfig+0x1bc>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	4916      	ldr	r1, [pc, #88]	; (8003b4c <HAL_RCC_ClockConfig+0x1bc>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0308 	and.w	r3, r3, #8
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d009      	beq.n	8003b16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b02:	4b12      	ldr	r3, [pc, #72]	; (8003b4c <HAL_RCC_ClockConfig+0x1bc>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	490e      	ldr	r1, [pc, #56]	; (8003b4c <HAL_RCC_ClockConfig+0x1bc>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b16:	f000 f821 	bl	8003b5c <HAL_RCC_GetSysClockFreq>
 8003b1a:	4601      	mov	r1, r0
 8003b1c:	4b0b      	ldr	r3, [pc, #44]	; (8003b4c <HAL_RCC_ClockConfig+0x1bc>)
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	091b      	lsrs	r3, r3, #4
 8003b22:	f003 030f 	and.w	r3, r3, #15
 8003b26:	4a0a      	ldr	r2, [pc, #40]	; (8003b50 <HAL_RCC_ClockConfig+0x1c0>)
 8003b28:	5cd3      	ldrb	r3, [r2, r3]
 8003b2a:	fa21 f303 	lsr.w	r3, r1, r3
 8003b2e:	4a09      	ldr	r2, [pc, #36]	; (8003b54 <HAL_RCC_ClockConfig+0x1c4>)
 8003b30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b32:	4b09      	ldr	r3, [pc, #36]	; (8003b58 <HAL_RCC_ClockConfig+0x1c8>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7fe fb92 	bl	8002260 <HAL_InitTick>

  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	40023c00 	.word	0x40023c00
 8003b4c:	40023800 	.word	0x40023800
 8003b50:	08006984 	.word	0x08006984
 8003b54:	20000004 	.word	0x20000004
 8003b58:	20000008 	.word	0x20000008

08003b5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b62:	2300      	movs	r3, #0
 8003b64:	607b      	str	r3, [r7, #4]
 8003b66:	2300      	movs	r3, #0
 8003b68:	60fb      	str	r3, [r7, #12]
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b72:	4b63      	ldr	r3, [pc, #396]	; (8003d00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f003 030c 	and.w	r3, r3, #12
 8003b7a:	2b04      	cmp	r3, #4
 8003b7c:	d007      	beq.n	8003b8e <HAL_RCC_GetSysClockFreq+0x32>
 8003b7e:	2b08      	cmp	r3, #8
 8003b80:	d008      	beq.n	8003b94 <HAL_RCC_GetSysClockFreq+0x38>
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	f040 80b4 	bne.w	8003cf0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b88:	4b5e      	ldr	r3, [pc, #376]	; (8003d04 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003b8a:	60bb      	str	r3, [r7, #8]
       break;
 8003b8c:	e0b3      	b.n	8003cf6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b8e:	4b5e      	ldr	r3, [pc, #376]	; (8003d08 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003b90:	60bb      	str	r3, [r7, #8]
      break;
 8003b92:	e0b0      	b.n	8003cf6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b94:	4b5a      	ldr	r3, [pc, #360]	; (8003d00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b9c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b9e:	4b58      	ldr	r3, [pc, #352]	; (8003d00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d04a      	beq.n	8003c40 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003baa:	4b55      	ldr	r3, [pc, #340]	; (8003d00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	099b      	lsrs	r3, r3, #6
 8003bb0:	f04f 0400 	mov.w	r4, #0
 8003bb4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003bb8:	f04f 0200 	mov.w	r2, #0
 8003bbc:	ea03 0501 	and.w	r5, r3, r1
 8003bc0:	ea04 0602 	and.w	r6, r4, r2
 8003bc4:	4629      	mov	r1, r5
 8003bc6:	4632      	mov	r2, r6
 8003bc8:	f04f 0300 	mov.w	r3, #0
 8003bcc:	f04f 0400 	mov.w	r4, #0
 8003bd0:	0154      	lsls	r4, r2, #5
 8003bd2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003bd6:	014b      	lsls	r3, r1, #5
 8003bd8:	4619      	mov	r1, r3
 8003bda:	4622      	mov	r2, r4
 8003bdc:	1b49      	subs	r1, r1, r5
 8003bde:	eb62 0206 	sbc.w	r2, r2, r6
 8003be2:	f04f 0300 	mov.w	r3, #0
 8003be6:	f04f 0400 	mov.w	r4, #0
 8003bea:	0194      	lsls	r4, r2, #6
 8003bec:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003bf0:	018b      	lsls	r3, r1, #6
 8003bf2:	1a5b      	subs	r3, r3, r1
 8003bf4:	eb64 0402 	sbc.w	r4, r4, r2
 8003bf8:	f04f 0100 	mov.w	r1, #0
 8003bfc:	f04f 0200 	mov.w	r2, #0
 8003c00:	00e2      	lsls	r2, r4, #3
 8003c02:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003c06:	00d9      	lsls	r1, r3, #3
 8003c08:	460b      	mov	r3, r1
 8003c0a:	4614      	mov	r4, r2
 8003c0c:	195b      	adds	r3, r3, r5
 8003c0e:	eb44 0406 	adc.w	r4, r4, r6
 8003c12:	f04f 0100 	mov.w	r1, #0
 8003c16:	f04f 0200 	mov.w	r2, #0
 8003c1a:	0262      	lsls	r2, r4, #9
 8003c1c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003c20:	0259      	lsls	r1, r3, #9
 8003c22:	460b      	mov	r3, r1
 8003c24:	4614      	mov	r4, r2
 8003c26:	4618      	mov	r0, r3
 8003c28:	4621      	mov	r1, r4
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f04f 0400 	mov.w	r4, #0
 8003c30:	461a      	mov	r2, r3
 8003c32:	4623      	mov	r3, r4
 8003c34:	f7fc fd30 	bl	8000698 <__aeabi_uldivmod>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	460c      	mov	r4, r1
 8003c3c:	60fb      	str	r3, [r7, #12]
 8003c3e:	e049      	b.n	8003cd4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c40:	4b2f      	ldr	r3, [pc, #188]	; (8003d00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	099b      	lsrs	r3, r3, #6
 8003c46:	f04f 0400 	mov.w	r4, #0
 8003c4a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003c4e:	f04f 0200 	mov.w	r2, #0
 8003c52:	ea03 0501 	and.w	r5, r3, r1
 8003c56:	ea04 0602 	and.w	r6, r4, r2
 8003c5a:	4629      	mov	r1, r5
 8003c5c:	4632      	mov	r2, r6
 8003c5e:	f04f 0300 	mov.w	r3, #0
 8003c62:	f04f 0400 	mov.w	r4, #0
 8003c66:	0154      	lsls	r4, r2, #5
 8003c68:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003c6c:	014b      	lsls	r3, r1, #5
 8003c6e:	4619      	mov	r1, r3
 8003c70:	4622      	mov	r2, r4
 8003c72:	1b49      	subs	r1, r1, r5
 8003c74:	eb62 0206 	sbc.w	r2, r2, r6
 8003c78:	f04f 0300 	mov.w	r3, #0
 8003c7c:	f04f 0400 	mov.w	r4, #0
 8003c80:	0194      	lsls	r4, r2, #6
 8003c82:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003c86:	018b      	lsls	r3, r1, #6
 8003c88:	1a5b      	subs	r3, r3, r1
 8003c8a:	eb64 0402 	sbc.w	r4, r4, r2
 8003c8e:	f04f 0100 	mov.w	r1, #0
 8003c92:	f04f 0200 	mov.w	r2, #0
 8003c96:	00e2      	lsls	r2, r4, #3
 8003c98:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003c9c:	00d9      	lsls	r1, r3, #3
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	4614      	mov	r4, r2
 8003ca2:	195b      	adds	r3, r3, r5
 8003ca4:	eb44 0406 	adc.w	r4, r4, r6
 8003ca8:	f04f 0100 	mov.w	r1, #0
 8003cac:	f04f 0200 	mov.w	r2, #0
 8003cb0:	02a2      	lsls	r2, r4, #10
 8003cb2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003cb6:	0299      	lsls	r1, r3, #10
 8003cb8:	460b      	mov	r3, r1
 8003cba:	4614      	mov	r4, r2
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	4621      	mov	r1, r4
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f04f 0400 	mov.w	r4, #0
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	4623      	mov	r3, r4
 8003cca:	f7fc fce5 	bl	8000698 <__aeabi_uldivmod>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	460c      	mov	r4, r1
 8003cd2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003cd4:	4b0a      	ldr	r3, [pc, #40]	; (8003d00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	0c1b      	lsrs	r3, r3, #16
 8003cda:	f003 0303 	and.w	r3, r3, #3
 8003cde:	3301      	adds	r3, #1
 8003ce0:	005b      	lsls	r3, r3, #1
 8003ce2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cec:	60bb      	str	r3, [r7, #8]
      break;
 8003cee:	e002      	b.n	8003cf6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cf0:	4b04      	ldr	r3, [pc, #16]	; (8003d04 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003cf2:	60bb      	str	r3, [r7, #8]
      break;
 8003cf4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cf6:	68bb      	ldr	r3, [r7, #8]
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3714      	adds	r7, #20
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d00:	40023800 	.word	0x40023800
 8003d04:	00f42400 	.word	0x00f42400
 8003d08:	007a1200 	.word	0x007a1200

08003d0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d10:	4b03      	ldr	r3, [pc, #12]	; (8003d20 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d12:	681b      	ldr	r3, [r3, #0]
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	20000004 	.word	0x20000004

08003d24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d28:	f7ff fff0 	bl	8003d0c <HAL_RCC_GetHCLKFreq>
 8003d2c:	4601      	mov	r1, r0
 8003d2e:	4b05      	ldr	r3, [pc, #20]	; (8003d44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	0a9b      	lsrs	r3, r3, #10
 8003d34:	f003 0307 	and.w	r3, r3, #7
 8003d38:	4a03      	ldr	r2, [pc, #12]	; (8003d48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d3a:	5cd3      	ldrb	r3, [r2, r3]
 8003d3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	40023800 	.word	0x40023800
 8003d48:	08006994 	.word	0x08006994

08003d4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d50:	f7ff ffdc 	bl	8003d0c <HAL_RCC_GetHCLKFreq>
 8003d54:	4601      	mov	r1, r0
 8003d56:	4b05      	ldr	r3, [pc, #20]	; (8003d6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	0b5b      	lsrs	r3, r3, #13
 8003d5c:	f003 0307 	and.w	r3, r3, #7
 8003d60:	4a03      	ldr	r2, [pc, #12]	; (8003d70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d62:	5cd3      	ldrb	r3, [r2, r3]
 8003d64:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	40023800 	.word	0x40023800
 8003d70:	08006994 	.word	0x08006994

08003d74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d101      	bne.n	8003d86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e01d      	b.n	8003dc2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d106      	bne.n	8003da0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f7fe f806 	bl	8001dac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2202      	movs	r2, #2
 8003da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	3304      	adds	r3, #4
 8003db0:	4619      	mov	r1, r3
 8003db2:	4610      	mov	r0, r2
 8003db4:	f000 fa38 	bl	8004228 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3708      	adds	r7, #8
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b085      	sub	sp, #20
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2202      	movs	r2, #2
 8003dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f003 0307 	and.w	r3, r3, #7
 8003de4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2b06      	cmp	r3, #6
 8003dea:	d007      	beq.n	8003dfc <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f042 0201 	orr.w	r2, r2, #1
 8003dfa:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3714      	adds	r7, #20
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr

08003e12 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e12:	b480      	push	{r7}
 8003e14:	b085      	sub	sp, #20
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	68da      	ldr	r2, [r3, #12]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f042 0201 	orr.w	r2, r2, #1
 8003e28:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f003 0307 	and.w	r3, r3, #7
 8003e34:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2b06      	cmp	r3, #6
 8003e3a:	d007      	beq.n	8003e4c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f042 0201 	orr.w	r2, r2, #1
 8003e4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3714      	adds	r7, #20
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr

08003e5a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b082      	sub	sp, #8
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d122      	bne.n	8003eb6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d11b      	bne.n	8003eb6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f06f 0202 	mvn.w	r2, #2
 8003e86:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	f003 0303 	and.w	r3, r3, #3
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d003      	beq.n	8003ea4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 f9a5 	bl	80041ec <HAL_TIM_IC_CaptureCallback>
 8003ea2:	e005      	b.n	8003eb0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 f997 	bl	80041d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 f9a8 	bl	8004200 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	f003 0304 	and.w	r3, r3, #4
 8003ec0:	2b04      	cmp	r3, #4
 8003ec2:	d122      	bne.n	8003f0a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	f003 0304 	and.w	r3, r3, #4
 8003ece:	2b04      	cmp	r3, #4
 8003ed0:	d11b      	bne.n	8003f0a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f06f 0204 	mvn.w	r2, #4
 8003eda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2202      	movs	r2, #2
 8003ee0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	699b      	ldr	r3, [r3, #24]
 8003ee8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d003      	beq.n	8003ef8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f000 f97b 	bl	80041ec <HAL_TIM_IC_CaptureCallback>
 8003ef6:	e005      	b.n	8003f04 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f000 f96d 	bl	80041d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 f97e 	bl	8004200 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	f003 0308 	and.w	r3, r3, #8
 8003f14:	2b08      	cmp	r3, #8
 8003f16:	d122      	bne.n	8003f5e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	f003 0308 	and.w	r3, r3, #8
 8003f22:	2b08      	cmp	r3, #8
 8003f24:	d11b      	bne.n	8003f5e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f06f 0208 	mvn.w	r2, #8
 8003f2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2204      	movs	r2, #4
 8003f34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	69db      	ldr	r3, [r3, #28]
 8003f3c:	f003 0303 	and.w	r3, r3, #3
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d003      	beq.n	8003f4c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 f951 	bl	80041ec <HAL_TIM_IC_CaptureCallback>
 8003f4a:	e005      	b.n	8003f58 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 f943 	bl	80041d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 f954 	bl	8004200 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	f003 0310 	and.w	r3, r3, #16
 8003f68:	2b10      	cmp	r3, #16
 8003f6a:	d122      	bne.n	8003fb2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	f003 0310 	and.w	r3, r3, #16
 8003f76:	2b10      	cmp	r3, #16
 8003f78:	d11b      	bne.n	8003fb2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f06f 0210 	mvn.w	r2, #16
 8003f82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2208      	movs	r2, #8
 8003f88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	69db      	ldr	r3, [r3, #28]
 8003f90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d003      	beq.n	8003fa0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 f927 	bl	80041ec <HAL_TIM_IC_CaptureCallback>
 8003f9e:	e005      	b.n	8003fac <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 f919 	bl	80041d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 f92a 	bl	8004200 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	691b      	ldr	r3, [r3, #16]
 8003fb8:	f003 0301 	and.w	r3, r3, #1
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d10e      	bne.n	8003fde <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d107      	bne.n	8003fde <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f06f 0201 	mvn.w	r2, #1
 8003fd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f7fd ff5f 	bl	8001e9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fe8:	2b80      	cmp	r3, #128	; 0x80
 8003fea:	d10e      	bne.n	800400a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff6:	2b80      	cmp	r3, #128	; 0x80
 8003ff8:	d107      	bne.n	800400a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004002:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 facf 	bl	80045a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004014:	2b40      	cmp	r3, #64	; 0x40
 8004016:	d10e      	bne.n	8004036 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004022:	2b40      	cmp	r3, #64	; 0x40
 8004024:	d107      	bne.n	8004036 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800402e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f000 f8ef 	bl	8004214 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	f003 0320 	and.w	r3, r3, #32
 8004040:	2b20      	cmp	r3, #32
 8004042:	d10e      	bne.n	8004062 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	f003 0320 	and.w	r3, r3, #32
 800404e:	2b20      	cmp	r3, #32
 8004050:	d107      	bne.n	8004062 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f06f 0220 	mvn.w	r2, #32
 800405a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f000 fa99 	bl	8004594 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004062:	bf00      	nop
 8004064:	3708      	adds	r7, #8
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}

0800406a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800406a:	b580      	push	{r7, lr}
 800406c:	b084      	sub	sp, #16
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
 8004072:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800407a:	2b01      	cmp	r3, #1
 800407c:	d101      	bne.n	8004082 <HAL_TIM_ConfigClockSource+0x18>
 800407e:	2302      	movs	r3, #2
 8004080:	e0a6      	b.n	80041d0 <HAL_TIM_ConfigClockSource+0x166>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2201      	movs	r2, #1
 8004086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2202      	movs	r2, #2
 800408e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80040a0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040a8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2b40      	cmp	r3, #64	; 0x40
 80040b8:	d067      	beq.n	800418a <HAL_TIM_ConfigClockSource+0x120>
 80040ba:	2b40      	cmp	r3, #64	; 0x40
 80040bc:	d80b      	bhi.n	80040d6 <HAL_TIM_ConfigClockSource+0x6c>
 80040be:	2b10      	cmp	r3, #16
 80040c0:	d073      	beq.n	80041aa <HAL_TIM_ConfigClockSource+0x140>
 80040c2:	2b10      	cmp	r3, #16
 80040c4:	d802      	bhi.n	80040cc <HAL_TIM_ConfigClockSource+0x62>
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d06f      	beq.n	80041aa <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80040ca:	e078      	b.n	80041be <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80040cc:	2b20      	cmp	r3, #32
 80040ce:	d06c      	beq.n	80041aa <HAL_TIM_ConfigClockSource+0x140>
 80040d0:	2b30      	cmp	r3, #48	; 0x30
 80040d2:	d06a      	beq.n	80041aa <HAL_TIM_ConfigClockSource+0x140>
      break;
 80040d4:	e073      	b.n	80041be <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80040d6:	2b70      	cmp	r3, #112	; 0x70
 80040d8:	d00d      	beq.n	80040f6 <HAL_TIM_ConfigClockSource+0x8c>
 80040da:	2b70      	cmp	r3, #112	; 0x70
 80040dc:	d804      	bhi.n	80040e8 <HAL_TIM_ConfigClockSource+0x7e>
 80040de:	2b50      	cmp	r3, #80	; 0x50
 80040e0:	d033      	beq.n	800414a <HAL_TIM_ConfigClockSource+0xe0>
 80040e2:	2b60      	cmp	r3, #96	; 0x60
 80040e4:	d041      	beq.n	800416a <HAL_TIM_ConfigClockSource+0x100>
      break;
 80040e6:	e06a      	b.n	80041be <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80040e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ec:	d066      	beq.n	80041bc <HAL_TIM_ConfigClockSource+0x152>
 80040ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040f2:	d017      	beq.n	8004124 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80040f4:	e063      	b.n	80041be <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6818      	ldr	r0, [r3, #0]
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	6899      	ldr	r1, [r3, #8]
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	f000 f9a9 	bl	800445c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004118:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	609a      	str	r2, [r3, #8]
      break;
 8004122:	e04c      	b.n	80041be <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6818      	ldr	r0, [r3, #0]
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	6899      	ldr	r1, [r3, #8]
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685a      	ldr	r2, [r3, #4]
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	f000 f992 	bl	800445c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	689a      	ldr	r2, [r3, #8]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004146:	609a      	str	r2, [r3, #8]
      break;
 8004148:	e039      	b.n	80041be <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6818      	ldr	r0, [r3, #0]
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	6859      	ldr	r1, [r3, #4]
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	461a      	mov	r2, r3
 8004158:	f000 f906 	bl	8004368 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2150      	movs	r1, #80	; 0x50
 8004162:	4618      	mov	r0, r3
 8004164:	f000 f95f 	bl	8004426 <TIM_ITRx_SetConfig>
      break;
 8004168:	e029      	b.n	80041be <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6818      	ldr	r0, [r3, #0]
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	6859      	ldr	r1, [r3, #4]
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	461a      	mov	r2, r3
 8004178:	f000 f925 	bl	80043c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2160      	movs	r1, #96	; 0x60
 8004182:	4618      	mov	r0, r3
 8004184:	f000 f94f 	bl	8004426 <TIM_ITRx_SetConfig>
      break;
 8004188:	e019      	b.n	80041be <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6818      	ldr	r0, [r3, #0]
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	6859      	ldr	r1, [r3, #4]
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	461a      	mov	r2, r3
 8004198:	f000 f8e6 	bl	8004368 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2140      	movs	r1, #64	; 0x40
 80041a2:	4618      	mov	r0, r3
 80041a4:	f000 f93f 	bl	8004426 <TIM_ITRx_SetConfig>
      break;
 80041a8:	e009      	b.n	80041be <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4619      	mov	r1, r3
 80041b4:	4610      	mov	r0, r2
 80041b6:	f000 f936 	bl	8004426 <TIM_ITRx_SetConfig>
      break;
 80041ba:	e000      	b.n	80041be <HAL_TIM_ConfigClockSource+0x154>
      break;
 80041bc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004228:	b480      	push	{r7}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a40      	ldr	r2, [pc, #256]	; (800433c <TIM_Base_SetConfig+0x114>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d013      	beq.n	8004268 <TIM_Base_SetConfig+0x40>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004246:	d00f      	beq.n	8004268 <TIM_Base_SetConfig+0x40>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a3d      	ldr	r2, [pc, #244]	; (8004340 <TIM_Base_SetConfig+0x118>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d00b      	beq.n	8004268 <TIM_Base_SetConfig+0x40>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a3c      	ldr	r2, [pc, #240]	; (8004344 <TIM_Base_SetConfig+0x11c>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d007      	beq.n	8004268 <TIM_Base_SetConfig+0x40>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a3b      	ldr	r2, [pc, #236]	; (8004348 <TIM_Base_SetConfig+0x120>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d003      	beq.n	8004268 <TIM_Base_SetConfig+0x40>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a3a      	ldr	r2, [pc, #232]	; (800434c <TIM_Base_SetConfig+0x124>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d108      	bne.n	800427a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800426e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	4313      	orrs	r3, r2
 8004278:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a2f      	ldr	r2, [pc, #188]	; (800433c <TIM_Base_SetConfig+0x114>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d02b      	beq.n	80042da <TIM_Base_SetConfig+0xb2>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004288:	d027      	beq.n	80042da <TIM_Base_SetConfig+0xb2>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a2c      	ldr	r2, [pc, #176]	; (8004340 <TIM_Base_SetConfig+0x118>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d023      	beq.n	80042da <TIM_Base_SetConfig+0xb2>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a2b      	ldr	r2, [pc, #172]	; (8004344 <TIM_Base_SetConfig+0x11c>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d01f      	beq.n	80042da <TIM_Base_SetConfig+0xb2>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a2a      	ldr	r2, [pc, #168]	; (8004348 <TIM_Base_SetConfig+0x120>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d01b      	beq.n	80042da <TIM_Base_SetConfig+0xb2>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a29      	ldr	r2, [pc, #164]	; (800434c <TIM_Base_SetConfig+0x124>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d017      	beq.n	80042da <TIM_Base_SetConfig+0xb2>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a28      	ldr	r2, [pc, #160]	; (8004350 <TIM_Base_SetConfig+0x128>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d013      	beq.n	80042da <TIM_Base_SetConfig+0xb2>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a27      	ldr	r2, [pc, #156]	; (8004354 <TIM_Base_SetConfig+0x12c>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d00f      	beq.n	80042da <TIM_Base_SetConfig+0xb2>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a26      	ldr	r2, [pc, #152]	; (8004358 <TIM_Base_SetConfig+0x130>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d00b      	beq.n	80042da <TIM_Base_SetConfig+0xb2>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a25      	ldr	r2, [pc, #148]	; (800435c <TIM_Base_SetConfig+0x134>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d007      	beq.n	80042da <TIM_Base_SetConfig+0xb2>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a24      	ldr	r2, [pc, #144]	; (8004360 <TIM_Base_SetConfig+0x138>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d003      	beq.n	80042da <TIM_Base_SetConfig+0xb2>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a23      	ldr	r2, [pc, #140]	; (8004364 <TIM_Base_SetConfig+0x13c>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d108      	bne.n	80042ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	689a      	ldr	r2, [r3, #8]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a0a      	ldr	r2, [pc, #40]	; (800433c <TIM_Base_SetConfig+0x114>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d003      	beq.n	8004320 <TIM_Base_SetConfig+0xf8>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a0c      	ldr	r2, [pc, #48]	; (800434c <TIM_Base_SetConfig+0x124>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d103      	bne.n	8004328 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	691a      	ldr	r2, [r3, #16]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	615a      	str	r2, [r3, #20]
}
 800432e:	bf00      	nop
 8004330:	3714      	adds	r7, #20
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	40010000 	.word	0x40010000
 8004340:	40000400 	.word	0x40000400
 8004344:	40000800 	.word	0x40000800
 8004348:	40000c00 	.word	0x40000c00
 800434c:	40010400 	.word	0x40010400
 8004350:	40014000 	.word	0x40014000
 8004354:	40014400 	.word	0x40014400
 8004358:	40014800 	.word	0x40014800
 800435c:	40001800 	.word	0x40001800
 8004360:	40001c00 	.word	0x40001c00
 8004364:	40002000 	.word	0x40002000

08004368 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004368:	b480      	push	{r7}
 800436a:	b087      	sub	sp, #28
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6a1b      	ldr	r3, [r3, #32]
 8004378:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6a1b      	ldr	r3, [r3, #32]
 800437e:	f023 0201 	bic.w	r2, r3, #1
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004392:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	011b      	lsls	r3, r3, #4
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	4313      	orrs	r3, r2
 800439c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	f023 030a 	bic.w	r3, r3, #10
 80043a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	697a      	ldr	r2, [r7, #20]
 80043b8:	621a      	str	r2, [r3, #32]
}
 80043ba:	bf00      	nop
 80043bc:	371c      	adds	r7, #28
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr

080043c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043c6:	b480      	push	{r7}
 80043c8:	b087      	sub	sp, #28
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	60f8      	str	r0, [r7, #12]
 80043ce:	60b9      	str	r1, [r7, #8]
 80043d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6a1b      	ldr	r3, [r3, #32]
 80043d6:	f023 0210 	bic.w	r2, r3, #16
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6a1b      	ldr	r3, [r3, #32]
 80043e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	031b      	lsls	r3, r3, #12
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004402:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	011b      	lsls	r3, r3, #4
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	4313      	orrs	r3, r2
 800440c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	697a      	ldr	r2, [r7, #20]
 8004412:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	621a      	str	r2, [r3, #32]
}
 800441a:	bf00      	nop
 800441c:	371c      	adds	r7, #28
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr

08004426 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004426:	b480      	push	{r7}
 8004428:	b085      	sub	sp, #20
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
 800442e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800443c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800443e:	683a      	ldr	r2, [r7, #0]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	4313      	orrs	r3, r2
 8004444:	f043 0307 	orr.w	r3, r3, #7
 8004448:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	609a      	str	r2, [r3, #8]
}
 8004450:	bf00      	nop
 8004452:	3714      	adds	r7, #20
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800445c:	b480      	push	{r7}
 800445e:	b087      	sub	sp, #28
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	607a      	str	r2, [r7, #4]
 8004468:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004476:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	021a      	lsls	r2, r3, #8
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	431a      	orrs	r2, r3
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	4313      	orrs	r3, r2
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	4313      	orrs	r3, r2
 8004488:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	609a      	str	r2, [r3, #8]
}
 8004490:	bf00      	nop
 8004492:	371c      	adds	r7, #28
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d101      	bne.n	80044b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044b0:	2302      	movs	r3, #2
 80044b2:	e05a      	b.n	800456a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2202      	movs	r2, #2
 80044c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68fa      	ldr	r2, [r7, #12]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a21      	ldr	r2, [pc, #132]	; (8004578 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d022      	beq.n	800453e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004500:	d01d      	beq.n	800453e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a1d      	ldr	r2, [pc, #116]	; (800457c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d018      	beq.n	800453e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a1b      	ldr	r2, [pc, #108]	; (8004580 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d013      	beq.n	800453e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a1a      	ldr	r2, [pc, #104]	; (8004584 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d00e      	beq.n	800453e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a18      	ldr	r2, [pc, #96]	; (8004588 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d009      	beq.n	800453e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a17      	ldr	r2, [pc, #92]	; (800458c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d004      	beq.n	800453e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a15      	ldr	r2, [pc, #84]	; (8004590 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d10c      	bne.n	8004558 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004544:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	68ba      	ldr	r2, [r7, #8]
 800454c:	4313      	orrs	r3, r2
 800454e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68ba      	ldr	r2, [r7, #8]
 8004556:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3714      	adds	r7, #20
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	40010000 	.word	0x40010000
 800457c:	40000400 	.word	0x40000400
 8004580:	40000800 	.word	0x40000800
 8004584:	40000c00 	.word	0x40000c00
 8004588:	40010400 	.word	0x40010400
 800458c:	40014000 	.word	0x40014000
 8004590:	40001800 	.word	0x40001800

08004594 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800459c:	bf00      	nop
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045b0:	bf00      	nop
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d101      	bne.n	80045ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e03f      	b.n	800464e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d106      	bne.n	80045e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f7fd fd20 	bl	8002028 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2224      	movs	r2, #36	; 0x24
 80045ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68da      	ldr	r2, [r3, #12]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 fb97 	bl	8004d34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	691a      	ldr	r2, [r3, #16]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004614:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	695a      	ldr	r2, [r3, #20]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004624:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68da      	ldr	r2, [r3, #12]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004634:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2220      	movs	r2, #32
 8004640:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2220      	movs	r2, #32
 8004648:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3708      	adds	r7, #8
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b088      	sub	sp, #32
 800465a:	af02      	add	r7, sp, #8
 800465c:	60f8      	str	r0, [r7, #12]
 800465e:	60b9      	str	r1, [r7, #8]
 8004660:	603b      	str	r3, [r7, #0]
 8004662:	4613      	mov	r3, r2
 8004664:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004666:	2300      	movs	r3, #0
 8004668:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004670:	b2db      	uxtb	r3, r3
 8004672:	2b20      	cmp	r3, #32
 8004674:	f040 8083 	bne.w	800477e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d002      	beq.n	8004684 <HAL_UART_Transmit+0x2e>
 800467e:	88fb      	ldrh	r3, [r7, #6]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d101      	bne.n	8004688 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e07b      	b.n	8004780 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800468e:	2b01      	cmp	r3, #1
 8004690:	d101      	bne.n	8004696 <HAL_UART_Transmit+0x40>
 8004692:	2302      	movs	r3, #2
 8004694:	e074      	b.n	8004780 <HAL_UART_Transmit+0x12a>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2200      	movs	r2, #0
 80046a2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2221      	movs	r2, #33	; 0x21
 80046a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80046ac:	f7fd fe1c 	bl	80022e8 <HAL_GetTick>
 80046b0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	88fa      	ldrh	r2, [r7, #6]
 80046b6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	88fa      	ldrh	r2, [r7, #6]
 80046bc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80046c6:	e042      	b.n	800474e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	3b01      	subs	r3, #1
 80046d0:	b29a      	uxth	r2, r3
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046de:	d122      	bne.n	8004726 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	9300      	str	r3, [sp, #0]
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	2200      	movs	r2, #0
 80046e8:	2180      	movs	r1, #128	; 0x80
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	f000 f9b6 	bl	8004a5c <UART_WaitOnFlagUntilTimeout>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d001      	beq.n	80046fa <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e042      	b.n	8004780 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	881b      	ldrh	r3, [r3, #0]
 8004702:	461a      	mov	r2, r3
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800470c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d103      	bne.n	800471e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	3302      	adds	r3, #2
 800471a:	60bb      	str	r3, [r7, #8]
 800471c:	e017      	b.n	800474e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	3301      	adds	r3, #1
 8004722:	60bb      	str	r3, [r7, #8]
 8004724:	e013      	b.n	800474e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	9300      	str	r3, [sp, #0]
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	2200      	movs	r2, #0
 800472e:	2180      	movs	r1, #128	; 0x80
 8004730:	68f8      	ldr	r0, [r7, #12]
 8004732:	f000 f993 	bl	8004a5c <UART_WaitOnFlagUntilTimeout>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d001      	beq.n	8004740 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e01f      	b.n	8004780 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	1c5a      	adds	r2, r3, #1
 8004744:	60ba      	str	r2, [r7, #8]
 8004746:	781a      	ldrb	r2, [r3, #0]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004752:	b29b      	uxth	r3, r3
 8004754:	2b00      	cmp	r3, #0
 8004756:	d1b7      	bne.n	80046c8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	9300      	str	r3, [sp, #0]
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	2200      	movs	r2, #0
 8004760:	2140      	movs	r1, #64	; 0x40
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f000 f97a 	bl	8004a5c <UART_WaitOnFlagUntilTimeout>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d001      	beq.n	8004772 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e006      	b.n	8004780 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2220      	movs	r2, #32
 8004776:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800477a:	2300      	movs	r3, #0
 800477c:	e000      	b.n	8004780 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800477e:	2302      	movs	r3, #2
  }
}
 8004780:	4618      	mov	r0, r3
 8004782:	3718      	adds	r7, #24
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004788:	b480      	push	{r7}
 800478a:	b085      	sub	sp, #20
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	4613      	mov	r3, r2
 8004794:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b20      	cmp	r3, #32
 80047a0:	d140      	bne.n	8004824 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d002      	beq.n	80047ae <HAL_UART_Receive_IT+0x26>
 80047a8:	88fb      	ldrh	r3, [r7, #6]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d101      	bne.n	80047b2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e039      	b.n	8004826 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d101      	bne.n	80047c0 <HAL_UART_Receive_IT+0x38>
 80047bc:	2302      	movs	r3, #2
 80047be:	e032      	b.n	8004826 <HAL_UART_Receive_IT+0x9e>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	88fa      	ldrh	r2, [r7, #6]
 80047d2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	88fa      	ldrh	r2, [r7, #6]
 80047d8:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2222      	movs	r2, #34	; 0x22
 80047e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68da      	ldr	r2, [r3, #12]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047fe:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	695a      	ldr	r2, [r3, #20]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f042 0201 	orr.w	r2, r2, #1
 800480e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68da      	ldr	r2, [r3, #12]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f042 0220 	orr.w	r2, r2, #32
 800481e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004820:	2300      	movs	r3, #0
 8004822:	e000      	b.n	8004826 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004824:	2302      	movs	r3, #2
  }
}
 8004826:	4618      	mov	r0, r3
 8004828:	3714      	adds	r7, #20
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
	...

08004834 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b088      	sub	sp, #32
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004854:	2300      	movs	r3, #0
 8004856:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004858:	2300      	movs	r3, #0
 800485a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	f003 030f 	and.w	r3, r3, #15
 8004862:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d10d      	bne.n	8004886 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	f003 0320 	and.w	r3, r3, #32
 8004870:	2b00      	cmp	r3, #0
 8004872:	d008      	beq.n	8004886 <HAL_UART_IRQHandler+0x52>
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	f003 0320 	and.w	r3, r3, #32
 800487a:	2b00      	cmp	r3, #0
 800487c:	d003      	beq.n	8004886 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 f9d6 	bl	8004c30 <UART_Receive_IT>
      return;
 8004884:	e0d1      	b.n	8004a2a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	2b00      	cmp	r3, #0
 800488a:	f000 80b0 	beq.w	80049ee <HAL_UART_IRQHandler+0x1ba>
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	f003 0301 	and.w	r3, r3, #1
 8004894:	2b00      	cmp	r3, #0
 8004896:	d105      	bne.n	80048a4 <HAL_UART_IRQHandler+0x70>
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f000 80a5 	beq.w	80049ee <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00a      	beq.n	80048c4 <HAL_UART_IRQHandler+0x90>
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d005      	beq.n	80048c4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048bc:	f043 0201 	orr.w	r2, r3, #1
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	f003 0304 	and.w	r3, r3, #4
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d00a      	beq.n	80048e4 <HAL_UART_IRQHandler+0xb0>
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	f003 0301 	and.w	r3, r3, #1
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d005      	beq.n	80048e4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048dc:	f043 0202 	orr.w	r2, r3, #2
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00a      	beq.n	8004904 <HAL_UART_IRQHandler+0xd0>
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	f003 0301 	and.w	r3, r3, #1
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d005      	beq.n	8004904 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048fc:	f043 0204 	orr.w	r2, r3, #4
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	f003 0308 	and.w	r3, r3, #8
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00f      	beq.n	800492e <HAL_UART_IRQHandler+0xfa>
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	f003 0320 	and.w	r3, r3, #32
 8004914:	2b00      	cmp	r3, #0
 8004916:	d104      	bne.n	8004922 <HAL_UART_IRQHandler+0xee>
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	f003 0301 	and.w	r3, r3, #1
 800491e:	2b00      	cmp	r3, #0
 8004920:	d005      	beq.n	800492e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004926:	f043 0208 	orr.w	r2, r3, #8
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004932:	2b00      	cmp	r3, #0
 8004934:	d078      	beq.n	8004a28 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	f003 0320 	and.w	r3, r3, #32
 800493c:	2b00      	cmp	r3, #0
 800493e:	d007      	beq.n	8004950 <HAL_UART_IRQHandler+0x11c>
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	f003 0320 	and.w	r3, r3, #32
 8004946:	2b00      	cmp	r3, #0
 8004948:	d002      	beq.n	8004950 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 f970 	bl	8004c30 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800495a:	2b40      	cmp	r3, #64	; 0x40
 800495c:	bf0c      	ite	eq
 800495e:	2301      	moveq	r3, #1
 8004960:	2300      	movne	r3, #0
 8004962:	b2db      	uxtb	r3, r3
 8004964:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800496a:	f003 0308 	and.w	r3, r3, #8
 800496e:	2b00      	cmp	r3, #0
 8004970:	d102      	bne.n	8004978 <HAL_UART_IRQHandler+0x144>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d031      	beq.n	80049dc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f000 f8b9 	bl	8004af0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	695b      	ldr	r3, [r3, #20]
 8004984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004988:	2b40      	cmp	r3, #64	; 0x40
 800498a:	d123      	bne.n	80049d4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	695a      	ldr	r2, [r3, #20]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800499a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d013      	beq.n	80049cc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049a8:	4a21      	ldr	r2, [pc, #132]	; (8004a30 <HAL_UART_IRQHandler+0x1fc>)
 80049aa:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049b0:	4618      	mov	r0, r3
 80049b2:	f7fd fdd8 	bl	8002566 <HAL_DMA_Abort_IT>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d016      	beq.n	80049ea <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80049c6:	4610      	mov	r0, r2
 80049c8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049ca:	e00e      	b.n	80049ea <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 f83b 	bl	8004a48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049d2:	e00a      	b.n	80049ea <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f000 f837 	bl	8004a48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049da:	e006      	b.n	80049ea <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 f833 	bl	8004a48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80049e8:	e01e      	b.n	8004a28 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049ea:	bf00      	nop
    return;
 80049ec:	e01c      	b.n	8004a28 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d008      	beq.n	8004a0a <HAL_UART_IRQHandler+0x1d6>
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d003      	beq.n	8004a0a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 f8a6 	bl	8004b54 <UART_Transmit_IT>
    return;
 8004a08:	e00f      	b.n	8004a2a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d00a      	beq.n	8004a2a <HAL_UART_IRQHandler+0x1f6>
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d005      	beq.n	8004a2a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 f8ee 	bl	8004c00 <UART_EndTransmit_IT>
    return;
 8004a24:	bf00      	nop
 8004a26:	e000      	b.n	8004a2a <HAL_UART_IRQHandler+0x1f6>
    return;
 8004a28:	bf00      	nop
  }
}
 8004a2a:	3720      	adds	r7, #32
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	08004b2d 	.word	0x08004b2d

08004a34 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004a3c:	bf00      	nop
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	603b      	str	r3, [r7, #0]
 8004a68:	4613      	mov	r3, r2
 8004a6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a6c:	e02c      	b.n	8004ac8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a74:	d028      	beq.n	8004ac8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d007      	beq.n	8004a8c <UART_WaitOnFlagUntilTimeout+0x30>
 8004a7c:	f7fd fc34 	bl	80022e8 <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	69ba      	ldr	r2, [r7, #24]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d21d      	bcs.n	8004ac8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68da      	ldr	r2, [r3, #12]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004a9a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	695a      	ldr	r2, [r3, #20]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f022 0201 	bic.w	r2, r2, #1
 8004aaa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2220      	movs	r2, #32
 8004ab8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e00f      	b.n	8004ae8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	68ba      	ldr	r2, [r7, #8]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	bf0c      	ite	eq
 8004ad8:	2301      	moveq	r3, #1
 8004ada:	2300      	movne	r3, #0
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	461a      	mov	r2, r3
 8004ae0:	79fb      	ldrb	r3, [r7, #7]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d0c3      	beq.n	8004a6e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3710      	adds	r7, #16
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68da      	ldr	r2, [r3, #12]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004b06:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	695a      	ldr	r2, [r3, #20]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f022 0201 	bic.w	r2, r2, #1
 8004b16:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004b20:	bf00      	nop
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b38:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2200      	movs	r2, #0
 8004b44:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b46:	68f8      	ldr	r0, [r7, #12]
 8004b48:	f7ff ff7e 	bl	8004a48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b4c:	bf00      	nop
 8004b4e:	3710      	adds	r7, #16
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	2b21      	cmp	r3, #33	; 0x21
 8004b66:	d144      	bne.n	8004bf2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b70:	d11a      	bne.n	8004ba8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a1b      	ldr	r3, [r3, #32]
 8004b76:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	881b      	ldrh	r3, [r3, #0]
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b86:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d105      	bne.n	8004b9c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a1b      	ldr	r3, [r3, #32]
 8004b94:	1c9a      	adds	r2, r3, #2
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	621a      	str	r2, [r3, #32]
 8004b9a:	e00e      	b.n	8004bba <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a1b      	ldr	r3, [r3, #32]
 8004ba0:	1c5a      	adds	r2, r3, #1
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	621a      	str	r2, [r3, #32]
 8004ba6:	e008      	b.n	8004bba <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a1b      	ldr	r3, [r3, #32]
 8004bac:	1c59      	adds	r1, r3, #1
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	6211      	str	r1, [r2, #32]
 8004bb2:	781a      	ldrb	r2, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d10f      	bne.n	8004bee <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68da      	ldr	r2, [r3, #12]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bdc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68da      	ldr	r2, [r3, #12]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	e000      	b.n	8004bf4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004bf2:	2302      	movs	r3, #2
  }
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3714      	adds	r7, #20
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68da      	ldr	r2, [r3, #12]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c16:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2220      	movs	r2, #32
 8004c1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f7ff ff07 	bl	8004a34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3708      	adds	r7, #8
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	2b22      	cmp	r3, #34	; 0x22
 8004c42:	d171      	bne.n	8004d28 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c4c:	d123      	bne.n	8004c96 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c52:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d10e      	bne.n	8004c7a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c68:	b29a      	uxth	r2, r3
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c72:	1c9a      	adds	r2, r3, #2
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	629a      	str	r2, [r3, #40]	; 0x28
 8004c78:	e029      	b.n	8004cce <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	b29a      	uxth	r2, r3
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c8e:	1c5a      	adds	r2, r3, #1
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	629a      	str	r2, [r3, #40]	; 0x28
 8004c94:	e01b      	b.n	8004cce <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d10a      	bne.n	8004cb4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	6858      	ldr	r0, [r3, #4]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca8:	1c59      	adds	r1, r3, #1
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	6291      	str	r1, [r2, #40]	; 0x28
 8004cae:	b2c2      	uxtb	r2, r0
 8004cb0:	701a      	strb	r2, [r3, #0]
 8004cb2:	e00c      	b.n	8004cce <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	b2da      	uxtb	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc0:	1c58      	adds	r0, r3, #1
 8004cc2:	6879      	ldr	r1, [r7, #4]
 8004cc4:	6288      	str	r0, [r1, #40]	; 0x28
 8004cc6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004cca:	b2d2      	uxtb	r2, r2
 8004ccc:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	4619      	mov	r1, r3
 8004cdc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d120      	bne.n	8004d24 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68da      	ldr	r2, [r3, #12]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f022 0220 	bic.w	r2, r2, #32
 8004cf0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68da      	ldr	r2, [r3, #12]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d00:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	695a      	ldr	r2, [r3, #20]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f022 0201 	bic.w	r2, r2, #1
 8004d10:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2220      	movs	r2, #32
 8004d16:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f7fc fd52 	bl	80017c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004d20:	2300      	movs	r3, #0
 8004d22:	e002      	b.n	8004d2a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004d24:	2300      	movs	r3, #0
 8004d26:	e000      	b.n	8004d2a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004d28:	2302      	movs	r3, #2
  }
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3710      	adds	r7, #16
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
	...

08004d34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d38:	b085      	sub	sp, #20
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	68da      	ldr	r2, [r3, #12]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	430a      	orrs	r2, r1
 8004d52:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	689a      	ldr	r2, [r3, #8]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	431a      	orrs	r2, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	431a      	orrs	r2, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	69db      	ldr	r3, [r3, #28]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004d76:	f023 030c 	bic.w	r3, r3, #12
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	6812      	ldr	r2, [r2, #0]
 8004d7e:	68f9      	ldr	r1, [r7, #12]
 8004d80:	430b      	orrs	r3, r1
 8004d82:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	699a      	ldr	r2, [r3, #24]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	430a      	orrs	r2, r1
 8004d98:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	69db      	ldr	r3, [r3, #28]
 8004d9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004da2:	f040 818b 	bne.w	80050bc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4ac1      	ldr	r2, [pc, #772]	; (80050b0 <UART_SetConfig+0x37c>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d005      	beq.n	8004dbc <UART_SetConfig+0x88>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4abf      	ldr	r2, [pc, #764]	; (80050b4 <UART_SetConfig+0x380>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	f040 80bd 	bne.w	8004f36 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004dbc:	f7fe ffc6 	bl	8003d4c <HAL_RCC_GetPCLK2Freq>
 8004dc0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	461d      	mov	r5, r3
 8004dc6:	f04f 0600 	mov.w	r6, #0
 8004dca:	46a8      	mov	r8, r5
 8004dcc:	46b1      	mov	r9, r6
 8004dce:	eb18 0308 	adds.w	r3, r8, r8
 8004dd2:	eb49 0409 	adc.w	r4, r9, r9
 8004dd6:	4698      	mov	r8, r3
 8004dd8:	46a1      	mov	r9, r4
 8004dda:	eb18 0805 	adds.w	r8, r8, r5
 8004dde:	eb49 0906 	adc.w	r9, r9, r6
 8004de2:	f04f 0100 	mov.w	r1, #0
 8004de6:	f04f 0200 	mov.w	r2, #0
 8004dea:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004dee:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004df2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004df6:	4688      	mov	r8, r1
 8004df8:	4691      	mov	r9, r2
 8004dfa:	eb18 0005 	adds.w	r0, r8, r5
 8004dfe:	eb49 0106 	adc.w	r1, r9, r6
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	461d      	mov	r5, r3
 8004e08:	f04f 0600 	mov.w	r6, #0
 8004e0c:	196b      	adds	r3, r5, r5
 8004e0e:	eb46 0406 	adc.w	r4, r6, r6
 8004e12:	461a      	mov	r2, r3
 8004e14:	4623      	mov	r3, r4
 8004e16:	f7fb fc3f 	bl	8000698 <__aeabi_uldivmod>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	460c      	mov	r4, r1
 8004e1e:	461a      	mov	r2, r3
 8004e20:	4ba5      	ldr	r3, [pc, #660]	; (80050b8 <UART_SetConfig+0x384>)
 8004e22:	fba3 2302 	umull	r2, r3, r3, r2
 8004e26:	095b      	lsrs	r3, r3, #5
 8004e28:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	461d      	mov	r5, r3
 8004e30:	f04f 0600 	mov.w	r6, #0
 8004e34:	46a9      	mov	r9, r5
 8004e36:	46b2      	mov	sl, r6
 8004e38:	eb19 0309 	adds.w	r3, r9, r9
 8004e3c:	eb4a 040a 	adc.w	r4, sl, sl
 8004e40:	4699      	mov	r9, r3
 8004e42:	46a2      	mov	sl, r4
 8004e44:	eb19 0905 	adds.w	r9, r9, r5
 8004e48:	eb4a 0a06 	adc.w	sl, sl, r6
 8004e4c:	f04f 0100 	mov.w	r1, #0
 8004e50:	f04f 0200 	mov.w	r2, #0
 8004e54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e58:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e5c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e60:	4689      	mov	r9, r1
 8004e62:	4692      	mov	sl, r2
 8004e64:	eb19 0005 	adds.w	r0, r9, r5
 8004e68:	eb4a 0106 	adc.w	r1, sl, r6
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	461d      	mov	r5, r3
 8004e72:	f04f 0600 	mov.w	r6, #0
 8004e76:	196b      	adds	r3, r5, r5
 8004e78:	eb46 0406 	adc.w	r4, r6, r6
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	4623      	mov	r3, r4
 8004e80:	f7fb fc0a 	bl	8000698 <__aeabi_uldivmod>
 8004e84:	4603      	mov	r3, r0
 8004e86:	460c      	mov	r4, r1
 8004e88:	461a      	mov	r2, r3
 8004e8a:	4b8b      	ldr	r3, [pc, #556]	; (80050b8 <UART_SetConfig+0x384>)
 8004e8c:	fba3 1302 	umull	r1, r3, r3, r2
 8004e90:	095b      	lsrs	r3, r3, #5
 8004e92:	2164      	movs	r1, #100	; 0x64
 8004e94:	fb01 f303 	mul.w	r3, r1, r3
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	00db      	lsls	r3, r3, #3
 8004e9c:	3332      	adds	r3, #50	; 0x32
 8004e9e:	4a86      	ldr	r2, [pc, #536]	; (80050b8 <UART_SetConfig+0x384>)
 8004ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea4:	095b      	lsrs	r3, r3, #5
 8004ea6:	005b      	lsls	r3, r3, #1
 8004ea8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004eac:	4498      	add	r8, r3
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	461d      	mov	r5, r3
 8004eb2:	f04f 0600 	mov.w	r6, #0
 8004eb6:	46a9      	mov	r9, r5
 8004eb8:	46b2      	mov	sl, r6
 8004eba:	eb19 0309 	adds.w	r3, r9, r9
 8004ebe:	eb4a 040a 	adc.w	r4, sl, sl
 8004ec2:	4699      	mov	r9, r3
 8004ec4:	46a2      	mov	sl, r4
 8004ec6:	eb19 0905 	adds.w	r9, r9, r5
 8004eca:	eb4a 0a06 	adc.w	sl, sl, r6
 8004ece:	f04f 0100 	mov.w	r1, #0
 8004ed2:	f04f 0200 	mov.w	r2, #0
 8004ed6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004eda:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004ede:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004ee2:	4689      	mov	r9, r1
 8004ee4:	4692      	mov	sl, r2
 8004ee6:	eb19 0005 	adds.w	r0, r9, r5
 8004eea:	eb4a 0106 	adc.w	r1, sl, r6
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	461d      	mov	r5, r3
 8004ef4:	f04f 0600 	mov.w	r6, #0
 8004ef8:	196b      	adds	r3, r5, r5
 8004efa:	eb46 0406 	adc.w	r4, r6, r6
 8004efe:	461a      	mov	r2, r3
 8004f00:	4623      	mov	r3, r4
 8004f02:	f7fb fbc9 	bl	8000698 <__aeabi_uldivmod>
 8004f06:	4603      	mov	r3, r0
 8004f08:	460c      	mov	r4, r1
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	4b6a      	ldr	r3, [pc, #424]	; (80050b8 <UART_SetConfig+0x384>)
 8004f0e:	fba3 1302 	umull	r1, r3, r3, r2
 8004f12:	095b      	lsrs	r3, r3, #5
 8004f14:	2164      	movs	r1, #100	; 0x64
 8004f16:	fb01 f303 	mul.w	r3, r1, r3
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	00db      	lsls	r3, r3, #3
 8004f1e:	3332      	adds	r3, #50	; 0x32
 8004f20:	4a65      	ldr	r2, [pc, #404]	; (80050b8 <UART_SetConfig+0x384>)
 8004f22:	fba2 2303 	umull	r2, r3, r2, r3
 8004f26:	095b      	lsrs	r3, r3, #5
 8004f28:	f003 0207 	and.w	r2, r3, #7
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4442      	add	r2, r8
 8004f32:	609a      	str	r2, [r3, #8]
 8004f34:	e26f      	b.n	8005416 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f36:	f7fe fef5 	bl	8003d24 <HAL_RCC_GetPCLK1Freq>
 8004f3a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	461d      	mov	r5, r3
 8004f40:	f04f 0600 	mov.w	r6, #0
 8004f44:	46a8      	mov	r8, r5
 8004f46:	46b1      	mov	r9, r6
 8004f48:	eb18 0308 	adds.w	r3, r8, r8
 8004f4c:	eb49 0409 	adc.w	r4, r9, r9
 8004f50:	4698      	mov	r8, r3
 8004f52:	46a1      	mov	r9, r4
 8004f54:	eb18 0805 	adds.w	r8, r8, r5
 8004f58:	eb49 0906 	adc.w	r9, r9, r6
 8004f5c:	f04f 0100 	mov.w	r1, #0
 8004f60:	f04f 0200 	mov.w	r2, #0
 8004f64:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004f68:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004f6c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004f70:	4688      	mov	r8, r1
 8004f72:	4691      	mov	r9, r2
 8004f74:	eb18 0005 	adds.w	r0, r8, r5
 8004f78:	eb49 0106 	adc.w	r1, r9, r6
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	461d      	mov	r5, r3
 8004f82:	f04f 0600 	mov.w	r6, #0
 8004f86:	196b      	adds	r3, r5, r5
 8004f88:	eb46 0406 	adc.w	r4, r6, r6
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	4623      	mov	r3, r4
 8004f90:	f7fb fb82 	bl	8000698 <__aeabi_uldivmod>
 8004f94:	4603      	mov	r3, r0
 8004f96:	460c      	mov	r4, r1
 8004f98:	461a      	mov	r2, r3
 8004f9a:	4b47      	ldr	r3, [pc, #284]	; (80050b8 <UART_SetConfig+0x384>)
 8004f9c:	fba3 2302 	umull	r2, r3, r3, r2
 8004fa0:	095b      	lsrs	r3, r3, #5
 8004fa2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	461d      	mov	r5, r3
 8004faa:	f04f 0600 	mov.w	r6, #0
 8004fae:	46a9      	mov	r9, r5
 8004fb0:	46b2      	mov	sl, r6
 8004fb2:	eb19 0309 	adds.w	r3, r9, r9
 8004fb6:	eb4a 040a 	adc.w	r4, sl, sl
 8004fba:	4699      	mov	r9, r3
 8004fbc:	46a2      	mov	sl, r4
 8004fbe:	eb19 0905 	adds.w	r9, r9, r5
 8004fc2:	eb4a 0a06 	adc.w	sl, sl, r6
 8004fc6:	f04f 0100 	mov.w	r1, #0
 8004fca:	f04f 0200 	mov.w	r2, #0
 8004fce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fd2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004fd6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004fda:	4689      	mov	r9, r1
 8004fdc:	4692      	mov	sl, r2
 8004fde:	eb19 0005 	adds.w	r0, r9, r5
 8004fe2:	eb4a 0106 	adc.w	r1, sl, r6
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	461d      	mov	r5, r3
 8004fec:	f04f 0600 	mov.w	r6, #0
 8004ff0:	196b      	adds	r3, r5, r5
 8004ff2:	eb46 0406 	adc.w	r4, r6, r6
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	4623      	mov	r3, r4
 8004ffa:	f7fb fb4d 	bl	8000698 <__aeabi_uldivmod>
 8004ffe:	4603      	mov	r3, r0
 8005000:	460c      	mov	r4, r1
 8005002:	461a      	mov	r2, r3
 8005004:	4b2c      	ldr	r3, [pc, #176]	; (80050b8 <UART_SetConfig+0x384>)
 8005006:	fba3 1302 	umull	r1, r3, r3, r2
 800500a:	095b      	lsrs	r3, r3, #5
 800500c:	2164      	movs	r1, #100	; 0x64
 800500e:	fb01 f303 	mul.w	r3, r1, r3
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	00db      	lsls	r3, r3, #3
 8005016:	3332      	adds	r3, #50	; 0x32
 8005018:	4a27      	ldr	r2, [pc, #156]	; (80050b8 <UART_SetConfig+0x384>)
 800501a:	fba2 2303 	umull	r2, r3, r2, r3
 800501e:	095b      	lsrs	r3, r3, #5
 8005020:	005b      	lsls	r3, r3, #1
 8005022:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005026:	4498      	add	r8, r3
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	461d      	mov	r5, r3
 800502c:	f04f 0600 	mov.w	r6, #0
 8005030:	46a9      	mov	r9, r5
 8005032:	46b2      	mov	sl, r6
 8005034:	eb19 0309 	adds.w	r3, r9, r9
 8005038:	eb4a 040a 	adc.w	r4, sl, sl
 800503c:	4699      	mov	r9, r3
 800503e:	46a2      	mov	sl, r4
 8005040:	eb19 0905 	adds.w	r9, r9, r5
 8005044:	eb4a 0a06 	adc.w	sl, sl, r6
 8005048:	f04f 0100 	mov.w	r1, #0
 800504c:	f04f 0200 	mov.w	r2, #0
 8005050:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005054:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005058:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800505c:	4689      	mov	r9, r1
 800505e:	4692      	mov	sl, r2
 8005060:	eb19 0005 	adds.w	r0, r9, r5
 8005064:	eb4a 0106 	adc.w	r1, sl, r6
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	461d      	mov	r5, r3
 800506e:	f04f 0600 	mov.w	r6, #0
 8005072:	196b      	adds	r3, r5, r5
 8005074:	eb46 0406 	adc.w	r4, r6, r6
 8005078:	461a      	mov	r2, r3
 800507a:	4623      	mov	r3, r4
 800507c:	f7fb fb0c 	bl	8000698 <__aeabi_uldivmod>
 8005080:	4603      	mov	r3, r0
 8005082:	460c      	mov	r4, r1
 8005084:	461a      	mov	r2, r3
 8005086:	4b0c      	ldr	r3, [pc, #48]	; (80050b8 <UART_SetConfig+0x384>)
 8005088:	fba3 1302 	umull	r1, r3, r3, r2
 800508c:	095b      	lsrs	r3, r3, #5
 800508e:	2164      	movs	r1, #100	; 0x64
 8005090:	fb01 f303 	mul.w	r3, r1, r3
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	00db      	lsls	r3, r3, #3
 8005098:	3332      	adds	r3, #50	; 0x32
 800509a:	4a07      	ldr	r2, [pc, #28]	; (80050b8 <UART_SetConfig+0x384>)
 800509c:	fba2 2303 	umull	r2, r3, r2, r3
 80050a0:	095b      	lsrs	r3, r3, #5
 80050a2:	f003 0207 	and.w	r2, r3, #7
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4442      	add	r2, r8
 80050ac:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80050ae:	e1b2      	b.n	8005416 <UART_SetConfig+0x6e2>
 80050b0:	40011000 	.word	0x40011000
 80050b4:	40011400 	.word	0x40011400
 80050b8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4ad7      	ldr	r2, [pc, #860]	; (8005420 <UART_SetConfig+0x6ec>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d005      	beq.n	80050d2 <UART_SetConfig+0x39e>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4ad6      	ldr	r2, [pc, #856]	; (8005424 <UART_SetConfig+0x6f0>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	f040 80d1 	bne.w	8005274 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80050d2:	f7fe fe3b 	bl	8003d4c <HAL_RCC_GetPCLK2Freq>
 80050d6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	469a      	mov	sl, r3
 80050dc:	f04f 0b00 	mov.w	fp, #0
 80050e0:	46d0      	mov	r8, sl
 80050e2:	46d9      	mov	r9, fp
 80050e4:	eb18 0308 	adds.w	r3, r8, r8
 80050e8:	eb49 0409 	adc.w	r4, r9, r9
 80050ec:	4698      	mov	r8, r3
 80050ee:	46a1      	mov	r9, r4
 80050f0:	eb18 080a 	adds.w	r8, r8, sl
 80050f4:	eb49 090b 	adc.w	r9, r9, fp
 80050f8:	f04f 0100 	mov.w	r1, #0
 80050fc:	f04f 0200 	mov.w	r2, #0
 8005100:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005104:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005108:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800510c:	4688      	mov	r8, r1
 800510e:	4691      	mov	r9, r2
 8005110:	eb1a 0508 	adds.w	r5, sl, r8
 8005114:	eb4b 0609 	adc.w	r6, fp, r9
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	4619      	mov	r1, r3
 800511e:	f04f 0200 	mov.w	r2, #0
 8005122:	f04f 0300 	mov.w	r3, #0
 8005126:	f04f 0400 	mov.w	r4, #0
 800512a:	0094      	lsls	r4, r2, #2
 800512c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005130:	008b      	lsls	r3, r1, #2
 8005132:	461a      	mov	r2, r3
 8005134:	4623      	mov	r3, r4
 8005136:	4628      	mov	r0, r5
 8005138:	4631      	mov	r1, r6
 800513a:	f7fb faad 	bl	8000698 <__aeabi_uldivmod>
 800513e:	4603      	mov	r3, r0
 8005140:	460c      	mov	r4, r1
 8005142:	461a      	mov	r2, r3
 8005144:	4bb8      	ldr	r3, [pc, #736]	; (8005428 <UART_SetConfig+0x6f4>)
 8005146:	fba3 2302 	umull	r2, r3, r3, r2
 800514a:	095b      	lsrs	r3, r3, #5
 800514c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	469b      	mov	fp, r3
 8005154:	f04f 0c00 	mov.w	ip, #0
 8005158:	46d9      	mov	r9, fp
 800515a:	46e2      	mov	sl, ip
 800515c:	eb19 0309 	adds.w	r3, r9, r9
 8005160:	eb4a 040a 	adc.w	r4, sl, sl
 8005164:	4699      	mov	r9, r3
 8005166:	46a2      	mov	sl, r4
 8005168:	eb19 090b 	adds.w	r9, r9, fp
 800516c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005170:	f04f 0100 	mov.w	r1, #0
 8005174:	f04f 0200 	mov.w	r2, #0
 8005178:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800517c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005180:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005184:	4689      	mov	r9, r1
 8005186:	4692      	mov	sl, r2
 8005188:	eb1b 0509 	adds.w	r5, fp, r9
 800518c:	eb4c 060a 	adc.w	r6, ip, sl
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	4619      	mov	r1, r3
 8005196:	f04f 0200 	mov.w	r2, #0
 800519a:	f04f 0300 	mov.w	r3, #0
 800519e:	f04f 0400 	mov.w	r4, #0
 80051a2:	0094      	lsls	r4, r2, #2
 80051a4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80051a8:	008b      	lsls	r3, r1, #2
 80051aa:	461a      	mov	r2, r3
 80051ac:	4623      	mov	r3, r4
 80051ae:	4628      	mov	r0, r5
 80051b0:	4631      	mov	r1, r6
 80051b2:	f7fb fa71 	bl	8000698 <__aeabi_uldivmod>
 80051b6:	4603      	mov	r3, r0
 80051b8:	460c      	mov	r4, r1
 80051ba:	461a      	mov	r2, r3
 80051bc:	4b9a      	ldr	r3, [pc, #616]	; (8005428 <UART_SetConfig+0x6f4>)
 80051be:	fba3 1302 	umull	r1, r3, r3, r2
 80051c2:	095b      	lsrs	r3, r3, #5
 80051c4:	2164      	movs	r1, #100	; 0x64
 80051c6:	fb01 f303 	mul.w	r3, r1, r3
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	011b      	lsls	r3, r3, #4
 80051ce:	3332      	adds	r3, #50	; 0x32
 80051d0:	4a95      	ldr	r2, [pc, #596]	; (8005428 <UART_SetConfig+0x6f4>)
 80051d2:	fba2 2303 	umull	r2, r3, r2, r3
 80051d6:	095b      	lsrs	r3, r3, #5
 80051d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051dc:	4498      	add	r8, r3
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	469b      	mov	fp, r3
 80051e2:	f04f 0c00 	mov.w	ip, #0
 80051e6:	46d9      	mov	r9, fp
 80051e8:	46e2      	mov	sl, ip
 80051ea:	eb19 0309 	adds.w	r3, r9, r9
 80051ee:	eb4a 040a 	adc.w	r4, sl, sl
 80051f2:	4699      	mov	r9, r3
 80051f4:	46a2      	mov	sl, r4
 80051f6:	eb19 090b 	adds.w	r9, r9, fp
 80051fa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80051fe:	f04f 0100 	mov.w	r1, #0
 8005202:	f04f 0200 	mov.w	r2, #0
 8005206:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800520a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800520e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005212:	4689      	mov	r9, r1
 8005214:	4692      	mov	sl, r2
 8005216:	eb1b 0509 	adds.w	r5, fp, r9
 800521a:	eb4c 060a 	adc.w	r6, ip, sl
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	4619      	mov	r1, r3
 8005224:	f04f 0200 	mov.w	r2, #0
 8005228:	f04f 0300 	mov.w	r3, #0
 800522c:	f04f 0400 	mov.w	r4, #0
 8005230:	0094      	lsls	r4, r2, #2
 8005232:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005236:	008b      	lsls	r3, r1, #2
 8005238:	461a      	mov	r2, r3
 800523a:	4623      	mov	r3, r4
 800523c:	4628      	mov	r0, r5
 800523e:	4631      	mov	r1, r6
 8005240:	f7fb fa2a 	bl	8000698 <__aeabi_uldivmod>
 8005244:	4603      	mov	r3, r0
 8005246:	460c      	mov	r4, r1
 8005248:	461a      	mov	r2, r3
 800524a:	4b77      	ldr	r3, [pc, #476]	; (8005428 <UART_SetConfig+0x6f4>)
 800524c:	fba3 1302 	umull	r1, r3, r3, r2
 8005250:	095b      	lsrs	r3, r3, #5
 8005252:	2164      	movs	r1, #100	; 0x64
 8005254:	fb01 f303 	mul.w	r3, r1, r3
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	011b      	lsls	r3, r3, #4
 800525c:	3332      	adds	r3, #50	; 0x32
 800525e:	4a72      	ldr	r2, [pc, #456]	; (8005428 <UART_SetConfig+0x6f4>)
 8005260:	fba2 2303 	umull	r2, r3, r2, r3
 8005264:	095b      	lsrs	r3, r3, #5
 8005266:	f003 020f 	and.w	r2, r3, #15
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4442      	add	r2, r8
 8005270:	609a      	str	r2, [r3, #8]
 8005272:	e0d0      	b.n	8005416 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005274:	f7fe fd56 	bl	8003d24 <HAL_RCC_GetPCLK1Freq>
 8005278:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	469a      	mov	sl, r3
 800527e:	f04f 0b00 	mov.w	fp, #0
 8005282:	46d0      	mov	r8, sl
 8005284:	46d9      	mov	r9, fp
 8005286:	eb18 0308 	adds.w	r3, r8, r8
 800528a:	eb49 0409 	adc.w	r4, r9, r9
 800528e:	4698      	mov	r8, r3
 8005290:	46a1      	mov	r9, r4
 8005292:	eb18 080a 	adds.w	r8, r8, sl
 8005296:	eb49 090b 	adc.w	r9, r9, fp
 800529a:	f04f 0100 	mov.w	r1, #0
 800529e:	f04f 0200 	mov.w	r2, #0
 80052a2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80052a6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80052aa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80052ae:	4688      	mov	r8, r1
 80052b0:	4691      	mov	r9, r2
 80052b2:	eb1a 0508 	adds.w	r5, sl, r8
 80052b6:	eb4b 0609 	adc.w	r6, fp, r9
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	4619      	mov	r1, r3
 80052c0:	f04f 0200 	mov.w	r2, #0
 80052c4:	f04f 0300 	mov.w	r3, #0
 80052c8:	f04f 0400 	mov.w	r4, #0
 80052cc:	0094      	lsls	r4, r2, #2
 80052ce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80052d2:	008b      	lsls	r3, r1, #2
 80052d4:	461a      	mov	r2, r3
 80052d6:	4623      	mov	r3, r4
 80052d8:	4628      	mov	r0, r5
 80052da:	4631      	mov	r1, r6
 80052dc:	f7fb f9dc 	bl	8000698 <__aeabi_uldivmod>
 80052e0:	4603      	mov	r3, r0
 80052e2:	460c      	mov	r4, r1
 80052e4:	461a      	mov	r2, r3
 80052e6:	4b50      	ldr	r3, [pc, #320]	; (8005428 <UART_SetConfig+0x6f4>)
 80052e8:	fba3 2302 	umull	r2, r3, r3, r2
 80052ec:	095b      	lsrs	r3, r3, #5
 80052ee:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	469b      	mov	fp, r3
 80052f6:	f04f 0c00 	mov.w	ip, #0
 80052fa:	46d9      	mov	r9, fp
 80052fc:	46e2      	mov	sl, ip
 80052fe:	eb19 0309 	adds.w	r3, r9, r9
 8005302:	eb4a 040a 	adc.w	r4, sl, sl
 8005306:	4699      	mov	r9, r3
 8005308:	46a2      	mov	sl, r4
 800530a:	eb19 090b 	adds.w	r9, r9, fp
 800530e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005312:	f04f 0100 	mov.w	r1, #0
 8005316:	f04f 0200 	mov.w	r2, #0
 800531a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800531e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005322:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005326:	4689      	mov	r9, r1
 8005328:	4692      	mov	sl, r2
 800532a:	eb1b 0509 	adds.w	r5, fp, r9
 800532e:	eb4c 060a 	adc.w	r6, ip, sl
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	4619      	mov	r1, r3
 8005338:	f04f 0200 	mov.w	r2, #0
 800533c:	f04f 0300 	mov.w	r3, #0
 8005340:	f04f 0400 	mov.w	r4, #0
 8005344:	0094      	lsls	r4, r2, #2
 8005346:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800534a:	008b      	lsls	r3, r1, #2
 800534c:	461a      	mov	r2, r3
 800534e:	4623      	mov	r3, r4
 8005350:	4628      	mov	r0, r5
 8005352:	4631      	mov	r1, r6
 8005354:	f7fb f9a0 	bl	8000698 <__aeabi_uldivmod>
 8005358:	4603      	mov	r3, r0
 800535a:	460c      	mov	r4, r1
 800535c:	461a      	mov	r2, r3
 800535e:	4b32      	ldr	r3, [pc, #200]	; (8005428 <UART_SetConfig+0x6f4>)
 8005360:	fba3 1302 	umull	r1, r3, r3, r2
 8005364:	095b      	lsrs	r3, r3, #5
 8005366:	2164      	movs	r1, #100	; 0x64
 8005368:	fb01 f303 	mul.w	r3, r1, r3
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	011b      	lsls	r3, r3, #4
 8005370:	3332      	adds	r3, #50	; 0x32
 8005372:	4a2d      	ldr	r2, [pc, #180]	; (8005428 <UART_SetConfig+0x6f4>)
 8005374:	fba2 2303 	umull	r2, r3, r2, r3
 8005378:	095b      	lsrs	r3, r3, #5
 800537a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800537e:	4498      	add	r8, r3
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	469b      	mov	fp, r3
 8005384:	f04f 0c00 	mov.w	ip, #0
 8005388:	46d9      	mov	r9, fp
 800538a:	46e2      	mov	sl, ip
 800538c:	eb19 0309 	adds.w	r3, r9, r9
 8005390:	eb4a 040a 	adc.w	r4, sl, sl
 8005394:	4699      	mov	r9, r3
 8005396:	46a2      	mov	sl, r4
 8005398:	eb19 090b 	adds.w	r9, r9, fp
 800539c:	eb4a 0a0c 	adc.w	sl, sl, ip
 80053a0:	f04f 0100 	mov.w	r1, #0
 80053a4:	f04f 0200 	mov.w	r2, #0
 80053a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80053b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80053b4:	4689      	mov	r9, r1
 80053b6:	4692      	mov	sl, r2
 80053b8:	eb1b 0509 	adds.w	r5, fp, r9
 80053bc:	eb4c 060a 	adc.w	r6, ip, sl
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	4619      	mov	r1, r3
 80053c6:	f04f 0200 	mov.w	r2, #0
 80053ca:	f04f 0300 	mov.w	r3, #0
 80053ce:	f04f 0400 	mov.w	r4, #0
 80053d2:	0094      	lsls	r4, r2, #2
 80053d4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80053d8:	008b      	lsls	r3, r1, #2
 80053da:	461a      	mov	r2, r3
 80053dc:	4623      	mov	r3, r4
 80053de:	4628      	mov	r0, r5
 80053e0:	4631      	mov	r1, r6
 80053e2:	f7fb f959 	bl	8000698 <__aeabi_uldivmod>
 80053e6:	4603      	mov	r3, r0
 80053e8:	460c      	mov	r4, r1
 80053ea:	461a      	mov	r2, r3
 80053ec:	4b0e      	ldr	r3, [pc, #56]	; (8005428 <UART_SetConfig+0x6f4>)
 80053ee:	fba3 1302 	umull	r1, r3, r3, r2
 80053f2:	095b      	lsrs	r3, r3, #5
 80053f4:	2164      	movs	r1, #100	; 0x64
 80053f6:	fb01 f303 	mul.w	r3, r1, r3
 80053fa:	1ad3      	subs	r3, r2, r3
 80053fc:	011b      	lsls	r3, r3, #4
 80053fe:	3332      	adds	r3, #50	; 0x32
 8005400:	4a09      	ldr	r2, [pc, #36]	; (8005428 <UART_SetConfig+0x6f4>)
 8005402:	fba2 2303 	umull	r2, r3, r2, r3
 8005406:	095b      	lsrs	r3, r3, #5
 8005408:	f003 020f 	and.w	r2, r3, #15
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4442      	add	r2, r8
 8005412:	609a      	str	r2, [r3, #8]
}
 8005414:	e7ff      	b.n	8005416 <UART_SetConfig+0x6e2>
 8005416:	bf00      	nop
 8005418:	3714      	adds	r7, #20
 800541a:	46bd      	mov	sp, r7
 800541c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005420:	40011000 	.word	0x40011000
 8005424:	40011400 	.word	0x40011400
 8005428:	51eb851f 	.word	0x51eb851f

0800542c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800542c:	b084      	sub	sp, #16
 800542e:	b580      	push	{r7, lr}
 8005430:	b084      	sub	sp, #16
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
 8005436:	f107 001c 	add.w	r0, r7, #28
 800543a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800543e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005440:	2b01      	cmp	r3, #1
 8005442:	d122      	bne.n	800548a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005448:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005458:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800546c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800546e:	2b01      	cmp	r3, #1
 8005470:	d105      	bne.n	800547e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 fa5c 	bl	800593c <USB_CoreReset>
 8005484:	4603      	mov	r3, r0
 8005486:	73fb      	strb	r3, [r7, #15]
 8005488:	e01a      	b.n	80054c0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 fa50 	bl	800593c <USB_CoreReset>
 800549c:	4603      	mov	r3, r0
 800549e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80054a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d106      	bne.n	80054b4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	639a      	str	r2, [r3, #56]	; 0x38
 80054b2:	e005      	b.n	80054c0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80054c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d10b      	bne.n	80054de <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f043 0206 	orr.w	r2, r3, #6
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	f043 0220 	orr.w	r2, r3, #32
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80054de:	7bfb      	ldrb	r3, [r7, #15]
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3710      	adds	r7, #16
 80054e4:	46bd      	mov	sp, r7
 80054e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054ea:	b004      	add	sp, #16
 80054ec:	4770      	bx	lr

080054ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80054ee:	b480      	push	{r7}
 80054f0:	b083      	sub	sp, #12
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	f023 0201 	bic.w	r2, r3, #1
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005502:	2300      	movs	r3, #0
}
 8005504:	4618      	mov	r0, r3
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b082      	sub	sp, #8
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	460b      	mov	r3, r1
 800551a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005528:	78fb      	ldrb	r3, [r7, #3]
 800552a:	2b01      	cmp	r3, #1
 800552c:	d106      	bne.n	800553c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	60da      	str	r2, [r3, #12]
 800553a:	e00b      	b.n	8005554 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800553c:	78fb      	ldrb	r3, [r7, #3]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d106      	bne.n	8005550 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	60da      	str	r2, [r3, #12]
 800554e:	e001      	b.n	8005554 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e003      	b.n	800555c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005554:	2032      	movs	r0, #50	; 0x32
 8005556:	f7fc fed3 	bl	8002300 <HAL_Delay>

  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3708      	adds	r7, #8
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005564:	b084      	sub	sp, #16
 8005566:	b580      	push	{r7, lr}
 8005568:	b086      	sub	sp, #24
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
 800556e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005572:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005576:	2300      	movs	r3, #0
 8005578:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800557e:	2300      	movs	r3, #0
 8005580:	613b      	str	r3, [r7, #16]
 8005582:	e009      	b.n	8005598 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	3340      	adds	r3, #64	; 0x40
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	4413      	add	r3, r2
 800558e:	2200      	movs	r2, #0
 8005590:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	3301      	adds	r3, #1
 8005596:	613b      	str	r3, [r7, #16]
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	2b0e      	cmp	r3, #14
 800559c:	d9f2      	bls.n	8005584 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800559e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d112      	bne.n	80055ca <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	639a      	str	r2, [r3, #56]	; 0x38
 80055c8:	e00b      	b.n	80055e2 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055da:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80055e8:	461a      	mov	r2, r3
 80055ea:	2300      	movs	r3, #0
 80055ec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055f4:	4619      	mov	r1, r3
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055fc:	461a      	mov	r2, r3
 80055fe:	680b      	ldr	r3, [r1, #0]
 8005600:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005604:	2b01      	cmp	r3, #1
 8005606:	d10c      	bne.n	8005622 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800560a:	2b00      	cmp	r3, #0
 800560c:	d104      	bne.n	8005618 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800560e:	2100      	movs	r1, #0
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 f961 	bl	80058d8 <USB_SetDevSpeed>
 8005616:	e008      	b.n	800562a <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005618:	2101      	movs	r1, #1
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 f95c 	bl	80058d8 <USB_SetDevSpeed>
 8005620:	e003      	b.n	800562a <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005622:	2103      	movs	r1, #3
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f000 f957 	bl	80058d8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800562a:	2110      	movs	r1, #16
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 f90b 	bl	8005848 <USB_FlushTxFifo>
 8005632:	4603      	mov	r3, r0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d001      	beq.n	800563c <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f000 f929 	bl	8005894 <USB_FlushRxFifo>
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d001      	beq.n	800564c <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005652:	461a      	mov	r2, r3
 8005654:	2300      	movs	r3, #0
 8005656:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800565e:	461a      	mov	r2, r3
 8005660:	2300      	movs	r3, #0
 8005662:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800566a:	461a      	mov	r2, r3
 800566c:	2300      	movs	r3, #0
 800566e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005670:	2300      	movs	r3, #0
 8005672:	613b      	str	r3, [r7, #16]
 8005674:	e043      	b.n	80056fe <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	015a      	lsls	r2, r3, #5
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	4413      	add	r3, r2
 800567e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005688:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800568c:	d118      	bne.n	80056c0 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d10a      	bne.n	80056aa <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	015a      	lsls	r2, r3, #5
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	4413      	add	r3, r2
 800569c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056a0:	461a      	mov	r2, r3
 80056a2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80056a6:	6013      	str	r3, [r2, #0]
 80056a8:	e013      	b.n	80056d2 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	015a      	lsls	r2, r3, #5
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	4413      	add	r3, r2
 80056b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056b6:	461a      	mov	r2, r3
 80056b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80056bc:	6013      	str	r3, [r2, #0]
 80056be:	e008      	b.n	80056d2 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	015a      	lsls	r2, r3, #5
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	4413      	add	r3, r2
 80056c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056cc:	461a      	mov	r2, r3
 80056ce:	2300      	movs	r3, #0
 80056d0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	015a      	lsls	r2, r3, #5
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	4413      	add	r3, r2
 80056da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056de:	461a      	mov	r2, r3
 80056e0:	2300      	movs	r3, #0
 80056e2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	015a      	lsls	r2, r3, #5
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	4413      	add	r3, r2
 80056ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056f0:	461a      	mov	r2, r3
 80056f2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80056f6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	3301      	adds	r3, #1
 80056fc:	613b      	str	r3, [r7, #16]
 80056fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005700:	693a      	ldr	r2, [r7, #16]
 8005702:	429a      	cmp	r2, r3
 8005704:	d3b7      	bcc.n	8005676 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005706:	2300      	movs	r3, #0
 8005708:	613b      	str	r3, [r7, #16]
 800570a:	e043      	b.n	8005794 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	015a      	lsls	r2, r3, #5
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	4413      	add	r3, r2
 8005714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800571e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005722:	d118      	bne.n	8005756 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d10a      	bne.n	8005740 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	015a      	lsls	r2, r3, #5
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	4413      	add	r3, r2
 8005732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005736:	461a      	mov	r2, r3
 8005738:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800573c:	6013      	str	r3, [r2, #0]
 800573e:	e013      	b.n	8005768 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	015a      	lsls	r2, r3, #5
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	4413      	add	r3, r2
 8005748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800574c:	461a      	mov	r2, r3
 800574e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005752:	6013      	str	r3, [r2, #0]
 8005754:	e008      	b.n	8005768 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	015a      	lsls	r2, r3, #5
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	4413      	add	r3, r2
 800575e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005762:	461a      	mov	r2, r3
 8005764:	2300      	movs	r3, #0
 8005766:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	015a      	lsls	r2, r3, #5
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	4413      	add	r3, r2
 8005770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005774:	461a      	mov	r2, r3
 8005776:	2300      	movs	r3, #0
 8005778:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	015a      	lsls	r2, r3, #5
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	4413      	add	r3, r2
 8005782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005786:	461a      	mov	r2, r3
 8005788:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800578c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	3301      	adds	r3, #1
 8005792:	613b      	str	r3, [r7, #16]
 8005794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005796:	693a      	ldr	r2, [r7, #16]
 8005798:	429a      	cmp	r2, r3
 800579a:	d3b7      	bcc.n	800570c <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	68fa      	ldr	r2, [r7, #12]
 80057a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057ae:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 80057b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d111      	bne.n	80057da <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057bc:	461a      	mov	r2, r3
 80057be:	4b20      	ldr	r3, [pc, #128]	; (8005840 <USB_DevInit+0x2dc>)
 80057c0:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057d4:	f043 0303 	orr.w	r3, r3, #3
 80057d8:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80057e6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80057e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d105      	bne.n	80057fa <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	699b      	ldr	r3, [r3, #24]
 80057f2:	f043 0210 	orr.w	r2, r3, #16
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	699a      	ldr	r2, [r3, #24]
 80057fe:	4b11      	ldr	r3, [pc, #68]	; (8005844 <USB_DevInit+0x2e0>)
 8005800:	4313      	orrs	r3, r2
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005808:	2b00      	cmp	r3, #0
 800580a:	d005      	beq.n	8005818 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	699b      	ldr	r3, [r3, #24]
 8005810:	f043 0208 	orr.w	r2, r3, #8
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005818:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800581a:	2b01      	cmp	r3, #1
 800581c:	d107      	bne.n	800582e <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	699b      	ldr	r3, [r3, #24]
 8005822:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005826:	f043 0304 	orr.w	r3, r3, #4
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800582e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005830:	4618      	mov	r0, r3
 8005832:	3718      	adds	r7, #24
 8005834:	46bd      	mov	sp, r7
 8005836:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800583a:	b004      	add	sp, #16
 800583c:	4770      	bx	lr
 800583e:	bf00      	nop
 8005840:	00800100 	.word	0x00800100
 8005844:	803c3800 	.word	0x803c3800

08005848 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005848:	b480      	push	{r7}
 800584a:	b085      	sub	sp, #20
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005852:	2300      	movs	r3, #0
 8005854:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	019b      	lsls	r3, r3, #6
 800585a:	f043 0220 	orr.w	r2, r3, #32
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	3301      	adds	r3, #1
 8005866:	60fb      	str	r3, [r7, #12]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	4a09      	ldr	r2, [pc, #36]	; (8005890 <USB_FlushTxFifo+0x48>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d901      	bls.n	8005874 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005870:	2303      	movs	r3, #3
 8005872:	e006      	b.n	8005882 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	f003 0320 	and.w	r3, r3, #32
 800587c:	2b20      	cmp	r3, #32
 800587e:	d0f0      	beq.n	8005862 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	3714      	adds	r7, #20
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop
 8005890:	00030d40 	.word	0x00030d40

08005894 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005894:	b480      	push	{r7}
 8005896:	b085      	sub	sp, #20
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800589c:	2300      	movs	r3, #0
 800589e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2210      	movs	r2, #16
 80058a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	3301      	adds	r3, #1
 80058aa:	60fb      	str	r3, [r7, #12]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	4a09      	ldr	r2, [pc, #36]	; (80058d4 <USB_FlushRxFifo+0x40>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d901      	bls.n	80058b8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80058b4:	2303      	movs	r3, #3
 80058b6:	e006      	b.n	80058c6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	691b      	ldr	r3, [r3, #16]
 80058bc:	f003 0310 	and.w	r3, r3, #16
 80058c0:	2b10      	cmp	r3, #16
 80058c2:	d0f0      	beq.n	80058a6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3714      	adds	r7, #20
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	00030d40 	.word	0x00030d40

080058d8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80058d8:	b480      	push	{r7}
 80058da:	b085      	sub	sp, #20
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	460b      	mov	r3, r1
 80058e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	78fb      	ldrb	r3, [r7, #3]
 80058f2:	68f9      	ldr	r1, [r7, #12]
 80058f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058f8:	4313      	orrs	r3, r2
 80058fa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3714      	adds	r7, #20
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr

0800590a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800590a:	b580      	push	{r7, lr}
 800590c:	b084      	sub	sp, #16
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005924:	f043 0302 	orr.w	r3, r3, #2
 8005928:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800592a:	2003      	movs	r0, #3
 800592c:	f7fc fce8 	bl	8002300 <HAL_Delay>

  return HAL_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3710      	adds	r7, #16
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
	...

0800593c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800593c:	b480      	push	{r7}
 800593e:	b085      	sub	sp, #20
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005944:	2300      	movs	r3, #0
 8005946:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	3301      	adds	r3, #1
 800594c:	60fb      	str	r3, [r7, #12]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	4a13      	ldr	r2, [pc, #76]	; (80059a0 <USB_CoreReset+0x64>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d901      	bls.n	800595a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e01b      	b.n	8005992 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	2b00      	cmp	r3, #0
 8005960:	daf2      	bge.n	8005948 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005962:	2300      	movs	r3, #0
 8005964:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	f043 0201 	orr.w	r2, r3, #1
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	3301      	adds	r3, #1
 8005976:	60fb      	str	r3, [r7, #12]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	4a09      	ldr	r2, [pc, #36]	; (80059a0 <USB_CoreReset+0x64>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d901      	bls.n	8005984 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005980:	2303      	movs	r3, #3
 8005982:	e006      	b.n	8005992 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	f003 0301 	and.w	r3, r3, #1
 800598c:	2b01      	cmp	r3, #1
 800598e:	d0f0      	beq.n	8005972 <USB_CoreReset+0x36>

  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3714      	adds	r7, #20
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr
 800599e:	bf00      	nop
 80059a0:	00030d40 	.word	0x00030d40

080059a4 <atoi>:
 80059a4:	220a      	movs	r2, #10
 80059a6:	2100      	movs	r1, #0
 80059a8:	f000 b8c6 	b.w	8005b38 <strtol>

080059ac <__errno>:
 80059ac:	4b01      	ldr	r3, [pc, #4]	; (80059b4 <__errno+0x8>)
 80059ae:	6818      	ldr	r0, [r3, #0]
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop
 80059b4:	20000010 	.word	0x20000010

080059b8 <__libc_init_array>:
 80059b8:	b570      	push	{r4, r5, r6, lr}
 80059ba:	4e0d      	ldr	r6, [pc, #52]	; (80059f0 <__libc_init_array+0x38>)
 80059bc:	4c0d      	ldr	r4, [pc, #52]	; (80059f4 <__libc_init_array+0x3c>)
 80059be:	1ba4      	subs	r4, r4, r6
 80059c0:	10a4      	asrs	r4, r4, #2
 80059c2:	2500      	movs	r5, #0
 80059c4:	42a5      	cmp	r5, r4
 80059c6:	d109      	bne.n	80059dc <__libc_init_array+0x24>
 80059c8:	4e0b      	ldr	r6, [pc, #44]	; (80059f8 <__libc_init_array+0x40>)
 80059ca:	4c0c      	ldr	r4, [pc, #48]	; (80059fc <__libc_init_array+0x44>)
 80059cc:	f000 ffba 	bl	8006944 <_init>
 80059d0:	1ba4      	subs	r4, r4, r6
 80059d2:	10a4      	asrs	r4, r4, #2
 80059d4:	2500      	movs	r5, #0
 80059d6:	42a5      	cmp	r5, r4
 80059d8:	d105      	bne.n	80059e6 <__libc_init_array+0x2e>
 80059da:	bd70      	pop	{r4, r5, r6, pc}
 80059dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80059e0:	4798      	blx	r3
 80059e2:	3501      	adds	r5, #1
 80059e4:	e7ee      	b.n	80059c4 <__libc_init_array+0xc>
 80059e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80059ea:	4798      	blx	r3
 80059ec:	3501      	adds	r5, #1
 80059ee:	e7f2      	b.n	80059d6 <__libc_init_array+0x1e>
 80059f0:	08006b48 	.word	0x08006b48
 80059f4:	08006b48 	.word	0x08006b48
 80059f8:	08006b48 	.word	0x08006b48
 80059fc:	08006b4c 	.word	0x08006b4c

08005a00 <memset>:
 8005a00:	4402      	add	r2, r0
 8005a02:	4603      	mov	r3, r0
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d100      	bne.n	8005a0a <memset+0xa>
 8005a08:	4770      	bx	lr
 8005a0a:	f803 1b01 	strb.w	r1, [r3], #1
 8005a0e:	e7f9      	b.n	8005a04 <memset+0x4>

08005a10 <iprintf>:
 8005a10:	b40f      	push	{r0, r1, r2, r3}
 8005a12:	4b0a      	ldr	r3, [pc, #40]	; (8005a3c <iprintf+0x2c>)
 8005a14:	b513      	push	{r0, r1, r4, lr}
 8005a16:	681c      	ldr	r4, [r3, #0]
 8005a18:	b124      	cbz	r4, 8005a24 <iprintf+0x14>
 8005a1a:	69a3      	ldr	r3, [r4, #24]
 8005a1c:	b913      	cbnz	r3, 8005a24 <iprintf+0x14>
 8005a1e:	4620      	mov	r0, r4
 8005a20:	f000 f8e0 	bl	8005be4 <__sinit>
 8005a24:	ab05      	add	r3, sp, #20
 8005a26:	9a04      	ldr	r2, [sp, #16]
 8005a28:	68a1      	ldr	r1, [r4, #8]
 8005a2a:	9301      	str	r3, [sp, #4]
 8005a2c:	4620      	mov	r0, r4
 8005a2e:	f000 f9fd 	bl	8005e2c <_vfiprintf_r>
 8005a32:	b002      	add	sp, #8
 8005a34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a38:	b004      	add	sp, #16
 8005a3a:	4770      	bx	lr
 8005a3c:	20000010 	.word	0x20000010

08005a40 <_strtol_l.isra.0>:
 8005a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a44:	4680      	mov	r8, r0
 8005a46:	4689      	mov	r9, r1
 8005a48:	4692      	mov	sl, r2
 8005a4a:	461e      	mov	r6, r3
 8005a4c:	460f      	mov	r7, r1
 8005a4e:	463d      	mov	r5, r7
 8005a50:	9808      	ldr	r0, [sp, #32]
 8005a52:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005a56:	f000 f94f 	bl	8005cf8 <__locale_ctype_ptr_l>
 8005a5a:	4420      	add	r0, r4
 8005a5c:	7843      	ldrb	r3, [r0, #1]
 8005a5e:	f013 0308 	ands.w	r3, r3, #8
 8005a62:	d132      	bne.n	8005aca <_strtol_l.isra.0+0x8a>
 8005a64:	2c2d      	cmp	r4, #45	; 0x2d
 8005a66:	d132      	bne.n	8005ace <_strtol_l.isra.0+0x8e>
 8005a68:	787c      	ldrb	r4, [r7, #1]
 8005a6a:	1cbd      	adds	r5, r7, #2
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	2e00      	cmp	r6, #0
 8005a70:	d05d      	beq.n	8005b2e <_strtol_l.isra.0+0xee>
 8005a72:	2e10      	cmp	r6, #16
 8005a74:	d109      	bne.n	8005a8a <_strtol_l.isra.0+0x4a>
 8005a76:	2c30      	cmp	r4, #48	; 0x30
 8005a78:	d107      	bne.n	8005a8a <_strtol_l.isra.0+0x4a>
 8005a7a:	782b      	ldrb	r3, [r5, #0]
 8005a7c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005a80:	2b58      	cmp	r3, #88	; 0x58
 8005a82:	d14f      	bne.n	8005b24 <_strtol_l.isra.0+0xe4>
 8005a84:	786c      	ldrb	r4, [r5, #1]
 8005a86:	2610      	movs	r6, #16
 8005a88:	3502      	adds	r5, #2
 8005a8a:	2a00      	cmp	r2, #0
 8005a8c:	bf14      	ite	ne
 8005a8e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8005a92:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8005a96:	2700      	movs	r7, #0
 8005a98:	fbb1 fcf6 	udiv	ip, r1, r6
 8005a9c:	4638      	mov	r0, r7
 8005a9e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8005aa2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8005aa6:	2b09      	cmp	r3, #9
 8005aa8:	d817      	bhi.n	8005ada <_strtol_l.isra.0+0x9a>
 8005aaa:	461c      	mov	r4, r3
 8005aac:	42a6      	cmp	r6, r4
 8005aae:	dd23      	ble.n	8005af8 <_strtol_l.isra.0+0xb8>
 8005ab0:	1c7b      	adds	r3, r7, #1
 8005ab2:	d007      	beq.n	8005ac4 <_strtol_l.isra.0+0x84>
 8005ab4:	4584      	cmp	ip, r0
 8005ab6:	d31c      	bcc.n	8005af2 <_strtol_l.isra.0+0xb2>
 8005ab8:	d101      	bne.n	8005abe <_strtol_l.isra.0+0x7e>
 8005aba:	45a6      	cmp	lr, r4
 8005abc:	db19      	blt.n	8005af2 <_strtol_l.isra.0+0xb2>
 8005abe:	fb00 4006 	mla	r0, r0, r6, r4
 8005ac2:	2701      	movs	r7, #1
 8005ac4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005ac8:	e7eb      	b.n	8005aa2 <_strtol_l.isra.0+0x62>
 8005aca:	462f      	mov	r7, r5
 8005acc:	e7bf      	b.n	8005a4e <_strtol_l.isra.0+0xe>
 8005ace:	2c2b      	cmp	r4, #43	; 0x2b
 8005ad0:	bf04      	itt	eq
 8005ad2:	1cbd      	addeq	r5, r7, #2
 8005ad4:	787c      	ldrbeq	r4, [r7, #1]
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	e7c9      	b.n	8005a6e <_strtol_l.isra.0+0x2e>
 8005ada:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005ade:	2b19      	cmp	r3, #25
 8005ae0:	d801      	bhi.n	8005ae6 <_strtol_l.isra.0+0xa6>
 8005ae2:	3c37      	subs	r4, #55	; 0x37
 8005ae4:	e7e2      	b.n	8005aac <_strtol_l.isra.0+0x6c>
 8005ae6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005aea:	2b19      	cmp	r3, #25
 8005aec:	d804      	bhi.n	8005af8 <_strtol_l.isra.0+0xb8>
 8005aee:	3c57      	subs	r4, #87	; 0x57
 8005af0:	e7dc      	b.n	8005aac <_strtol_l.isra.0+0x6c>
 8005af2:	f04f 37ff 	mov.w	r7, #4294967295
 8005af6:	e7e5      	b.n	8005ac4 <_strtol_l.isra.0+0x84>
 8005af8:	1c7b      	adds	r3, r7, #1
 8005afa:	d108      	bne.n	8005b0e <_strtol_l.isra.0+0xce>
 8005afc:	2322      	movs	r3, #34	; 0x22
 8005afe:	f8c8 3000 	str.w	r3, [r8]
 8005b02:	4608      	mov	r0, r1
 8005b04:	f1ba 0f00 	cmp.w	sl, #0
 8005b08:	d107      	bne.n	8005b1a <_strtol_l.isra.0+0xda>
 8005b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b0e:	b102      	cbz	r2, 8005b12 <_strtol_l.isra.0+0xd2>
 8005b10:	4240      	negs	r0, r0
 8005b12:	f1ba 0f00 	cmp.w	sl, #0
 8005b16:	d0f8      	beq.n	8005b0a <_strtol_l.isra.0+0xca>
 8005b18:	b10f      	cbz	r7, 8005b1e <_strtol_l.isra.0+0xde>
 8005b1a:	f105 39ff 	add.w	r9, r5, #4294967295
 8005b1e:	f8ca 9000 	str.w	r9, [sl]
 8005b22:	e7f2      	b.n	8005b0a <_strtol_l.isra.0+0xca>
 8005b24:	2430      	movs	r4, #48	; 0x30
 8005b26:	2e00      	cmp	r6, #0
 8005b28:	d1af      	bne.n	8005a8a <_strtol_l.isra.0+0x4a>
 8005b2a:	2608      	movs	r6, #8
 8005b2c:	e7ad      	b.n	8005a8a <_strtol_l.isra.0+0x4a>
 8005b2e:	2c30      	cmp	r4, #48	; 0x30
 8005b30:	d0a3      	beq.n	8005a7a <_strtol_l.isra.0+0x3a>
 8005b32:	260a      	movs	r6, #10
 8005b34:	e7a9      	b.n	8005a8a <_strtol_l.isra.0+0x4a>
	...

08005b38 <strtol>:
 8005b38:	4b08      	ldr	r3, [pc, #32]	; (8005b5c <strtol+0x24>)
 8005b3a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b3c:	681c      	ldr	r4, [r3, #0]
 8005b3e:	4d08      	ldr	r5, [pc, #32]	; (8005b60 <strtol+0x28>)
 8005b40:	6a23      	ldr	r3, [r4, #32]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	bf08      	it	eq
 8005b46:	462b      	moveq	r3, r5
 8005b48:	9300      	str	r3, [sp, #0]
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	460a      	mov	r2, r1
 8005b4e:	4601      	mov	r1, r0
 8005b50:	4620      	mov	r0, r4
 8005b52:	f7ff ff75 	bl	8005a40 <_strtol_l.isra.0>
 8005b56:	b003      	add	sp, #12
 8005b58:	bd30      	pop	{r4, r5, pc}
 8005b5a:	bf00      	nop
 8005b5c:	20000010 	.word	0x20000010
 8005b60:	20000074 	.word	0x20000074

08005b64 <std>:
 8005b64:	2300      	movs	r3, #0
 8005b66:	b510      	push	{r4, lr}
 8005b68:	4604      	mov	r4, r0
 8005b6a:	e9c0 3300 	strd	r3, r3, [r0]
 8005b6e:	6083      	str	r3, [r0, #8]
 8005b70:	8181      	strh	r1, [r0, #12]
 8005b72:	6643      	str	r3, [r0, #100]	; 0x64
 8005b74:	81c2      	strh	r2, [r0, #14]
 8005b76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b7a:	6183      	str	r3, [r0, #24]
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	2208      	movs	r2, #8
 8005b80:	305c      	adds	r0, #92	; 0x5c
 8005b82:	f7ff ff3d 	bl	8005a00 <memset>
 8005b86:	4b05      	ldr	r3, [pc, #20]	; (8005b9c <std+0x38>)
 8005b88:	6263      	str	r3, [r4, #36]	; 0x24
 8005b8a:	4b05      	ldr	r3, [pc, #20]	; (8005ba0 <std+0x3c>)
 8005b8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b8e:	4b05      	ldr	r3, [pc, #20]	; (8005ba4 <std+0x40>)
 8005b90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b92:	4b05      	ldr	r3, [pc, #20]	; (8005ba8 <std+0x44>)
 8005b94:	6224      	str	r4, [r4, #32]
 8005b96:	6323      	str	r3, [r4, #48]	; 0x30
 8005b98:	bd10      	pop	{r4, pc}
 8005b9a:	bf00      	nop
 8005b9c:	08006389 	.word	0x08006389
 8005ba0:	080063ab 	.word	0x080063ab
 8005ba4:	080063e3 	.word	0x080063e3
 8005ba8:	08006407 	.word	0x08006407

08005bac <_cleanup_r>:
 8005bac:	4901      	ldr	r1, [pc, #4]	; (8005bb4 <_cleanup_r+0x8>)
 8005bae:	f000 b885 	b.w	8005cbc <_fwalk_reent>
 8005bb2:	bf00      	nop
 8005bb4:	080066fd 	.word	0x080066fd

08005bb8 <__sfmoreglue>:
 8005bb8:	b570      	push	{r4, r5, r6, lr}
 8005bba:	1e4a      	subs	r2, r1, #1
 8005bbc:	2568      	movs	r5, #104	; 0x68
 8005bbe:	4355      	muls	r5, r2
 8005bc0:	460e      	mov	r6, r1
 8005bc2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005bc6:	f000 f8ad 	bl	8005d24 <_malloc_r>
 8005bca:	4604      	mov	r4, r0
 8005bcc:	b140      	cbz	r0, 8005be0 <__sfmoreglue+0x28>
 8005bce:	2100      	movs	r1, #0
 8005bd0:	e9c0 1600 	strd	r1, r6, [r0]
 8005bd4:	300c      	adds	r0, #12
 8005bd6:	60a0      	str	r0, [r4, #8]
 8005bd8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005bdc:	f7ff ff10 	bl	8005a00 <memset>
 8005be0:	4620      	mov	r0, r4
 8005be2:	bd70      	pop	{r4, r5, r6, pc}

08005be4 <__sinit>:
 8005be4:	6983      	ldr	r3, [r0, #24]
 8005be6:	b510      	push	{r4, lr}
 8005be8:	4604      	mov	r4, r0
 8005bea:	bb33      	cbnz	r3, 8005c3a <__sinit+0x56>
 8005bec:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005bf0:	6503      	str	r3, [r0, #80]	; 0x50
 8005bf2:	4b12      	ldr	r3, [pc, #72]	; (8005c3c <__sinit+0x58>)
 8005bf4:	4a12      	ldr	r2, [pc, #72]	; (8005c40 <__sinit+0x5c>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	6282      	str	r2, [r0, #40]	; 0x28
 8005bfa:	4298      	cmp	r0, r3
 8005bfc:	bf04      	itt	eq
 8005bfe:	2301      	moveq	r3, #1
 8005c00:	6183      	streq	r3, [r0, #24]
 8005c02:	f000 f81f 	bl	8005c44 <__sfp>
 8005c06:	6060      	str	r0, [r4, #4]
 8005c08:	4620      	mov	r0, r4
 8005c0a:	f000 f81b 	bl	8005c44 <__sfp>
 8005c0e:	60a0      	str	r0, [r4, #8]
 8005c10:	4620      	mov	r0, r4
 8005c12:	f000 f817 	bl	8005c44 <__sfp>
 8005c16:	2200      	movs	r2, #0
 8005c18:	60e0      	str	r0, [r4, #12]
 8005c1a:	2104      	movs	r1, #4
 8005c1c:	6860      	ldr	r0, [r4, #4]
 8005c1e:	f7ff ffa1 	bl	8005b64 <std>
 8005c22:	2201      	movs	r2, #1
 8005c24:	2109      	movs	r1, #9
 8005c26:	68a0      	ldr	r0, [r4, #8]
 8005c28:	f7ff ff9c 	bl	8005b64 <std>
 8005c2c:	2202      	movs	r2, #2
 8005c2e:	2112      	movs	r1, #18
 8005c30:	68e0      	ldr	r0, [r4, #12]
 8005c32:	f7ff ff97 	bl	8005b64 <std>
 8005c36:	2301      	movs	r3, #1
 8005c38:	61a3      	str	r3, [r4, #24]
 8005c3a:	bd10      	pop	{r4, pc}
 8005c3c:	0800699c 	.word	0x0800699c
 8005c40:	08005bad 	.word	0x08005bad

08005c44 <__sfp>:
 8005c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c46:	4b1b      	ldr	r3, [pc, #108]	; (8005cb4 <__sfp+0x70>)
 8005c48:	681e      	ldr	r6, [r3, #0]
 8005c4a:	69b3      	ldr	r3, [r6, #24]
 8005c4c:	4607      	mov	r7, r0
 8005c4e:	b913      	cbnz	r3, 8005c56 <__sfp+0x12>
 8005c50:	4630      	mov	r0, r6
 8005c52:	f7ff ffc7 	bl	8005be4 <__sinit>
 8005c56:	3648      	adds	r6, #72	; 0x48
 8005c58:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005c5c:	3b01      	subs	r3, #1
 8005c5e:	d503      	bpl.n	8005c68 <__sfp+0x24>
 8005c60:	6833      	ldr	r3, [r6, #0]
 8005c62:	b133      	cbz	r3, 8005c72 <__sfp+0x2e>
 8005c64:	6836      	ldr	r6, [r6, #0]
 8005c66:	e7f7      	b.n	8005c58 <__sfp+0x14>
 8005c68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005c6c:	b16d      	cbz	r5, 8005c8a <__sfp+0x46>
 8005c6e:	3468      	adds	r4, #104	; 0x68
 8005c70:	e7f4      	b.n	8005c5c <__sfp+0x18>
 8005c72:	2104      	movs	r1, #4
 8005c74:	4638      	mov	r0, r7
 8005c76:	f7ff ff9f 	bl	8005bb8 <__sfmoreglue>
 8005c7a:	6030      	str	r0, [r6, #0]
 8005c7c:	2800      	cmp	r0, #0
 8005c7e:	d1f1      	bne.n	8005c64 <__sfp+0x20>
 8005c80:	230c      	movs	r3, #12
 8005c82:	603b      	str	r3, [r7, #0]
 8005c84:	4604      	mov	r4, r0
 8005c86:	4620      	mov	r0, r4
 8005c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c8a:	4b0b      	ldr	r3, [pc, #44]	; (8005cb8 <__sfp+0x74>)
 8005c8c:	6665      	str	r5, [r4, #100]	; 0x64
 8005c8e:	e9c4 5500 	strd	r5, r5, [r4]
 8005c92:	60a5      	str	r5, [r4, #8]
 8005c94:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005c98:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005c9c:	2208      	movs	r2, #8
 8005c9e:	4629      	mov	r1, r5
 8005ca0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005ca4:	f7ff feac 	bl	8005a00 <memset>
 8005ca8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005cac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005cb0:	e7e9      	b.n	8005c86 <__sfp+0x42>
 8005cb2:	bf00      	nop
 8005cb4:	0800699c 	.word	0x0800699c
 8005cb8:	ffff0001 	.word	0xffff0001

08005cbc <_fwalk_reent>:
 8005cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cc0:	4680      	mov	r8, r0
 8005cc2:	4689      	mov	r9, r1
 8005cc4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005cc8:	2600      	movs	r6, #0
 8005cca:	b914      	cbnz	r4, 8005cd2 <_fwalk_reent+0x16>
 8005ccc:	4630      	mov	r0, r6
 8005cce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cd2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005cd6:	3f01      	subs	r7, #1
 8005cd8:	d501      	bpl.n	8005cde <_fwalk_reent+0x22>
 8005cda:	6824      	ldr	r4, [r4, #0]
 8005cdc:	e7f5      	b.n	8005cca <_fwalk_reent+0xe>
 8005cde:	89ab      	ldrh	r3, [r5, #12]
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d907      	bls.n	8005cf4 <_fwalk_reent+0x38>
 8005ce4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ce8:	3301      	adds	r3, #1
 8005cea:	d003      	beq.n	8005cf4 <_fwalk_reent+0x38>
 8005cec:	4629      	mov	r1, r5
 8005cee:	4640      	mov	r0, r8
 8005cf0:	47c8      	blx	r9
 8005cf2:	4306      	orrs	r6, r0
 8005cf4:	3568      	adds	r5, #104	; 0x68
 8005cf6:	e7ee      	b.n	8005cd6 <_fwalk_reent+0x1a>

08005cf8 <__locale_ctype_ptr_l>:
 8005cf8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005cfc:	4770      	bx	lr

08005cfe <__ascii_mbtowc>:
 8005cfe:	b082      	sub	sp, #8
 8005d00:	b901      	cbnz	r1, 8005d04 <__ascii_mbtowc+0x6>
 8005d02:	a901      	add	r1, sp, #4
 8005d04:	b142      	cbz	r2, 8005d18 <__ascii_mbtowc+0x1a>
 8005d06:	b14b      	cbz	r3, 8005d1c <__ascii_mbtowc+0x1e>
 8005d08:	7813      	ldrb	r3, [r2, #0]
 8005d0a:	600b      	str	r3, [r1, #0]
 8005d0c:	7812      	ldrb	r2, [r2, #0]
 8005d0e:	1c10      	adds	r0, r2, #0
 8005d10:	bf18      	it	ne
 8005d12:	2001      	movne	r0, #1
 8005d14:	b002      	add	sp, #8
 8005d16:	4770      	bx	lr
 8005d18:	4610      	mov	r0, r2
 8005d1a:	e7fb      	b.n	8005d14 <__ascii_mbtowc+0x16>
 8005d1c:	f06f 0001 	mvn.w	r0, #1
 8005d20:	e7f8      	b.n	8005d14 <__ascii_mbtowc+0x16>
	...

08005d24 <_malloc_r>:
 8005d24:	b570      	push	{r4, r5, r6, lr}
 8005d26:	1ccd      	adds	r5, r1, #3
 8005d28:	f025 0503 	bic.w	r5, r5, #3
 8005d2c:	3508      	adds	r5, #8
 8005d2e:	2d0c      	cmp	r5, #12
 8005d30:	bf38      	it	cc
 8005d32:	250c      	movcc	r5, #12
 8005d34:	2d00      	cmp	r5, #0
 8005d36:	4606      	mov	r6, r0
 8005d38:	db01      	blt.n	8005d3e <_malloc_r+0x1a>
 8005d3a:	42a9      	cmp	r1, r5
 8005d3c:	d903      	bls.n	8005d46 <_malloc_r+0x22>
 8005d3e:	230c      	movs	r3, #12
 8005d40:	6033      	str	r3, [r6, #0]
 8005d42:	2000      	movs	r0, #0
 8005d44:	bd70      	pop	{r4, r5, r6, pc}
 8005d46:	f000 fd79 	bl	800683c <__malloc_lock>
 8005d4a:	4a21      	ldr	r2, [pc, #132]	; (8005dd0 <_malloc_r+0xac>)
 8005d4c:	6814      	ldr	r4, [r2, #0]
 8005d4e:	4621      	mov	r1, r4
 8005d50:	b991      	cbnz	r1, 8005d78 <_malloc_r+0x54>
 8005d52:	4c20      	ldr	r4, [pc, #128]	; (8005dd4 <_malloc_r+0xb0>)
 8005d54:	6823      	ldr	r3, [r4, #0]
 8005d56:	b91b      	cbnz	r3, 8005d60 <_malloc_r+0x3c>
 8005d58:	4630      	mov	r0, r6
 8005d5a:	f000 fb05 	bl	8006368 <_sbrk_r>
 8005d5e:	6020      	str	r0, [r4, #0]
 8005d60:	4629      	mov	r1, r5
 8005d62:	4630      	mov	r0, r6
 8005d64:	f000 fb00 	bl	8006368 <_sbrk_r>
 8005d68:	1c43      	adds	r3, r0, #1
 8005d6a:	d124      	bne.n	8005db6 <_malloc_r+0x92>
 8005d6c:	230c      	movs	r3, #12
 8005d6e:	6033      	str	r3, [r6, #0]
 8005d70:	4630      	mov	r0, r6
 8005d72:	f000 fd64 	bl	800683e <__malloc_unlock>
 8005d76:	e7e4      	b.n	8005d42 <_malloc_r+0x1e>
 8005d78:	680b      	ldr	r3, [r1, #0]
 8005d7a:	1b5b      	subs	r3, r3, r5
 8005d7c:	d418      	bmi.n	8005db0 <_malloc_r+0x8c>
 8005d7e:	2b0b      	cmp	r3, #11
 8005d80:	d90f      	bls.n	8005da2 <_malloc_r+0x7e>
 8005d82:	600b      	str	r3, [r1, #0]
 8005d84:	50cd      	str	r5, [r1, r3]
 8005d86:	18cc      	adds	r4, r1, r3
 8005d88:	4630      	mov	r0, r6
 8005d8a:	f000 fd58 	bl	800683e <__malloc_unlock>
 8005d8e:	f104 000b 	add.w	r0, r4, #11
 8005d92:	1d23      	adds	r3, r4, #4
 8005d94:	f020 0007 	bic.w	r0, r0, #7
 8005d98:	1ac3      	subs	r3, r0, r3
 8005d9a:	d0d3      	beq.n	8005d44 <_malloc_r+0x20>
 8005d9c:	425a      	negs	r2, r3
 8005d9e:	50e2      	str	r2, [r4, r3]
 8005da0:	e7d0      	b.n	8005d44 <_malloc_r+0x20>
 8005da2:	428c      	cmp	r4, r1
 8005da4:	684b      	ldr	r3, [r1, #4]
 8005da6:	bf16      	itet	ne
 8005da8:	6063      	strne	r3, [r4, #4]
 8005daa:	6013      	streq	r3, [r2, #0]
 8005dac:	460c      	movne	r4, r1
 8005dae:	e7eb      	b.n	8005d88 <_malloc_r+0x64>
 8005db0:	460c      	mov	r4, r1
 8005db2:	6849      	ldr	r1, [r1, #4]
 8005db4:	e7cc      	b.n	8005d50 <_malloc_r+0x2c>
 8005db6:	1cc4      	adds	r4, r0, #3
 8005db8:	f024 0403 	bic.w	r4, r4, #3
 8005dbc:	42a0      	cmp	r0, r4
 8005dbe:	d005      	beq.n	8005dcc <_malloc_r+0xa8>
 8005dc0:	1a21      	subs	r1, r4, r0
 8005dc2:	4630      	mov	r0, r6
 8005dc4:	f000 fad0 	bl	8006368 <_sbrk_r>
 8005dc8:	3001      	adds	r0, #1
 8005dca:	d0cf      	beq.n	8005d6c <_malloc_r+0x48>
 8005dcc:	6025      	str	r5, [r4, #0]
 8005dce:	e7db      	b.n	8005d88 <_malloc_r+0x64>
 8005dd0:	20000224 	.word	0x20000224
 8005dd4:	20000228 	.word	0x20000228

08005dd8 <__sfputc_r>:
 8005dd8:	6893      	ldr	r3, [r2, #8]
 8005dda:	3b01      	subs	r3, #1
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	b410      	push	{r4}
 8005de0:	6093      	str	r3, [r2, #8]
 8005de2:	da08      	bge.n	8005df6 <__sfputc_r+0x1e>
 8005de4:	6994      	ldr	r4, [r2, #24]
 8005de6:	42a3      	cmp	r3, r4
 8005de8:	db01      	blt.n	8005dee <__sfputc_r+0x16>
 8005dea:	290a      	cmp	r1, #10
 8005dec:	d103      	bne.n	8005df6 <__sfputc_r+0x1e>
 8005dee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005df2:	f000 bb0d 	b.w	8006410 <__swbuf_r>
 8005df6:	6813      	ldr	r3, [r2, #0]
 8005df8:	1c58      	adds	r0, r3, #1
 8005dfa:	6010      	str	r0, [r2, #0]
 8005dfc:	7019      	strb	r1, [r3, #0]
 8005dfe:	4608      	mov	r0, r1
 8005e00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e04:	4770      	bx	lr

08005e06 <__sfputs_r>:
 8005e06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e08:	4606      	mov	r6, r0
 8005e0a:	460f      	mov	r7, r1
 8005e0c:	4614      	mov	r4, r2
 8005e0e:	18d5      	adds	r5, r2, r3
 8005e10:	42ac      	cmp	r4, r5
 8005e12:	d101      	bne.n	8005e18 <__sfputs_r+0x12>
 8005e14:	2000      	movs	r0, #0
 8005e16:	e007      	b.n	8005e28 <__sfputs_r+0x22>
 8005e18:	463a      	mov	r2, r7
 8005e1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e1e:	4630      	mov	r0, r6
 8005e20:	f7ff ffda 	bl	8005dd8 <__sfputc_r>
 8005e24:	1c43      	adds	r3, r0, #1
 8005e26:	d1f3      	bne.n	8005e10 <__sfputs_r+0xa>
 8005e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005e2c <_vfiprintf_r>:
 8005e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e30:	460c      	mov	r4, r1
 8005e32:	b09d      	sub	sp, #116	; 0x74
 8005e34:	4617      	mov	r7, r2
 8005e36:	461d      	mov	r5, r3
 8005e38:	4606      	mov	r6, r0
 8005e3a:	b118      	cbz	r0, 8005e44 <_vfiprintf_r+0x18>
 8005e3c:	6983      	ldr	r3, [r0, #24]
 8005e3e:	b90b      	cbnz	r3, 8005e44 <_vfiprintf_r+0x18>
 8005e40:	f7ff fed0 	bl	8005be4 <__sinit>
 8005e44:	4b7c      	ldr	r3, [pc, #496]	; (8006038 <_vfiprintf_r+0x20c>)
 8005e46:	429c      	cmp	r4, r3
 8005e48:	d158      	bne.n	8005efc <_vfiprintf_r+0xd0>
 8005e4a:	6874      	ldr	r4, [r6, #4]
 8005e4c:	89a3      	ldrh	r3, [r4, #12]
 8005e4e:	0718      	lsls	r0, r3, #28
 8005e50:	d55e      	bpl.n	8005f10 <_vfiprintf_r+0xe4>
 8005e52:	6923      	ldr	r3, [r4, #16]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d05b      	beq.n	8005f10 <_vfiprintf_r+0xe4>
 8005e58:	2300      	movs	r3, #0
 8005e5a:	9309      	str	r3, [sp, #36]	; 0x24
 8005e5c:	2320      	movs	r3, #32
 8005e5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e62:	2330      	movs	r3, #48	; 0x30
 8005e64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e68:	9503      	str	r5, [sp, #12]
 8005e6a:	f04f 0b01 	mov.w	fp, #1
 8005e6e:	46b8      	mov	r8, r7
 8005e70:	4645      	mov	r5, r8
 8005e72:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005e76:	b10b      	cbz	r3, 8005e7c <_vfiprintf_r+0x50>
 8005e78:	2b25      	cmp	r3, #37	; 0x25
 8005e7a:	d154      	bne.n	8005f26 <_vfiprintf_r+0xfa>
 8005e7c:	ebb8 0a07 	subs.w	sl, r8, r7
 8005e80:	d00b      	beq.n	8005e9a <_vfiprintf_r+0x6e>
 8005e82:	4653      	mov	r3, sl
 8005e84:	463a      	mov	r2, r7
 8005e86:	4621      	mov	r1, r4
 8005e88:	4630      	mov	r0, r6
 8005e8a:	f7ff ffbc 	bl	8005e06 <__sfputs_r>
 8005e8e:	3001      	adds	r0, #1
 8005e90:	f000 80c2 	beq.w	8006018 <_vfiprintf_r+0x1ec>
 8005e94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e96:	4453      	add	r3, sl
 8005e98:	9309      	str	r3, [sp, #36]	; 0x24
 8005e9a:	f898 3000 	ldrb.w	r3, [r8]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	f000 80ba 	beq.w	8006018 <_vfiprintf_r+0x1ec>
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	f04f 32ff 	mov.w	r2, #4294967295
 8005eaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005eae:	9304      	str	r3, [sp, #16]
 8005eb0:	9307      	str	r3, [sp, #28]
 8005eb2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005eb6:	931a      	str	r3, [sp, #104]	; 0x68
 8005eb8:	46a8      	mov	r8, r5
 8005eba:	2205      	movs	r2, #5
 8005ebc:	f818 1b01 	ldrb.w	r1, [r8], #1
 8005ec0:	485e      	ldr	r0, [pc, #376]	; (800603c <_vfiprintf_r+0x210>)
 8005ec2:	f7fa f995 	bl	80001f0 <memchr>
 8005ec6:	9b04      	ldr	r3, [sp, #16]
 8005ec8:	bb78      	cbnz	r0, 8005f2a <_vfiprintf_r+0xfe>
 8005eca:	06d9      	lsls	r1, r3, #27
 8005ecc:	bf44      	itt	mi
 8005ece:	2220      	movmi	r2, #32
 8005ed0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005ed4:	071a      	lsls	r2, r3, #28
 8005ed6:	bf44      	itt	mi
 8005ed8:	222b      	movmi	r2, #43	; 0x2b
 8005eda:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005ede:	782a      	ldrb	r2, [r5, #0]
 8005ee0:	2a2a      	cmp	r2, #42	; 0x2a
 8005ee2:	d02a      	beq.n	8005f3a <_vfiprintf_r+0x10e>
 8005ee4:	9a07      	ldr	r2, [sp, #28]
 8005ee6:	46a8      	mov	r8, r5
 8005ee8:	2000      	movs	r0, #0
 8005eea:	250a      	movs	r5, #10
 8005eec:	4641      	mov	r1, r8
 8005eee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ef2:	3b30      	subs	r3, #48	; 0x30
 8005ef4:	2b09      	cmp	r3, #9
 8005ef6:	d969      	bls.n	8005fcc <_vfiprintf_r+0x1a0>
 8005ef8:	b360      	cbz	r0, 8005f54 <_vfiprintf_r+0x128>
 8005efa:	e024      	b.n	8005f46 <_vfiprintf_r+0x11a>
 8005efc:	4b50      	ldr	r3, [pc, #320]	; (8006040 <_vfiprintf_r+0x214>)
 8005efe:	429c      	cmp	r4, r3
 8005f00:	d101      	bne.n	8005f06 <_vfiprintf_r+0xda>
 8005f02:	68b4      	ldr	r4, [r6, #8]
 8005f04:	e7a2      	b.n	8005e4c <_vfiprintf_r+0x20>
 8005f06:	4b4f      	ldr	r3, [pc, #316]	; (8006044 <_vfiprintf_r+0x218>)
 8005f08:	429c      	cmp	r4, r3
 8005f0a:	bf08      	it	eq
 8005f0c:	68f4      	ldreq	r4, [r6, #12]
 8005f0e:	e79d      	b.n	8005e4c <_vfiprintf_r+0x20>
 8005f10:	4621      	mov	r1, r4
 8005f12:	4630      	mov	r0, r6
 8005f14:	f000 faee 	bl	80064f4 <__swsetup_r>
 8005f18:	2800      	cmp	r0, #0
 8005f1a:	d09d      	beq.n	8005e58 <_vfiprintf_r+0x2c>
 8005f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f20:	b01d      	add	sp, #116	; 0x74
 8005f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f26:	46a8      	mov	r8, r5
 8005f28:	e7a2      	b.n	8005e70 <_vfiprintf_r+0x44>
 8005f2a:	4a44      	ldr	r2, [pc, #272]	; (800603c <_vfiprintf_r+0x210>)
 8005f2c:	1a80      	subs	r0, r0, r2
 8005f2e:	fa0b f000 	lsl.w	r0, fp, r0
 8005f32:	4318      	orrs	r0, r3
 8005f34:	9004      	str	r0, [sp, #16]
 8005f36:	4645      	mov	r5, r8
 8005f38:	e7be      	b.n	8005eb8 <_vfiprintf_r+0x8c>
 8005f3a:	9a03      	ldr	r2, [sp, #12]
 8005f3c:	1d11      	adds	r1, r2, #4
 8005f3e:	6812      	ldr	r2, [r2, #0]
 8005f40:	9103      	str	r1, [sp, #12]
 8005f42:	2a00      	cmp	r2, #0
 8005f44:	db01      	blt.n	8005f4a <_vfiprintf_r+0x11e>
 8005f46:	9207      	str	r2, [sp, #28]
 8005f48:	e004      	b.n	8005f54 <_vfiprintf_r+0x128>
 8005f4a:	4252      	negs	r2, r2
 8005f4c:	f043 0302 	orr.w	r3, r3, #2
 8005f50:	9207      	str	r2, [sp, #28]
 8005f52:	9304      	str	r3, [sp, #16]
 8005f54:	f898 3000 	ldrb.w	r3, [r8]
 8005f58:	2b2e      	cmp	r3, #46	; 0x2e
 8005f5a:	d10e      	bne.n	8005f7a <_vfiprintf_r+0x14e>
 8005f5c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005f60:	2b2a      	cmp	r3, #42	; 0x2a
 8005f62:	d138      	bne.n	8005fd6 <_vfiprintf_r+0x1aa>
 8005f64:	9b03      	ldr	r3, [sp, #12]
 8005f66:	1d1a      	adds	r2, r3, #4
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	9203      	str	r2, [sp, #12]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	bfb8      	it	lt
 8005f70:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f74:	f108 0802 	add.w	r8, r8, #2
 8005f78:	9305      	str	r3, [sp, #20]
 8005f7a:	4d33      	ldr	r5, [pc, #204]	; (8006048 <_vfiprintf_r+0x21c>)
 8005f7c:	f898 1000 	ldrb.w	r1, [r8]
 8005f80:	2203      	movs	r2, #3
 8005f82:	4628      	mov	r0, r5
 8005f84:	f7fa f934 	bl	80001f0 <memchr>
 8005f88:	b140      	cbz	r0, 8005f9c <_vfiprintf_r+0x170>
 8005f8a:	2340      	movs	r3, #64	; 0x40
 8005f8c:	1b40      	subs	r0, r0, r5
 8005f8e:	fa03 f000 	lsl.w	r0, r3, r0
 8005f92:	9b04      	ldr	r3, [sp, #16]
 8005f94:	4303      	orrs	r3, r0
 8005f96:	f108 0801 	add.w	r8, r8, #1
 8005f9a:	9304      	str	r3, [sp, #16]
 8005f9c:	f898 1000 	ldrb.w	r1, [r8]
 8005fa0:	482a      	ldr	r0, [pc, #168]	; (800604c <_vfiprintf_r+0x220>)
 8005fa2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005fa6:	2206      	movs	r2, #6
 8005fa8:	f108 0701 	add.w	r7, r8, #1
 8005fac:	f7fa f920 	bl	80001f0 <memchr>
 8005fb0:	2800      	cmp	r0, #0
 8005fb2:	d037      	beq.n	8006024 <_vfiprintf_r+0x1f8>
 8005fb4:	4b26      	ldr	r3, [pc, #152]	; (8006050 <_vfiprintf_r+0x224>)
 8005fb6:	bb1b      	cbnz	r3, 8006000 <_vfiprintf_r+0x1d4>
 8005fb8:	9b03      	ldr	r3, [sp, #12]
 8005fba:	3307      	adds	r3, #7
 8005fbc:	f023 0307 	bic.w	r3, r3, #7
 8005fc0:	3308      	adds	r3, #8
 8005fc2:	9303      	str	r3, [sp, #12]
 8005fc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fc6:	444b      	add	r3, r9
 8005fc8:	9309      	str	r3, [sp, #36]	; 0x24
 8005fca:	e750      	b.n	8005e6e <_vfiprintf_r+0x42>
 8005fcc:	fb05 3202 	mla	r2, r5, r2, r3
 8005fd0:	2001      	movs	r0, #1
 8005fd2:	4688      	mov	r8, r1
 8005fd4:	e78a      	b.n	8005eec <_vfiprintf_r+0xc0>
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	f108 0801 	add.w	r8, r8, #1
 8005fdc:	9305      	str	r3, [sp, #20]
 8005fde:	4619      	mov	r1, r3
 8005fe0:	250a      	movs	r5, #10
 8005fe2:	4640      	mov	r0, r8
 8005fe4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fe8:	3a30      	subs	r2, #48	; 0x30
 8005fea:	2a09      	cmp	r2, #9
 8005fec:	d903      	bls.n	8005ff6 <_vfiprintf_r+0x1ca>
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d0c3      	beq.n	8005f7a <_vfiprintf_r+0x14e>
 8005ff2:	9105      	str	r1, [sp, #20]
 8005ff4:	e7c1      	b.n	8005f7a <_vfiprintf_r+0x14e>
 8005ff6:	fb05 2101 	mla	r1, r5, r1, r2
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	4680      	mov	r8, r0
 8005ffe:	e7f0      	b.n	8005fe2 <_vfiprintf_r+0x1b6>
 8006000:	ab03      	add	r3, sp, #12
 8006002:	9300      	str	r3, [sp, #0]
 8006004:	4622      	mov	r2, r4
 8006006:	4b13      	ldr	r3, [pc, #76]	; (8006054 <_vfiprintf_r+0x228>)
 8006008:	a904      	add	r1, sp, #16
 800600a:	4630      	mov	r0, r6
 800600c:	f3af 8000 	nop.w
 8006010:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006014:	4681      	mov	r9, r0
 8006016:	d1d5      	bne.n	8005fc4 <_vfiprintf_r+0x198>
 8006018:	89a3      	ldrh	r3, [r4, #12]
 800601a:	065b      	lsls	r3, r3, #25
 800601c:	f53f af7e 	bmi.w	8005f1c <_vfiprintf_r+0xf0>
 8006020:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006022:	e77d      	b.n	8005f20 <_vfiprintf_r+0xf4>
 8006024:	ab03      	add	r3, sp, #12
 8006026:	9300      	str	r3, [sp, #0]
 8006028:	4622      	mov	r2, r4
 800602a:	4b0a      	ldr	r3, [pc, #40]	; (8006054 <_vfiprintf_r+0x228>)
 800602c:	a904      	add	r1, sp, #16
 800602e:	4630      	mov	r0, r6
 8006030:	f000 f888 	bl	8006144 <_printf_i>
 8006034:	e7ec      	b.n	8006010 <_vfiprintf_r+0x1e4>
 8006036:	bf00      	nop
 8006038:	080069c0 	.word	0x080069c0
 800603c:	08006a0a 	.word	0x08006a0a
 8006040:	080069e0 	.word	0x080069e0
 8006044:	080069a0 	.word	0x080069a0
 8006048:	08006a10 	.word	0x08006a10
 800604c:	08006a14 	.word	0x08006a14
 8006050:	00000000 	.word	0x00000000
 8006054:	08005e07 	.word	0x08005e07

08006058 <_printf_common>:
 8006058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800605c:	4691      	mov	r9, r2
 800605e:	461f      	mov	r7, r3
 8006060:	688a      	ldr	r2, [r1, #8]
 8006062:	690b      	ldr	r3, [r1, #16]
 8006064:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006068:	4293      	cmp	r3, r2
 800606a:	bfb8      	it	lt
 800606c:	4613      	movlt	r3, r2
 800606e:	f8c9 3000 	str.w	r3, [r9]
 8006072:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006076:	4606      	mov	r6, r0
 8006078:	460c      	mov	r4, r1
 800607a:	b112      	cbz	r2, 8006082 <_printf_common+0x2a>
 800607c:	3301      	adds	r3, #1
 800607e:	f8c9 3000 	str.w	r3, [r9]
 8006082:	6823      	ldr	r3, [r4, #0]
 8006084:	0699      	lsls	r1, r3, #26
 8006086:	bf42      	ittt	mi
 8006088:	f8d9 3000 	ldrmi.w	r3, [r9]
 800608c:	3302      	addmi	r3, #2
 800608e:	f8c9 3000 	strmi.w	r3, [r9]
 8006092:	6825      	ldr	r5, [r4, #0]
 8006094:	f015 0506 	ands.w	r5, r5, #6
 8006098:	d107      	bne.n	80060aa <_printf_common+0x52>
 800609a:	f104 0a19 	add.w	sl, r4, #25
 800609e:	68e3      	ldr	r3, [r4, #12]
 80060a0:	f8d9 2000 	ldr.w	r2, [r9]
 80060a4:	1a9b      	subs	r3, r3, r2
 80060a6:	42ab      	cmp	r3, r5
 80060a8:	dc28      	bgt.n	80060fc <_printf_common+0xa4>
 80060aa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80060ae:	6822      	ldr	r2, [r4, #0]
 80060b0:	3300      	adds	r3, #0
 80060b2:	bf18      	it	ne
 80060b4:	2301      	movne	r3, #1
 80060b6:	0692      	lsls	r2, r2, #26
 80060b8:	d42d      	bmi.n	8006116 <_printf_common+0xbe>
 80060ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060be:	4639      	mov	r1, r7
 80060c0:	4630      	mov	r0, r6
 80060c2:	47c0      	blx	r8
 80060c4:	3001      	adds	r0, #1
 80060c6:	d020      	beq.n	800610a <_printf_common+0xb2>
 80060c8:	6823      	ldr	r3, [r4, #0]
 80060ca:	68e5      	ldr	r5, [r4, #12]
 80060cc:	f8d9 2000 	ldr.w	r2, [r9]
 80060d0:	f003 0306 	and.w	r3, r3, #6
 80060d4:	2b04      	cmp	r3, #4
 80060d6:	bf08      	it	eq
 80060d8:	1aad      	subeq	r5, r5, r2
 80060da:	68a3      	ldr	r3, [r4, #8]
 80060dc:	6922      	ldr	r2, [r4, #16]
 80060de:	bf0c      	ite	eq
 80060e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060e4:	2500      	movne	r5, #0
 80060e6:	4293      	cmp	r3, r2
 80060e8:	bfc4      	itt	gt
 80060ea:	1a9b      	subgt	r3, r3, r2
 80060ec:	18ed      	addgt	r5, r5, r3
 80060ee:	f04f 0900 	mov.w	r9, #0
 80060f2:	341a      	adds	r4, #26
 80060f4:	454d      	cmp	r5, r9
 80060f6:	d11a      	bne.n	800612e <_printf_common+0xd6>
 80060f8:	2000      	movs	r0, #0
 80060fa:	e008      	b.n	800610e <_printf_common+0xb6>
 80060fc:	2301      	movs	r3, #1
 80060fe:	4652      	mov	r2, sl
 8006100:	4639      	mov	r1, r7
 8006102:	4630      	mov	r0, r6
 8006104:	47c0      	blx	r8
 8006106:	3001      	adds	r0, #1
 8006108:	d103      	bne.n	8006112 <_printf_common+0xba>
 800610a:	f04f 30ff 	mov.w	r0, #4294967295
 800610e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006112:	3501      	adds	r5, #1
 8006114:	e7c3      	b.n	800609e <_printf_common+0x46>
 8006116:	18e1      	adds	r1, r4, r3
 8006118:	1c5a      	adds	r2, r3, #1
 800611a:	2030      	movs	r0, #48	; 0x30
 800611c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006120:	4422      	add	r2, r4
 8006122:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006126:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800612a:	3302      	adds	r3, #2
 800612c:	e7c5      	b.n	80060ba <_printf_common+0x62>
 800612e:	2301      	movs	r3, #1
 8006130:	4622      	mov	r2, r4
 8006132:	4639      	mov	r1, r7
 8006134:	4630      	mov	r0, r6
 8006136:	47c0      	blx	r8
 8006138:	3001      	adds	r0, #1
 800613a:	d0e6      	beq.n	800610a <_printf_common+0xb2>
 800613c:	f109 0901 	add.w	r9, r9, #1
 8006140:	e7d8      	b.n	80060f4 <_printf_common+0x9c>
	...

08006144 <_printf_i>:
 8006144:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006148:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800614c:	460c      	mov	r4, r1
 800614e:	7e09      	ldrb	r1, [r1, #24]
 8006150:	b085      	sub	sp, #20
 8006152:	296e      	cmp	r1, #110	; 0x6e
 8006154:	4617      	mov	r7, r2
 8006156:	4606      	mov	r6, r0
 8006158:	4698      	mov	r8, r3
 800615a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800615c:	f000 80b3 	beq.w	80062c6 <_printf_i+0x182>
 8006160:	d822      	bhi.n	80061a8 <_printf_i+0x64>
 8006162:	2963      	cmp	r1, #99	; 0x63
 8006164:	d036      	beq.n	80061d4 <_printf_i+0x90>
 8006166:	d80a      	bhi.n	800617e <_printf_i+0x3a>
 8006168:	2900      	cmp	r1, #0
 800616a:	f000 80b9 	beq.w	80062e0 <_printf_i+0x19c>
 800616e:	2958      	cmp	r1, #88	; 0x58
 8006170:	f000 8083 	beq.w	800627a <_printf_i+0x136>
 8006174:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006178:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800617c:	e032      	b.n	80061e4 <_printf_i+0xa0>
 800617e:	2964      	cmp	r1, #100	; 0x64
 8006180:	d001      	beq.n	8006186 <_printf_i+0x42>
 8006182:	2969      	cmp	r1, #105	; 0x69
 8006184:	d1f6      	bne.n	8006174 <_printf_i+0x30>
 8006186:	6820      	ldr	r0, [r4, #0]
 8006188:	6813      	ldr	r3, [r2, #0]
 800618a:	0605      	lsls	r5, r0, #24
 800618c:	f103 0104 	add.w	r1, r3, #4
 8006190:	d52a      	bpl.n	80061e8 <_printf_i+0xa4>
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	6011      	str	r1, [r2, #0]
 8006196:	2b00      	cmp	r3, #0
 8006198:	da03      	bge.n	80061a2 <_printf_i+0x5e>
 800619a:	222d      	movs	r2, #45	; 0x2d
 800619c:	425b      	negs	r3, r3
 800619e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80061a2:	486f      	ldr	r0, [pc, #444]	; (8006360 <_printf_i+0x21c>)
 80061a4:	220a      	movs	r2, #10
 80061a6:	e039      	b.n	800621c <_printf_i+0xd8>
 80061a8:	2973      	cmp	r1, #115	; 0x73
 80061aa:	f000 809d 	beq.w	80062e8 <_printf_i+0x1a4>
 80061ae:	d808      	bhi.n	80061c2 <_printf_i+0x7e>
 80061b0:	296f      	cmp	r1, #111	; 0x6f
 80061b2:	d020      	beq.n	80061f6 <_printf_i+0xb2>
 80061b4:	2970      	cmp	r1, #112	; 0x70
 80061b6:	d1dd      	bne.n	8006174 <_printf_i+0x30>
 80061b8:	6823      	ldr	r3, [r4, #0]
 80061ba:	f043 0320 	orr.w	r3, r3, #32
 80061be:	6023      	str	r3, [r4, #0]
 80061c0:	e003      	b.n	80061ca <_printf_i+0x86>
 80061c2:	2975      	cmp	r1, #117	; 0x75
 80061c4:	d017      	beq.n	80061f6 <_printf_i+0xb2>
 80061c6:	2978      	cmp	r1, #120	; 0x78
 80061c8:	d1d4      	bne.n	8006174 <_printf_i+0x30>
 80061ca:	2378      	movs	r3, #120	; 0x78
 80061cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80061d0:	4864      	ldr	r0, [pc, #400]	; (8006364 <_printf_i+0x220>)
 80061d2:	e055      	b.n	8006280 <_printf_i+0x13c>
 80061d4:	6813      	ldr	r3, [r2, #0]
 80061d6:	1d19      	adds	r1, r3, #4
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	6011      	str	r1, [r2, #0]
 80061dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061e4:	2301      	movs	r3, #1
 80061e6:	e08c      	b.n	8006302 <_printf_i+0x1be>
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	6011      	str	r1, [r2, #0]
 80061ec:	f010 0f40 	tst.w	r0, #64	; 0x40
 80061f0:	bf18      	it	ne
 80061f2:	b21b      	sxthne	r3, r3
 80061f4:	e7cf      	b.n	8006196 <_printf_i+0x52>
 80061f6:	6813      	ldr	r3, [r2, #0]
 80061f8:	6825      	ldr	r5, [r4, #0]
 80061fa:	1d18      	adds	r0, r3, #4
 80061fc:	6010      	str	r0, [r2, #0]
 80061fe:	0628      	lsls	r0, r5, #24
 8006200:	d501      	bpl.n	8006206 <_printf_i+0xc2>
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	e002      	b.n	800620c <_printf_i+0xc8>
 8006206:	0668      	lsls	r0, r5, #25
 8006208:	d5fb      	bpl.n	8006202 <_printf_i+0xbe>
 800620a:	881b      	ldrh	r3, [r3, #0]
 800620c:	4854      	ldr	r0, [pc, #336]	; (8006360 <_printf_i+0x21c>)
 800620e:	296f      	cmp	r1, #111	; 0x6f
 8006210:	bf14      	ite	ne
 8006212:	220a      	movne	r2, #10
 8006214:	2208      	moveq	r2, #8
 8006216:	2100      	movs	r1, #0
 8006218:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800621c:	6865      	ldr	r5, [r4, #4]
 800621e:	60a5      	str	r5, [r4, #8]
 8006220:	2d00      	cmp	r5, #0
 8006222:	f2c0 8095 	blt.w	8006350 <_printf_i+0x20c>
 8006226:	6821      	ldr	r1, [r4, #0]
 8006228:	f021 0104 	bic.w	r1, r1, #4
 800622c:	6021      	str	r1, [r4, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d13d      	bne.n	80062ae <_printf_i+0x16a>
 8006232:	2d00      	cmp	r5, #0
 8006234:	f040 808e 	bne.w	8006354 <_printf_i+0x210>
 8006238:	4665      	mov	r5, ip
 800623a:	2a08      	cmp	r2, #8
 800623c:	d10b      	bne.n	8006256 <_printf_i+0x112>
 800623e:	6823      	ldr	r3, [r4, #0]
 8006240:	07db      	lsls	r3, r3, #31
 8006242:	d508      	bpl.n	8006256 <_printf_i+0x112>
 8006244:	6923      	ldr	r3, [r4, #16]
 8006246:	6862      	ldr	r2, [r4, #4]
 8006248:	429a      	cmp	r2, r3
 800624a:	bfde      	ittt	le
 800624c:	2330      	movle	r3, #48	; 0x30
 800624e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006252:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006256:	ebac 0305 	sub.w	r3, ip, r5
 800625a:	6123      	str	r3, [r4, #16]
 800625c:	f8cd 8000 	str.w	r8, [sp]
 8006260:	463b      	mov	r3, r7
 8006262:	aa03      	add	r2, sp, #12
 8006264:	4621      	mov	r1, r4
 8006266:	4630      	mov	r0, r6
 8006268:	f7ff fef6 	bl	8006058 <_printf_common>
 800626c:	3001      	adds	r0, #1
 800626e:	d14d      	bne.n	800630c <_printf_i+0x1c8>
 8006270:	f04f 30ff 	mov.w	r0, #4294967295
 8006274:	b005      	add	sp, #20
 8006276:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800627a:	4839      	ldr	r0, [pc, #228]	; (8006360 <_printf_i+0x21c>)
 800627c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006280:	6813      	ldr	r3, [r2, #0]
 8006282:	6821      	ldr	r1, [r4, #0]
 8006284:	1d1d      	adds	r5, r3, #4
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	6015      	str	r5, [r2, #0]
 800628a:	060a      	lsls	r2, r1, #24
 800628c:	d50b      	bpl.n	80062a6 <_printf_i+0x162>
 800628e:	07ca      	lsls	r2, r1, #31
 8006290:	bf44      	itt	mi
 8006292:	f041 0120 	orrmi.w	r1, r1, #32
 8006296:	6021      	strmi	r1, [r4, #0]
 8006298:	b91b      	cbnz	r3, 80062a2 <_printf_i+0x15e>
 800629a:	6822      	ldr	r2, [r4, #0]
 800629c:	f022 0220 	bic.w	r2, r2, #32
 80062a0:	6022      	str	r2, [r4, #0]
 80062a2:	2210      	movs	r2, #16
 80062a4:	e7b7      	b.n	8006216 <_printf_i+0xd2>
 80062a6:	064d      	lsls	r5, r1, #25
 80062a8:	bf48      	it	mi
 80062aa:	b29b      	uxthmi	r3, r3
 80062ac:	e7ef      	b.n	800628e <_printf_i+0x14a>
 80062ae:	4665      	mov	r5, ip
 80062b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80062b4:	fb02 3311 	mls	r3, r2, r1, r3
 80062b8:	5cc3      	ldrb	r3, [r0, r3]
 80062ba:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80062be:	460b      	mov	r3, r1
 80062c0:	2900      	cmp	r1, #0
 80062c2:	d1f5      	bne.n	80062b0 <_printf_i+0x16c>
 80062c4:	e7b9      	b.n	800623a <_printf_i+0xf6>
 80062c6:	6813      	ldr	r3, [r2, #0]
 80062c8:	6825      	ldr	r5, [r4, #0]
 80062ca:	6961      	ldr	r1, [r4, #20]
 80062cc:	1d18      	adds	r0, r3, #4
 80062ce:	6010      	str	r0, [r2, #0]
 80062d0:	0628      	lsls	r0, r5, #24
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	d501      	bpl.n	80062da <_printf_i+0x196>
 80062d6:	6019      	str	r1, [r3, #0]
 80062d8:	e002      	b.n	80062e0 <_printf_i+0x19c>
 80062da:	066a      	lsls	r2, r5, #25
 80062dc:	d5fb      	bpl.n	80062d6 <_printf_i+0x192>
 80062de:	8019      	strh	r1, [r3, #0]
 80062e0:	2300      	movs	r3, #0
 80062e2:	6123      	str	r3, [r4, #16]
 80062e4:	4665      	mov	r5, ip
 80062e6:	e7b9      	b.n	800625c <_printf_i+0x118>
 80062e8:	6813      	ldr	r3, [r2, #0]
 80062ea:	1d19      	adds	r1, r3, #4
 80062ec:	6011      	str	r1, [r2, #0]
 80062ee:	681d      	ldr	r5, [r3, #0]
 80062f0:	6862      	ldr	r2, [r4, #4]
 80062f2:	2100      	movs	r1, #0
 80062f4:	4628      	mov	r0, r5
 80062f6:	f7f9 ff7b 	bl	80001f0 <memchr>
 80062fa:	b108      	cbz	r0, 8006300 <_printf_i+0x1bc>
 80062fc:	1b40      	subs	r0, r0, r5
 80062fe:	6060      	str	r0, [r4, #4]
 8006300:	6863      	ldr	r3, [r4, #4]
 8006302:	6123      	str	r3, [r4, #16]
 8006304:	2300      	movs	r3, #0
 8006306:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800630a:	e7a7      	b.n	800625c <_printf_i+0x118>
 800630c:	6923      	ldr	r3, [r4, #16]
 800630e:	462a      	mov	r2, r5
 8006310:	4639      	mov	r1, r7
 8006312:	4630      	mov	r0, r6
 8006314:	47c0      	blx	r8
 8006316:	3001      	adds	r0, #1
 8006318:	d0aa      	beq.n	8006270 <_printf_i+0x12c>
 800631a:	6823      	ldr	r3, [r4, #0]
 800631c:	079b      	lsls	r3, r3, #30
 800631e:	d413      	bmi.n	8006348 <_printf_i+0x204>
 8006320:	68e0      	ldr	r0, [r4, #12]
 8006322:	9b03      	ldr	r3, [sp, #12]
 8006324:	4298      	cmp	r0, r3
 8006326:	bfb8      	it	lt
 8006328:	4618      	movlt	r0, r3
 800632a:	e7a3      	b.n	8006274 <_printf_i+0x130>
 800632c:	2301      	movs	r3, #1
 800632e:	464a      	mov	r2, r9
 8006330:	4639      	mov	r1, r7
 8006332:	4630      	mov	r0, r6
 8006334:	47c0      	blx	r8
 8006336:	3001      	adds	r0, #1
 8006338:	d09a      	beq.n	8006270 <_printf_i+0x12c>
 800633a:	3501      	adds	r5, #1
 800633c:	68e3      	ldr	r3, [r4, #12]
 800633e:	9a03      	ldr	r2, [sp, #12]
 8006340:	1a9b      	subs	r3, r3, r2
 8006342:	42ab      	cmp	r3, r5
 8006344:	dcf2      	bgt.n	800632c <_printf_i+0x1e8>
 8006346:	e7eb      	b.n	8006320 <_printf_i+0x1dc>
 8006348:	2500      	movs	r5, #0
 800634a:	f104 0919 	add.w	r9, r4, #25
 800634e:	e7f5      	b.n	800633c <_printf_i+0x1f8>
 8006350:	2b00      	cmp	r3, #0
 8006352:	d1ac      	bne.n	80062ae <_printf_i+0x16a>
 8006354:	7803      	ldrb	r3, [r0, #0]
 8006356:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800635a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800635e:	e76c      	b.n	800623a <_printf_i+0xf6>
 8006360:	08006a1b 	.word	0x08006a1b
 8006364:	08006a2c 	.word	0x08006a2c

08006368 <_sbrk_r>:
 8006368:	b538      	push	{r3, r4, r5, lr}
 800636a:	4c06      	ldr	r4, [pc, #24]	; (8006384 <_sbrk_r+0x1c>)
 800636c:	2300      	movs	r3, #0
 800636e:	4605      	mov	r5, r0
 8006370:	4608      	mov	r0, r1
 8006372:	6023      	str	r3, [r4, #0]
 8006374:	f7fb fbf4 	bl	8001b60 <_sbrk>
 8006378:	1c43      	adds	r3, r0, #1
 800637a:	d102      	bne.n	8006382 <_sbrk_r+0x1a>
 800637c:	6823      	ldr	r3, [r4, #0]
 800637e:	b103      	cbz	r3, 8006382 <_sbrk_r+0x1a>
 8006380:	602b      	str	r3, [r5, #0]
 8006382:	bd38      	pop	{r3, r4, r5, pc}
 8006384:	20001fa0 	.word	0x20001fa0

08006388 <__sread>:
 8006388:	b510      	push	{r4, lr}
 800638a:	460c      	mov	r4, r1
 800638c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006390:	f000 faa4 	bl	80068dc <_read_r>
 8006394:	2800      	cmp	r0, #0
 8006396:	bfab      	itete	ge
 8006398:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800639a:	89a3      	ldrhlt	r3, [r4, #12]
 800639c:	181b      	addge	r3, r3, r0
 800639e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80063a2:	bfac      	ite	ge
 80063a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80063a6:	81a3      	strhlt	r3, [r4, #12]
 80063a8:	bd10      	pop	{r4, pc}

080063aa <__swrite>:
 80063aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063ae:	461f      	mov	r7, r3
 80063b0:	898b      	ldrh	r3, [r1, #12]
 80063b2:	05db      	lsls	r3, r3, #23
 80063b4:	4605      	mov	r5, r0
 80063b6:	460c      	mov	r4, r1
 80063b8:	4616      	mov	r6, r2
 80063ba:	d505      	bpl.n	80063c8 <__swrite+0x1e>
 80063bc:	2302      	movs	r3, #2
 80063be:	2200      	movs	r2, #0
 80063c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063c4:	f000 f9c4 	bl	8006750 <_lseek_r>
 80063c8:	89a3      	ldrh	r3, [r4, #12]
 80063ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063d2:	81a3      	strh	r3, [r4, #12]
 80063d4:	4632      	mov	r2, r6
 80063d6:	463b      	mov	r3, r7
 80063d8:	4628      	mov	r0, r5
 80063da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063de:	f000 b877 	b.w	80064d0 <_write_r>

080063e2 <__sseek>:
 80063e2:	b510      	push	{r4, lr}
 80063e4:	460c      	mov	r4, r1
 80063e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063ea:	f000 f9b1 	bl	8006750 <_lseek_r>
 80063ee:	1c43      	adds	r3, r0, #1
 80063f0:	89a3      	ldrh	r3, [r4, #12]
 80063f2:	bf15      	itete	ne
 80063f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80063f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80063fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80063fe:	81a3      	strheq	r3, [r4, #12]
 8006400:	bf18      	it	ne
 8006402:	81a3      	strhne	r3, [r4, #12]
 8006404:	bd10      	pop	{r4, pc}

08006406 <__sclose>:
 8006406:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800640a:	f000 b8e1 	b.w	80065d0 <_close_r>
	...

08006410 <__swbuf_r>:
 8006410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006412:	460e      	mov	r6, r1
 8006414:	4614      	mov	r4, r2
 8006416:	4605      	mov	r5, r0
 8006418:	b118      	cbz	r0, 8006422 <__swbuf_r+0x12>
 800641a:	6983      	ldr	r3, [r0, #24]
 800641c:	b90b      	cbnz	r3, 8006422 <__swbuf_r+0x12>
 800641e:	f7ff fbe1 	bl	8005be4 <__sinit>
 8006422:	4b21      	ldr	r3, [pc, #132]	; (80064a8 <__swbuf_r+0x98>)
 8006424:	429c      	cmp	r4, r3
 8006426:	d12a      	bne.n	800647e <__swbuf_r+0x6e>
 8006428:	686c      	ldr	r4, [r5, #4]
 800642a:	69a3      	ldr	r3, [r4, #24]
 800642c:	60a3      	str	r3, [r4, #8]
 800642e:	89a3      	ldrh	r3, [r4, #12]
 8006430:	071a      	lsls	r2, r3, #28
 8006432:	d52e      	bpl.n	8006492 <__swbuf_r+0x82>
 8006434:	6923      	ldr	r3, [r4, #16]
 8006436:	b363      	cbz	r3, 8006492 <__swbuf_r+0x82>
 8006438:	6923      	ldr	r3, [r4, #16]
 800643a:	6820      	ldr	r0, [r4, #0]
 800643c:	1ac0      	subs	r0, r0, r3
 800643e:	6963      	ldr	r3, [r4, #20]
 8006440:	b2f6      	uxtb	r6, r6
 8006442:	4283      	cmp	r3, r0
 8006444:	4637      	mov	r7, r6
 8006446:	dc04      	bgt.n	8006452 <__swbuf_r+0x42>
 8006448:	4621      	mov	r1, r4
 800644a:	4628      	mov	r0, r5
 800644c:	f000 f956 	bl	80066fc <_fflush_r>
 8006450:	bb28      	cbnz	r0, 800649e <__swbuf_r+0x8e>
 8006452:	68a3      	ldr	r3, [r4, #8]
 8006454:	3b01      	subs	r3, #1
 8006456:	60a3      	str	r3, [r4, #8]
 8006458:	6823      	ldr	r3, [r4, #0]
 800645a:	1c5a      	adds	r2, r3, #1
 800645c:	6022      	str	r2, [r4, #0]
 800645e:	701e      	strb	r6, [r3, #0]
 8006460:	6963      	ldr	r3, [r4, #20]
 8006462:	3001      	adds	r0, #1
 8006464:	4283      	cmp	r3, r0
 8006466:	d004      	beq.n	8006472 <__swbuf_r+0x62>
 8006468:	89a3      	ldrh	r3, [r4, #12]
 800646a:	07db      	lsls	r3, r3, #31
 800646c:	d519      	bpl.n	80064a2 <__swbuf_r+0x92>
 800646e:	2e0a      	cmp	r6, #10
 8006470:	d117      	bne.n	80064a2 <__swbuf_r+0x92>
 8006472:	4621      	mov	r1, r4
 8006474:	4628      	mov	r0, r5
 8006476:	f000 f941 	bl	80066fc <_fflush_r>
 800647a:	b190      	cbz	r0, 80064a2 <__swbuf_r+0x92>
 800647c:	e00f      	b.n	800649e <__swbuf_r+0x8e>
 800647e:	4b0b      	ldr	r3, [pc, #44]	; (80064ac <__swbuf_r+0x9c>)
 8006480:	429c      	cmp	r4, r3
 8006482:	d101      	bne.n	8006488 <__swbuf_r+0x78>
 8006484:	68ac      	ldr	r4, [r5, #8]
 8006486:	e7d0      	b.n	800642a <__swbuf_r+0x1a>
 8006488:	4b09      	ldr	r3, [pc, #36]	; (80064b0 <__swbuf_r+0xa0>)
 800648a:	429c      	cmp	r4, r3
 800648c:	bf08      	it	eq
 800648e:	68ec      	ldreq	r4, [r5, #12]
 8006490:	e7cb      	b.n	800642a <__swbuf_r+0x1a>
 8006492:	4621      	mov	r1, r4
 8006494:	4628      	mov	r0, r5
 8006496:	f000 f82d 	bl	80064f4 <__swsetup_r>
 800649a:	2800      	cmp	r0, #0
 800649c:	d0cc      	beq.n	8006438 <__swbuf_r+0x28>
 800649e:	f04f 37ff 	mov.w	r7, #4294967295
 80064a2:	4638      	mov	r0, r7
 80064a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064a6:	bf00      	nop
 80064a8:	080069c0 	.word	0x080069c0
 80064ac:	080069e0 	.word	0x080069e0
 80064b0:	080069a0 	.word	0x080069a0

080064b4 <__ascii_wctomb>:
 80064b4:	b149      	cbz	r1, 80064ca <__ascii_wctomb+0x16>
 80064b6:	2aff      	cmp	r2, #255	; 0xff
 80064b8:	bf85      	ittet	hi
 80064ba:	238a      	movhi	r3, #138	; 0x8a
 80064bc:	6003      	strhi	r3, [r0, #0]
 80064be:	700a      	strbls	r2, [r1, #0]
 80064c0:	f04f 30ff 	movhi.w	r0, #4294967295
 80064c4:	bf98      	it	ls
 80064c6:	2001      	movls	r0, #1
 80064c8:	4770      	bx	lr
 80064ca:	4608      	mov	r0, r1
 80064cc:	4770      	bx	lr
	...

080064d0 <_write_r>:
 80064d0:	b538      	push	{r3, r4, r5, lr}
 80064d2:	4c07      	ldr	r4, [pc, #28]	; (80064f0 <_write_r+0x20>)
 80064d4:	4605      	mov	r5, r0
 80064d6:	4608      	mov	r0, r1
 80064d8:	4611      	mov	r1, r2
 80064da:	2200      	movs	r2, #0
 80064dc:	6022      	str	r2, [r4, #0]
 80064de:	461a      	mov	r2, r3
 80064e0:	f7fb f8aa 	bl	8001638 <_write>
 80064e4:	1c43      	adds	r3, r0, #1
 80064e6:	d102      	bne.n	80064ee <_write_r+0x1e>
 80064e8:	6823      	ldr	r3, [r4, #0]
 80064ea:	b103      	cbz	r3, 80064ee <_write_r+0x1e>
 80064ec:	602b      	str	r3, [r5, #0]
 80064ee:	bd38      	pop	{r3, r4, r5, pc}
 80064f0:	20001fa0 	.word	0x20001fa0

080064f4 <__swsetup_r>:
 80064f4:	4b32      	ldr	r3, [pc, #200]	; (80065c0 <__swsetup_r+0xcc>)
 80064f6:	b570      	push	{r4, r5, r6, lr}
 80064f8:	681d      	ldr	r5, [r3, #0]
 80064fa:	4606      	mov	r6, r0
 80064fc:	460c      	mov	r4, r1
 80064fe:	b125      	cbz	r5, 800650a <__swsetup_r+0x16>
 8006500:	69ab      	ldr	r3, [r5, #24]
 8006502:	b913      	cbnz	r3, 800650a <__swsetup_r+0x16>
 8006504:	4628      	mov	r0, r5
 8006506:	f7ff fb6d 	bl	8005be4 <__sinit>
 800650a:	4b2e      	ldr	r3, [pc, #184]	; (80065c4 <__swsetup_r+0xd0>)
 800650c:	429c      	cmp	r4, r3
 800650e:	d10f      	bne.n	8006530 <__swsetup_r+0x3c>
 8006510:	686c      	ldr	r4, [r5, #4]
 8006512:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006516:	b29a      	uxth	r2, r3
 8006518:	0715      	lsls	r5, r2, #28
 800651a:	d42c      	bmi.n	8006576 <__swsetup_r+0x82>
 800651c:	06d0      	lsls	r0, r2, #27
 800651e:	d411      	bmi.n	8006544 <__swsetup_r+0x50>
 8006520:	2209      	movs	r2, #9
 8006522:	6032      	str	r2, [r6, #0]
 8006524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006528:	81a3      	strh	r3, [r4, #12]
 800652a:	f04f 30ff 	mov.w	r0, #4294967295
 800652e:	e03e      	b.n	80065ae <__swsetup_r+0xba>
 8006530:	4b25      	ldr	r3, [pc, #148]	; (80065c8 <__swsetup_r+0xd4>)
 8006532:	429c      	cmp	r4, r3
 8006534:	d101      	bne.n	800653a <__swsetup_r+0x46>
 8006536:	68ac      	ldr	r4, [r5, #8]
 8006538:	e7eb      	b.n	8006512 <__swsetup_r+0x1e>
 800653a:	4b24      	ldr	r3, [pc, #144]	; (80065cc <__swsetup_r+0xd8>)
 800653c:	429c      	cmp	r4, r3
 800653e:	bf08      	it	eq
 8006540:	68ec      	ldreq	r4, [r5, #12]
 8006542:	e7e6      	b.n	8006512 <__swsetup_r+0x1e>
 8006544:	0751      	lsls	r1, r2, #29
 8006546:	d512      	bpl.n	800656e <__swsetup_r+0x7a>
 8006548:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800654a:	b141      	cbz	r1, 800655e <__swsetup_r+0x6a>
 800654c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006550:	4299      	cmp	r1, r3
 8006552:	d002      	beq.n	800655a <__swsetup_r+0x66>
 8006554:	4630      	mov	r0, r6
 8006556:	f000 f973 	bl	8006840 <_free_r>
 800655a:	2300      	movs	r3, #0
 800655c:	6363      	str	r3, [r4, #52]	; 0x34
 800655e:	89a3      	ldrh	r3, [r4, #12]
 8006560:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006564:	81a3      	strh	r3, [r4, #12]
 8006566:	2300      	movs	r3, #0
 8006568:	6063      	str	r3, [r4, #4]
 800656a:	6923      	ldr	r3, [r4, #16]
 800656c:	6023      	str	r3, [r4, #0]
 800656e:	89a3      	ldrh	r3, [r4, #12]
 8006570:	f043 0308 	orr.w	r3, r3, #8
 8006574:	81a3      	strh	r3, [r4, #12]
 8006576:	6923      	ldr	r3, [r4, #16]
 8006578:	b94b      	cbnz	r3, 800658e <__swsetup_r+0x9a>
 800657a:	89a3      	ldrh	r3, [r4, #12]
 800657c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006580:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006584:	d003      	beq.n	800658e <__swsetup_r+0x9a>
 8006586:	4621      	mov	r1, r4
 8006588:	4630      	mov	r0, r6
 800658a:	f000 f917 	bl	80067bc <__smakebuf_r>
 800658e:	89a2      	ldrh	r2, [r4, #12]
 8006590:	f012 0301 	ands.w	r3, r2, #1
 8006594:	d00c      	beq.n	80065b0 <__swsetup_r+0xbc>
 8006596:	2300      	movs	r3, #0
 8006598:	60a3      	str	r3, [r4, #8]
 800659a:	6963      	ldr	r3, [r4, #20]
 800659c:	425b      	negs	r3, r3
 800659e:	61a3      	str	r3, [r4, #24]
 80065a0:	6923      	ldr	r3, [r4, #16]
 80065a2:	b953      	cbnz	r3, 80065ba <__swsetup_r+0xc6>
 80065a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065a8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80065ac:	d1ba      	bne.n	8006524 <__swsetup_r+0x30>
 80065ae:	bd70      	pop	{r4, r5, r6, pc}
 80065b0:	0792      	lsls	r2, r2, #30
 80065b2:	bf58      	it	pl
 80065b4:	6963      	ldrpl	r3, [r4, #20]
 80065b6:	60a3      	str	r3, [r4, #8]
 80065b8:	e7f2      	b.n	80065a0 <__swsetup_r+0xac>
 80065ba:	2000      	movs	r0, #0
 80065bc:	e7f7      	b.n	80065ae <__swsetup_r+0xba>
 80065be:	bf00      	nop
 80065c0:	20000010 	.word	0x20000010
 80065c4:	080069c0 	.word	0x080069c0
 80065c8:	080069e0 	.word	0x080069e0
 80065cc:	080069a0 	.word	0x080069a0

080065d0 <_close_r>:
 80065d0:	b538      	push	{r3, r4, r5, lr}
 80065d2:	4c06      	ldr	r4, [pc, #24]	; (80065ec <_close_r+0x1c>)
 80065d4:	2300      	movs	r3, #0
 80065d6:	4605      	mov	r5, r0
 80065d8:	4608      	mov	r0, r1
 80065da:	6023      	str	r3, [r4, #0]
 80065dc:	f7fb fa8b 	bl	8001af6 <_close>
 80065e0:	1c43      	adds	r3, r0, #1
 80065e2:	d102      	bne.n	80065ea <_close_r+0x1a>
 80065e4:	6823      	ldr	r3, [r4, #0]
 80065e6:	b103      	cbz	r3, 80065ea <_close_r+0x1a>
 80065e8:	602b      	str	r3, [r5, #0]
 80065ea:	bd38      	pop	{r3, r4, r5, pc}
 80065ec:	20001fa0 	.word	0x20001fa0

080065f0 <__sflush_r>:
 80065f0:	898a      	ldrh	r2, [r1, #12]
 80065f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065f6:	4605      	mov	r5, r0
 80065f8:	0710      	lsls	r0, r2, #28
 80065fa:	460c      	mov	r4, r1
 80065fc:	d458      	bmi.n	80066b0 <__sflush_r+0xc0>
 80065fe:	684b      	ldr	r3, [r1, #4]
 8006600:	2b00      	cmp	r3, #0
 8006602:	dc05      	bgt.n	8006610 <__sflush_r+0x20>
 8006604:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006606:	2b00      	cmp	r3, #0
 8006608:	dc02      	bgt.n	8006610 <__sflush_r+0x20>
 800660a:	2000      	movs	r0, #0
 800660c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006610:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006612:	2e00      	cmp	r6, #0
 8006614:	d0f9      	beq.n	800660a <__sflush_r+0x1a>
 8006616:	2300      	movs	r3, #0
 8006618:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800661c:	682f      	ldr	r7, [r5, #0]
 800661e:	6a21      	ldr	r1, [r4, #32]
 8006620:	602b      	str	r3, [r5, #0]
 8006622:	d032      	beq.n	800668a <__sflush_r+0x9a>
 8006624:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006626:	89a3      	ldrh	r3, [r4, #12]
 8006628:	075a      	lsls	r2, r3, #29
 800662a:	d505      	bpl.n	8006638 <__sflush_r+0x48>
 800662c:	6863      	ldr	r3, [r4, #4]
 800662e:	1ac0      	subs	r0, r0, r3
 8006630:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006632:	b10b      	cbz	r3, 8006638 <__sflush_r+0x48>
 8006634:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006636:	1ac0      	subs	r0, r0, r3
 8006638:	2300      	movs	r3, #0
 800663a:	4602      	mov	r2, r0
 800663c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800663e:	6a21      	ldr	r1, [r4, #32]
 8006640:	4628      	mov	r0, r5
 8006642:	47b0      	blx	r6
 8006644:	1c43      	adds	r3, r0, #1
 8006646:	89a3      	ldrh	r3, [r4, #12]
 8006648:	d106      	bne.n	8006658 <__sflush_r+0x68>
 800664a:	6829      	ldr	r1, [r5, #0]
 800664c:	291d      	cmp	r1, #29
 800664e:	d848      	bhi.n	80066e2 <__sflush_r+0xf2>
 8006650:	4a29      	ldr	r2, [pc, #164]	; (80066f8 <__sflush_r+0x108>)
 8006652:	40ca      	lsrs	r2, r1
 8006654:	07d6      	lsls	r6, r2, #31
 8006656:	d544      	bpl.n	80066e2 <__sflush_r+0xf2>
 8006658:	2200      	movs	r2, #0
 800665a:	6062      	str	r2, [r4, #4]
 800665c:	04d9      	lsls	r1, r3, #19
 800665e:	6922      	ldr	r2, [r4, #16]
 8006660:	6022      	str	r2, [r4, #0]
 8006662:	d504      	bpl.n	800666e <__sflush_r+0x7e>
 8006664:	1c42      	adds	r2, r0, #1
 8006666:	d101      	bne.n	800666c <__sflush_r+0x7c>
 8006668:	682b      	ldr	r3, [r5, #0]
 800666a:	b903      	cbnz	r3, 800666e <__sflush_r+0x7e>
 800666c:	6560      	str	r0, [r4, #84]	; 0x54
 800666e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006670:	602f      	str	r7, [r5, #0]
 8006672:	2900      	cmp	r1, #0
 8006674:	d0c9      	beq.n	800660a <__sflush_r+0x1a>
 8006676:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800667a:	4299      	cmp	r1, r3
 800667c:	d002      	beq.n	8006684 <__sflush_r+0x94>
 800667e:	4628      	mov	r0, r5
 8006680:	f000 f8de 	bl	8006840 <_free_r>
 8006684:	2000      	movs	r0, #0
 8006686:	6360      	str	r0, [r4, #52]	; 0x34
 8006688:	e7c0      	b.n	800660c <__sflush_r+0x1c>
 800668a:	2301      	movs	r3, #1
 800668c:	4628      	mov	r0, r5
 800668e:	47b0      	blx	r6
 8006690:	1c41      	adds	r1, r0, #1
 8006692:	d1c8      	bne.n	8006626 <__sflush_r+0x36>
 8006694:	682b      	ldr	r3, [r5, #0]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d0c5      	beq.n	8006626 <__sflush_r+0x36>
 800669a:	2b1d      	cmp	r3, #29
 800669c:	d001      	beq.n	80066a2 <__sflush_r+0xb2>
 800669e:	2b16      	cmp	r3, #22
 80066a0:	d101      	bne.n	80066a6 <__sflush_r+0xb6>
 80066a2:	602f      	str	r7, [r5, #0]
 80066a4:	e7b1      	b.n	800660a <__sflush_r+0x1a>
 80066a6:	89a3      	ldrh	r3, [r4, #12]
 80066a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066ac:	81a3      	strh	r3, [r4, #12]
 80066ae:	e7ad      	b.n	800660c <__sflush_r+0x1c>
 80066b0:	690f      	ldr	r7, [r1, #16]
 80066b2:	2f00      	cmp	r7, #0
 80066b4:	d0a9      	beq.n	800660a <__sflush_r+0x1a>
 80066b6:	0793      	lsls	r3, r2, #30
 80066b8:	680e      	ldr	r6, [r1, #0]
 80066ba:	bf08      	it	eq
 80066bc:	694b      	ldreq	r3, [r1, #20]
 80066be:	600f      	str	r7, [r1, #0]
 80066c0:	bf18      	it	ne
 80066c2:	2300      	movne	r3, #0
 80066c4:	eba6 0807 	sub.w	r8, r6, r7
 80066c8:	608b      	str	r3, [r1, #8]
 80066ca:	f1b8 0f00 	cmp.w	r8, #0
 80066ce:	dd9c      	ble.n	800660a <__sflush_r+0x1a>
 80066d0:	4643      	mov	r3, r8
 80066d2:	463a      	mov	r2, r7
 80066d4:	6a21      	ldr	r1, [r4, #32]
 80066d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80066d8:	4628      	mov	r0, r5
 80066da:	47b0      	blx	r6
 80066dc:	2800      	cmp	r0, #0
 80066de:	dc06      	bgt.n	80066ee <__sflush_r+0xfe>
 80066e0:	89a3      	ldrh	r3, [r4, #12]
 80066e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066e6:	81a3      	strh	r3, [r4, #12]
 80066e8:	f04f 30ff 	mov.w	r0, #4294967295
 80066ec:	e78e      	b.n	800660c <__sflush_r+0x1c>
 80066ee:	4407      	add	r7, r0
 80066f0:	eba8 0800 	sub.w	r8, r8, r0
 80066f4:	e7e9      	b.n	80066ca <__sflush_r+0xda>
 80066f6:	bf00      	nop
 80066f8:	20400001 	.word	0x20400001

080066fc <_fflush_r>:
 80066fc:	b538      	push	{r3, r4, r5, lr}
 80066fe:	690b      	ldr	r3, [r1, #16]
 8006700:	4605      	mov	r5, r0
 8006702:	460c      	mov	r4, r1
 8006704:	b1db      	cbz	r3, 800673e <_fflush_r+0x42>
 8006706:	b118      	cbz	r0, 8006710 <_fflush_r+0x14>
 8006708:	6983      	ldr	r3, [r0, #24]
 800670a:	b90b      	cbnz	r3, 8006710 <_fflush_r+0x14>
 800670c:	f7ff fa6a 	bl	8005be4 <__sinit>
 8006710:	4b0c      	ldr	r3, [pc, #48]	; (8006744 <_fflush_r+0x48>)
 8006712:	429c      	cmp	r4, r3
 8006714:	d109      	bne.n	800672a <_fflush_r+0x2e>
 8006716:	686c      	ldr	r4, [r5, #4]
 8006718:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800671c:	b17b      	cbz	r3, 800673e <_fflush_r+0x42>
 800671e:	4621      	mov	r1, r4
 8006720:	4628      	mov	r0, r5
 8006722:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006726:	f7ff bf63 	b.w	80065f0 <__sflush_r>
 800672a:	4b07      	ldr	r3, [pc, #28]	; (8006748 <_fflush_r+0x4c>)
 800672c:	429c      	cmp	r4, r3
 800672e:	d101      	bne.n	8006734 <_fflush_r+0x38>
 8006730:	68ac      	ldr	r4, [r5, #8]
 8006732:	e7f1      	b.n	8006718 <_fflush_r+0x1c>
 8006734:	4b05      	ldr	r3, [pc, #20]	; (800674c <_fflush_r+0x50>)
 8006736:	429c      	cmp	r4, r3
 8006738:	bf08      	it	eq
 800673a:	68ec      	ldreq	r4, [r5, #12]
 800673c:	e7ec      	b.n	8006718 <_fflush_r+0x1c>
 800673e:	2000      	movs	r0, #0
 8006740:	bd38      	pop	{r3, r4, r5, pc}
 8006742:	bf00      	nop
 8006744:	080069c0 	.word	0x080069c0
 8006748:	080069e0 	.word	0x080069e0
 800674c:	080069a0 	.word	0x080069a0

08006750 <_lseek_r>:
 8006750:	b538      	push	{r3, r4, r5, lr}
 8006752:	4c07      	ldr	r4, [pc, #28]	; (8006770 <_lseek_r+0x20>)
 8006754:	4605      	mov	r5, r0
 8006756:	4608      	mov	r0, r1
 8006758:	4611      	mov	r1, r2
 800675a:	2200      	movs	r2, #0
 800675c:	6022      	str	r2, [r4, #0]
 800675e:	461a      	mov	r2, r3
 8006760:	f7fb f9f0 	bl	8001b44 <_lseek>
 8006764:	1c43      	adds	r3, r0, #1
 8006766:	d102      	bne.n	800676e <_lseek_r+0x1e>
 8006768:	6823      	ldr	r3, [r4, #0]
 800676a:	b103      	cbz	r3, 800676e <_lseek_r+0x1e>
 800676c:	602b      	str	r3, [r5, #0]
 800676e:	bd38      	pop	{r3, r4, r5, pc}
 8006770:	20001fa0 	.word	0x20001fa0

08006774 <__swhatbuf_r>:
 8006774:	b570      	push	{r4, r5, r6, lr}
 8006776:	460e      	mov	r6, r1
 8006778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800677c:	2900      	cmp	r1, #0
 800677e:	b096      	sub	sp, #88	; 0x58
 8006780:	4614      	mov	r4, r2
 8006782:	461d      	mov	r5, r3
 8006784:	da07      	bge.n	8006796 <__swhatbuf_r+0x22>
 8006786:	2300      	movs	r3, #0
 8006788:	602b      	str	r3, [r5, #0]
 800678a:	89b3      	ldrh	r3, [r6, #12]
 800678c:	061a      	lsls	r2, r3, #24
 800678e:	d410      	bmi.n	80067b2 <__swhatbuf_r+0x3e>
 8006790:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006794:	e00e      	b.n	80067b4 <__swhatbuf_r+0x40>
 8006796:	466a      	mov	r2, sp
 8006798:	f000 f8b2 	bl	8006900 <_fstat_r>
 800679c:	2800      	cmp	r0, #0
 800679e:	dbf2      	blt.n	8006786 <__swhatbuf_r+0x12>
 80067a0:	9a01      	ldr	r2, [sp, #4]
 80067a2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80067a6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80067aa:	425a      	negs	r2, r3
 80067ac:	415a      	adcs	r2, r3
 80067ae:	602a      	str	r2, [r5, #0]
 80067b0:	e7ee      	b.n	8006790 <__swhatbuf_r+0x1c>
 80067b2:	2340      	movs	r3, #64	; 0x40
 80067b4:	2000      	movs	r0, #0
 80067b6:	6023      	str	r3, [r4, #0]
 80067b8:	b016      	add	sp, #88	; 0x58
 80067ba:	bd70      	pop	{r4, r5, r6, pc}

080067bc <__smakebuf_r>:
 80067bc:	898b      	ldrh	r3, [r1, #12]
 80067be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80067c0:	079d      	lsls	r5, r3, #30
 80067c2:	4606      	mov	r6, r0
 80067c4:	460c      	mov	r4, r1
 80067c6:	d507      	bpl.n	80067d8 <__smakebuf_r+0x1c>
 80067c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80067cc:	6023      	str	r3, [r4, #0]
 80067ce:	6123      	str	r3, [r4, #16]
 80067d0:	2301      	movs	r3, #1
 80067d2:	6163      	str	r3, [r4, #20]
 80067d4:	b002      	add	sp, #8
 80067d6:	bd70      	pop	{r4, r5, r6, pc}
 80067d8:	ab01      	add	r3, sp, #4
 80067da:	466a      	mov	r2, sp
 80067dc:	f7ff ffca 	bl	8006774 <__swhatbuf_r>
 80067e0:	9900      	ldr	r1, [sp, #0]
 80067e2:	4605      	mov	r5, r0
 80067e4:	4630      	mov	r0, r6
 80067e6:	f7ff fa9d 	bl	8005d24 <_malloc_r>
 80067ea:	b948      	cbnz	r0, 8006800 <__smakebuf_r+0x44>
 80067ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067f0:	059a      	lsls	r2, r3, #22
 80067f2:	d4ef      	bmi.n	80067d4 <__smakebuf_r+0x18>
 80067f4:	f023 0303 	bic.w	r3, r3, #3
 80067f8:	f043 0302 	orr.w	r3, r3, #2
 80067fc:	81a3      	strh	r3, [r4, #12]
 80067fe:	e7e3      	b.n	80067c8 <__smakebuf_r+0xc>
 8006800:	4b0d      	ldr	r3, [pc, #52]	; (8006838 <__smakebuf_r+0x7c>)
 8006802:	62b3      	str	r3, [r6, #40]	; 0x28
 8006804:	89a3      	ldrh	r3, [r4, #12]
 8006806:	6020      	str	r0, [r4, #0]
 8006808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800680c:	81a3      	strh	r3, [r4, #12]
 800680e:	9b00      	ldr	r3, [sp, #0]
 8006810:	6163      	str	r3, [r4, #20]
 8006812:	9b01      	ldr	r3, [sp, #4]
 8006814:	6120      	str	r0, [r4, #16]
 8006816:	b15b      	cbz	r3, 8006830 <__smakebuf_r+0x74>
 8006818:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800681c:	4630      	mov	r0, r6
 800681e:	f000 f881 	bl	8006924 <_isatty_r>
 8006822:	b128      	cbz	r0, 8006830 <__smakebuf_r+0x74>
 8006824:	89a3      	ldrh	r3, [r4, #12]
 8006826:	f023 0303 	bic.w	r3, r3, #3
 800682a:	f043 0301 	orr.w	r3, r3, #1
 800682e:	81a3      	strh	r3, [r4, #12]
 8006830:	89a3      	ldrh	r3, [r4, #12]
 8006832:	431d      	orrs	r5, r3
 8006834:	81a5      	strh	r5, [r4, #12]
 8006836:	e7cd      	b.n	80067d4 <__smakebuf_r+0x18>
 8006838:	08005bad 	.word	0x08005bad

0800683c <__malloc_lock>:
 800683c:	4770      	bx	lr

0800683e <__malloc_unlock>:
 800683e:	4770      	bx	lr

08006840 <_free_r>:
 8006840:	b538      	push	{r3, r4, r5, lr}
 8006842:	4605      	mov	r5, r0
 8006844:	2900      	cmp	r1, #0
 8006846:	d045      	beq.n	80068d4 <_free_r+0x94>
 8006848:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800684c:	1f0c      	subs	r4, r1, #4
 800684e:	2b00      	cmp	r3, #0
 8006850:	bfb8      	it	lt
 8006852:	18e4      	addlt	r4, r4, r3
 8006854:	f7ff fff2 	bl	800683c <__malloc_lock>
 8006858:	4a1f      	ldr	r2, [pc, #124]	; (80068d8 <_free_r+0x98>)
 800685a:	6813      	ldr	r3, [r2, #0]
 800685c:	4610      	mov	r0, r2
 800685e:	b933      	cbnz	r3, 800686e <_free_r+0x2e>
 8006860:	6063      	str	r3, [r4, #4]
 8006862:	6014      	str	r4, [r2, #0]
 8006864:	4628      	mov	r0, r5
 8006866:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800686a:	f7ff bfe8 	b.w	800683e <__malloc_unlock>
 800686e:	42a3      	cmp	r3, r4
 8006870:	d90c      	bls.n	800688c <_free_r+0x4c>
 8006872:	6821      	ldr	r1, [r4, #0]
 8006874:	1862      	adds	r2, r4, r1
 8006876:	4293      	cmp	r3, r2
 8006878:	bf04      	itt	eq
 800687a:	681a      	ldreq	r2, [r3, #0]
 800687c:	685b      	ldreq	r3, [r3, #4]
 800687e:	6063      	str	r3, [r4, #4]
 8006880:	bf04      	itt	eq
 8006882:	1852      	addeq	r2, r2, r1
 8006884:	6022      	streq	r2, [r4, #0]
 8006886:	6004      	str	r4, [r0, #0]
 8006888:	e7ec      	b.n	8006864 <_free_r+0x24>
 800688a:	4613      	mov	r3, r2
 800688c:	685a      	ldr	r2, [r3, #4]
 800688e:	b10a      	cbz	r2, 8006894 <_free_r+0x54>
 8006890:	42a2      	cmp	r2, r4
 8006892:	d9fa      	bls.n	800688a <_free_r+0x4a>
 8006894:	6819      	ldr	r1, [r3, #0]
 8006896:	1858      	adds	r0, r3, r1
 8006898:	42a0      	cmp	r0, r4
 800689a:	d10b      	bne.n	80068b4 <_free_r+0x74>
 800689c:	6820      	ldr	r0, [r4, #0]
 800689e:	4401      	add	r1, r0
 80068a0:	1858      	adds	r0, r3, r1
 80068a2:	4282      	cmp	r2, r0
 80068a4:	6019      	str	r1, [r3, #0]
 80068a6:	d1dd      	bne.n	8006864 <_free_r+0x24>
 80068a8:	6810      	ldr	r0, [r2, #0]
 80068aa:	6852      	ldr	r2, [r2, #4]
 80068ac:	605a      	str	r2, [r3, #4]
 80068ae:	4401      	add	r1, r0
 80068b0:	6019      	str	r1, [r3, #0]
 80068b2:	e7d7      	b.n	8006864 <_free_r+0x24>
 80068b4:	d902      	bls.n	80068bc <_free_r+0x7c>
 80068b6:	230c      	movs	r3, #12
 80068b8:	602b      	str	r3, [r5, #0]
 80068ba:	e7d3      	b.n	8006864 <_free_r+0x24>
 80068bc:	6820      	ldr	r0, [r4, #0]
 80068be:	1821      	adds	r1, r4, r0
 80068c0:	428a      	cmp	r2, r1
 80068c2:	bf04      	itt	eq
 80068c4:	6811      	ldreq	r1, [r2, #0]
 80068c6:	6852      	ldreq	r2, [r2, #4]
 80068c8:	6062      	str	r2, [r4, #4]
 80068ca:	bf04      	itt	eq
 80068cc:	1809      	addeq	r1, r1, r0
 80068ce:	6021      	streq	r1, [r4, #0]
 80068d0:	605c      	str	r4, [r3, #4]
 80068d2:	e7c7      	b.n	8006864 <_free_r+0x24>
 80068d4:	bd38      	pop	{r3, r4, r5, pc}
 80068d6:	bf00      	nop
 80068d8:	20000224 	.word	0x20000224

080068dc <_read_r>:
 80068dc:	b538      	push	{r3, r4, r5, lr}
 80068de:	4c07      	ldr	r4, [pc, #28]	; (80068fc <_read_r+0x20>)
 80068e0:	4605      	mov	r5, r0
 80068e2:	4608      	mov	r0, r1
 80068e4:	4611      	mov	r1, r2
 80068e6:	2200      	movs	r2, #0
 80068e8:	6022      	str	r2, [r4, #0]
 80068ea:	461a      	mov	r2, r3
 80068ec:	f7fb f8e6 	bl	8001abc <_read>
 80068f0:	1c43      	adds	r3, r0, #1
 80068f2:	d102      	bne.n	80068fa <_read_r+0x1e>
 80068f4:	6823      	ldr	r3, [r4, #0]
 80068f6:	b103      	cbz	r3, 80068fa <_read_r+0x1e>
 80068f8:	602b      	str	r3, [r5, #0]
 80068fa:	bd38      	pop	{r3, r4, r5, pc}
 80068fc:	20001fa0 	.word	0x20001fa0

08006900 <_fstat_r>:
 8006900:	b538      	push	{r3, r4, r5, lr}
 8006902:	4c07      	ldr	r4, [pc, #28]	; (8006920 <_fstat_r+0x20>)
 8006904:	2300      	movs	r3, #0
 8006906:	4605      	mov	r5, r0
 8006908:	4608      	mov	r0, r1
 800690a:	4611      	mov	r1, r2
 800690c:	6023      	str	r3, [r4, #0]
 800690e:	f7fb f8fe 	bl	8001b0e <_fstat>
 8006912:	1c43      	adds	r3, r0, #1
 8006914:	d102      	bne.n	800691c <_fstat_r+0x1c>
 8006916:	6823      	ldr	r3, [r4, #0]
 8006918:	b103      	cbz	r3, 800691c <_fstat_r+0x1c>
 800691a:	602b      	str	r3, [r5, #0]
 800691c:	bd38      	pop	{r3, r4, r5, pc}
 800691e:	bf00      	nop
 8006920:	20001fa0 	.word	0x20001fa0

08006924 <_isatty_r>:
 8006924:	b538      	push	{r3, r4, r5, lr}
 8006926:	4c06      	ldr	r4, [pc, #24]	; (8006940 <_isatty_r+0x1c>)
 8006928:	2300      	movs	r3, #0
 800692a:	4605      	mov	r5, r0
 800692c:	4608      	mov	r0, r1
 800692e:	6023      	str	r3, [r4, #0]
 8006930:	f7fb f8fd 	bl	8001b2e <_isatty>
 8006934:	1c43      	adds	r3, r0, #1
 8006936:	d102      	bne.n	800693e <_isatty_r+0x1a>
 8006938:	6823      	ldr	r3, [r4, #0]
 800693a:	b103      	cbz	r3, 800693e <_isatty_r+0x1a>
 800693c:	602b      	str	r3, [r5, #0]
 800693e:	bd38      	pop	{r3, r4, r5, pc}
 8006940:	20001fa0 	.word	0x20001fa0

08006944 <_init>:
 8006944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006946:	bf00      	nop
 8006948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800694a:	bc08      	pop	{r3}
 800694c:	469e      	mov	lr, r3
 800694e:	4770      	bx	lr

08006950 <_fini>:
 8006950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006952:	bf00      	nop
 8006954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006956:	bc08      	pop	{r3}
 8006958:	469e      	mov	lr, r3
 800695a:	4770      	bx	lr
